
buffered_serial_library_tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003518  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  08003624  08003624  00013624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039e4  080039e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080039e4  080039e4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039e4  080039e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039e4  080039e4  000139e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039e8  080039e8  000139e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080039ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001154  20000070  08003a5c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011c4  08003a5c  000211c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a340  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001aa0  00000000  00000000  0002a3d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000720  00000000  00000000  0002be80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000648  00000000  00000000  0002c5a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000141a4  00000000  00000000  0002cbe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000074c5  00000000  00000000  00040d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006b2d4  00000000  00000000  00048251  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b3525  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e64  00000000  00000000  000b35a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800360c 	.word	0x0800360c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800360c 	.word	0x0800360c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b5b0      	push	{r4, r5, r7, lr}
 800014e:	f5ad 7d5c 	sub.w	sp, sp, #880	; 0x370
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fb7e 	bl	8000854 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f8de 	bl	8000318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f972 	bl	8000444 <MX_GPIO_Init>
  MX_DMA_Init();
 8000160:	f000 f94a 	bl	80003f8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000164:	f000 f91e 	bl	80003a4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  UART_HandleTypeDef *huarts[] = {&huart1};
 8000168:	4b65      	ldr	r3, [pc, #404]	; (8000300 <main+0x1b4>)
 800016a:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
  buffered_serial_init(huarts);
 800016e:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8000172:	4618      	mov	r0, r3
 8000174:	f002 fbf0 	bl	8002958 <buffered_serial_init>
  buffered_serial_serial_descriptor *serial1 = buffered_serial_get_huart_serial_descriptor(&huart1);
 8000178:	4861      	ldr	r0, [pc, #388]	; (8000300 <main+0x1b4>)
 800017a:	f002 fc7f 	bl	8002a7c <buffered_serial_get_huart_serial_descriptor>
 800017e:	f8c7 036c 	str.w	r0, [r7, #876]	; 0x36c
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //test 1

  uint8_t test1a[40] = "2A6V7W5NL5ZZC6AYE84NKZ6MVFMZ5DZSYD9TM3\r\n";
 8000182:	4b60      	ldr	r3, [pc, #384]	; (8000304 <main+0x1b8>)
 8000184:	f507 744e 	add.w	r4, r7, #824	; 0x338
 8000188:	461d      	mov	r5, r3
 800018a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800018c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800018e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000190:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000192:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000196:	e884 0003 	stmia.w	r4, {r0, r1}
  static_strings_string_descriptor *string_descriptor = static_strings_save(test1a);
 800019a:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800019e:	4618      	mov	r0, r3
 80001a0:	f002 fb62 	bl	8002868 <static_strings_save>
 80001a4:	f8c7 0368 	str.w	r0, [r7, #872]	; 0x368
  buffered_serial_print_string(serial1,string_descriptor);
 80001a8:	f8d7 1368 	ldr.w	r1, [r7, #872]	; 0x368
 80001ac:	f8d7 036c 	ldr.w	r0, [r7, #876]	; 0x36c
 80001b0:	f002 fcb5 	bl	8002b1e <buffered_serial_print_string>
  static_strings_deallocate(string_descriptor);
 80001b4:	f8d7 0368 	ldr.w	r0, [r7, #872]	; 0x368
 80001b8:	f002 fb7d 	bl	80028b6 <static_strings_deallocate>

  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_RESET);
 80001bc:	2200      	movs	r2, #0
 80001be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c2:	4851      	ldr	r0, [pc, #324]	; (8000308 <main+0x1bc>)
 80001c4:	f001 f874 	bl	80012b0 <HAL_GPIO_WritePin>
  uint8_t test1br\n";
 80001c8:	f107 0318 	add.w	r3, r7, #24
 80001cc:	4a4f      	ldr	r2, [pc, #316]	; (800030c <main+0x1c0>)
 80001ce:	4618      	mov	r0, r3
 80001d0:	4611      	mov	r1, r2
 80001d2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80001d6:	461a      	mov	r2, r3
 80001d8:	f002 fdfc 	bl	8002dd4 <memcpy>
  string_descriptor = static_strings_save(test1b);
 80001dc:	f107 0318 	add.w	r3, r7, #24
 80001e0:	4618      	mov	r0, r3
 80001e2:	f002 fb41 	bl	8002868 <static_strings_save>
 80001e6:	f8c7 0368 	str.w	r0, [r7, #872]	; 0x368

  uint16_t length = string_descriptor->length;
 80001ea:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 80001ee:	889b      	ldrh	r3, [r3, #4]
 80001f0:	f8a7 3366 	strh.w	r3, [r7, #870]	; 0x366
  uint8_t length_string[10];
  sprintf((char *)length_string,"%08d",length);
 80001f4:	f8b7 2366 	ldrh.w	r2, [r7, #870]	; 0x366
 80001f8:	f107 030c 	add.w	r3, r7, #12
 80001fc:	4944      	ldr	r1, [pc, #272]	; (8000310 <main+0x1c4>)
 80001fe:	4618      	mov	r0, r3
 8000200:	f002 fdfc 	bl	8002dfc <siprintf>
  length_string[8] = '\r';
 8000204:	f107 030c 	add.w	r3, r7, #12
 8000208:	220d      	movs	r2, #13
 800020a:	721a      	strb	r2, [r3, #8]
  length_string[9] = '\n';
 800020c:	f107 030c 	add.w	r3, r7, #12
 8000210:	220a      	movs	r2, #10
 8000212:	725a      	strb	r2, [r3, #9]
  while(serial1->huart->gState == HAL_UART_STATE_BUSY_TX);
 8000214:	bf00      	nop
 8000216:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000220:	b2db      	uxtb	r3, r3
 8000222:	2b21      	cmp	r3, #33	; 0x21
 8000224:	d0f7      	beq.n	8000216 <main+0xca>
  HAL_UART_Transmit_DMA(serial1->huart,length_string,10);
 8000226:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	f107 010c 	add.w	r1, r7, #12
 8000230:	220a      	movs	r2, #10
 8000232:	4618      	mov	r0, r3
 8000234:	f001 fcbe 	bl	8001bb4 <HAL_UART_Transmit_DMA>
  while(serial1->huart->gState == HAL_UART_STATE_BUSY_TX);
 8000238:	bf00      	nop
 800023a:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000244:	b2db      	uxtb	r3, r3
 8000246:	2b21      	cmp	r3, #33	; 0x21
 8000248:	d0f7      	beq.n	800023a <main+0xee>

  buffered_serial_print_string(serial1,string_descriptor);
 800024a:	f8d7 1368 	ldr.w	r1, [r7, #872]	; 0x368
 800024e:	f8d7 036c 	ldr.w	r0, [r7, #876]	; 0x36c
 8000252:	f002 fc64 	bl	8002b1e <buffered_serial_print_string>
  static_strings_deallocate(string_descriptor);
 8000256:	f8d7 0368 	ldr.w	r0, [r7, #872]	; 0x368
 800025a:	f002 fb2c 	bl	80028b6 <static_strings_deallocate>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_SET);
 800025e:	2201      	movs	r2, #1
 8000260:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000264:	4828      	ldr	r0, [pc, #160]	; (8000308 <main+0x1bc>)
 8000266:	f001 f823 	bl	80012b0 <HAL_GPIO_WritePin>
  while (1)
  {

	  // test 2-6 Echo

	  if(buffered_serial_available(serial1) > 0){
 800026a:	f8d7 036c 	ldr.w	r0, [r7, #876]	; 0x36c
 800026e:	f002 fc2d 	bl	8002acc <buffered_serial_available>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d0f8      	beq.n	800026a <main+0x11e>
		  uint16_t available = buffered_serial_available(serial1);
 8000278:	f8d7 036c 	ldr.w	r0, [r7, #876]	; 0x36c
 800027c:	f002 fc26 	bl	8002acc <buffered_serial_available>
 8000280:	4603      	mov	r3, r0
 8000282:	f8a7 3364 	strh.w	r3, [r7, #868]	; 0x364
		  uint8_t available_string[10];
		  sprintf((char *)available_string,"%08d",available);
 8000286:	f8b7 2364 	ldrh.w	r2, [r7, #868]	; 0x364
 800028a:	463b      	mov	r3, r7
 800028c:	4920      	ldr	r1, [pc, #128]	; (8000310 <main+0x1c4>)
 800028e:	4618      	mov	r0, r3
 8000290:	f002 fdb4 	bl	8002dfc <siprintf>
		  available_string[8] = '\r';
 8000294:	463b      	mov	r3, r7
 8000296:	220d      	movs	r2, #13
 8000298:	721a      	strb	r2, [r3, #8]
		  available_string[9] = '\n';
 800029a:	463b      	mov	r3, r7
 800029c:	220a      	movs	r2, #10
 800029e:	725a      	strb	r2, [r3, #9]
		  HAL_UART_Transmit_DMA(serial1->huart,available_string,10);
 80002a0:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4639      	mov	r1, r7
 80002a8:	220a      	movs	r2, #10
 80002aa:	4618      	mov	r0, r3
 80002ac:	f001 fc82 	bl	8001bb4 <HAL_UART_Transmit_DMA>
		  string_descriptor = buffered_serial_read_line(serial1);
 80002b0:	f8d7 036c 	ldr.w	r0, [r7, #876]	; 0x36c
 80002b4:	f002 fc84 	bl	8002bc0 <buffered_serial_read_line>
 80002b8:	f8c7 0368 	str.w	r0, [r7, #872]	; 0x368
		  if(string_descriptor != NULL){
 80002bc:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d00a      	beq.n	80002da <main+0x18e>
			  buffered_serial_print_string(serial1,string_descriptor);
 80002c4:	f8d7 1368 	ldr.w	r1, [r7, #872]	; 0x368
 80002c8:	f8d7 036c 	ldr.w	r0, [r7, #876]	; 0x36c
 80002cc:	f002 fc27 	bl	8002b1e <buffered_serial_print_string>
			  static_strings_deallocate(string_descriptor);
 80002d0:	f8d7 0368 	ldr.w	r0, [r7, #872]	; 0x368
 80002d4:	f002 faef 	bl	80028b6 <static_strings_deallocate>
 80002d8:	e7c7      	b.n	800026a <main+0x11e>
		  }
		  else{
			  HAL_UART_Transmit_DMA(serial1->huart,(uint8_t *)"fail\r\n",7);
 80002da:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	2207      	movs	r2, #7
 80002e2:	490c      	ldr	r1, [pc, #48]	; (8000314 <main+0x1c8>)
 80002e4:	4618      	mov	r0, r3
 80002e6:	f001 fc65 	bl	8001bb4 <HAL_UART_Transmit_DMA>
			  while(serial1->huart->gState == HAL_UART_STATE_BUSY_TX);
 80002ea:	bf00      	nop
 80002ec:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	2b21      	cmp	r3, #33	; 0x21
 80002fa:	d0f7      	beq.n	80002ec <main+0x1a0>
	  if(buffered_serial_available(serial1) > 0){
 80002fc:	e7b5      	b.n	800026a <main+0x11e>
 80002fe:	bf00      	nop
 8000300:	20000bb4 	.word	0x20000bb4
 8000304:	08003634 	.word	0x08003634
 8000308:	40011000 	.word	0x40011000
 800030c:	08003660 	.word	0x08003660
 8000310:	08003624 	.word	0x08003624
 8000314:	0800362c 	.word	0x0800362c

08000318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b090      	sub	sp, #64	; 0x40
 800031c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031e:	f107 0318 	add.w	r3, r7, #24
 8000322:	2228      	movs	r2, #40	; 0x28
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f002 fd5f 	bl	8002dea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	609a      	str	r2, [r3, #8]
 8000336:	60da      	str	r2, [r3, #12]
 8000338:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800033a:	2301      	movs	r3, #1
 800033c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800033e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000342:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000344:	2300      	movs	r3, #0
 8000346:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000348:	2301      	movs	r3, #1
 800034a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800034c:	2302      	movs	r3, #2
 800034e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000350:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000354:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000356:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800035a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800035c:	f107 0318 	add.w	r3, r7, #24
 8000360:	4618      	mov	r0, r3
 8000362:	f000 ffbd 	bl	80012e0 <HAL_RCC_OscConfig>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800036c:	f000 f8b6 	bl	80004dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000370:	230f      	movs	r3, #15
 8000372:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000374:	2302      	movs	r3, #2
 8000376:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000378:	2300      	movs	r3, #0
 800037a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800037c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000380:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000382:	2300      	movs	r3, #0
 8000384:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	2102      	movs	r1, #2
 800038a:	4618      	mov	r0, r3
 800038c:	f001 fa28 	bl	80017e0 <HAL_RCC_ClockConfig>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000396:	f000 f8a1 	bl	80004dc <Error_Handler>
  }
}
 800039a:	bf00      	nop
 800039c:	3740      	adds	r7, #64	; 0x40
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
	...

080003a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003a8:	4b11      	ldr	r3, [pc, #68]	; (80003f0 <MX_USART1_UART_Init+0x4c>)
 80003aa:	4a12      	ldr	r2, [pc, #72]	; (80003f4 <MX_USART1_UART_Init+0x50>)
 80003ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003ae:	4b10      	ldr	r3, [pc, #64]	; (80003f0 <MX_USART1_UART_Init+0x4c>)
 80003b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003b6:	4b0e      	ldr	r3, [pc, #56]	; (80003f0 <MX_USART1_UART_Init+0x4c>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003bc:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <MX_USART1_UART_Init+0x4c>)
 80003be:	2200      	movs	r2, #0
 80003c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003c2:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <MX_USART1_UART_Init+0x4c>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003c8:	4b09      	ldr	r3, [pc, #36]	; (80003f0 <MX_USART1_UART_Init+0x4c>)
 80003ca:	220c      	movs	r2, #12
 80003cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ce:	4b08      	ldr	r3, [pc, #32]	; (80003f0 <MX_USART1_UART_Init+0x4c>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d4:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <MX_USART1_UART_Init+0x4c>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003da:	4805      	ldr	r0, [pc, #20]	; (80003f0 <MX_USART1_UART_Init+0x4c>)
 80003dc:	f001 fb9c 	bl	8001b18 <HAL_UART_Init>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003e6:	f000 f879 	bl	80004dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	20000bb4 	.word	0x20000bb4
 80003f4:	40013800 	.word	0x40013800

080003f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003fe:	4b10      	ldr	r3, [pc, #64]	; (8000440 <MX_DMA_Init+0x48>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	4a0f      	ldr	r2, [pc, #60]	; (8000440 <MX_DMA_Init+0x48>)
 8000404:	f043 0301 	orr.w	r3, r3, #1
 8000408:	6153      	str	r3, [r2, #20]
 800040a:	4b0d      	ldr	r3, [pc, #52]	; (8000440 <MX_DMA_Init+0x48>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	f003 0301 	and.w	r3, r3, #1
 8000412:	607b      	str	r3, [r7, #4]
 8000414:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000416:	2200      	movs	r2, #0
 8000418:	2100      	movs	r1, #0
 800041a:	200e      	movs	r0, #14
 800041c:	f000 fb53 	bl	8000ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000420:	200e      	movs	r0, #14
 8000422:	f000 fb6c 	bl	8000afe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000426:	2200      	movs	r2, #0
 8000428:	2100      	movs	r1, #0
 800042a:	200f      	movs	r0, #15
 800042c:	f000 fb4b 	bl	8000ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000430:	200f      	movs	r0, #15
 8000432:	f000 fb64 	bl	8000afe <HAL_NVIC_EnableIRQ>

}
 8000436:	bf00      	nop
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	40021000 	.word	0x40021000

08000444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b088      	sub	sp, #32
 8000448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044a:	f107 0310 	add.w	r3, r7, #16
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
 8000456:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000458:	4b1e      	ldr	r3, [pc, #120]	; (80004d4 <MX_GPIO_Init+0x90>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a1d      	ldr	r2, [pc, #116]	; (80004d4 <MX_GPIO_Init+0x90>)
 800045e:	f043 0310 	orr.w	r3, r3, #16
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b1b      	ldr	r3, [pc, #108]	; (80004d4 <MX_GPIO_Init+0x90>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f003 0310 	and.w	r3, r3, #16
 800046c:	60fb      	str	r3, [r7, #12]
 800046e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000470:	4b18      	ldr	r3, [pc, #96]	; (80004d4 <MX_GPIO_Init+0x90>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	4a17      	ldr	r2, [pc, #92]	; (80004d4 <MX_GPIO_Init+0x90>)
 8000476:	f043 0320 	orr.w	r3, r3, #32
 800047a:	6193      	str	r3, [r2, #24]
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <MX_GPIO_Init+0x90>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	f003 0320 	and.w	r3, r3, #32
 8000484:	60bb      	str	r3, [r7, #8]
 8000486:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000488:	4b12      	ldr	r3, [pc, #72]	; (80004d4 <MX_GPIO_Init+0x90>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	4a11      	ldr	r2, [pc, #68]	; (80004d4 <MX_GPIO_Init+0x90>)
 800048e:	f043 0304 	orr.w	r3, r3, #4
 8000492:	6193      	str	r3, [r2, #24]
 8000494:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <MX_GPIO_Init+0x90>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	f003 0304 	and.w	r3, r3, #4
 800049c:	607b      	str	r3, [r7, #4]
 800049e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80004a0:	2200      	movs	r2, #0
 80004a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004a6:	480c      	ldr	r0, [pc, #48]	; (80004d8 <MX_GPIO_Init+0x94>)
 80004a8:	f000 ff02 	bl	80012b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b2:	2301      	movs	r3, #1
 80004b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b6:	2300      	movs	r3, #0
 80004b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ba:	2302      	movs	r3, #2
 80004bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004be:	f107 0310 	add.w	r3, r7, #16
 80004c2:	4619      	mov	r1, r3
 80004c4:	4804      	ldr	r0, [pc, #16]	; (80004d8 <MX_GPIO_Init+0x94>)
 80004c6:	f000 fd99 	bl	8000ffc <HAL_GPIO_Init>

}
 80004ca:	bf00      	nop
 80004cc:	3720      	adds	r7, #32
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40021000 	.word	0x40021000
 80004d8:	40011000 	.word	0x40011000

080004dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr

080004e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ee:	4b15      	ldr	r3, [pc, #84]	; (8000544 <HAL_MspInit+0x5c>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	4a14      	ldr	r2, [pc, #80]	; (8000544 <HAL_MspInit+0x5c>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	6193      	str	r3, [r2, #24]
 80004fa:	4b12      	ldr	r3, [pc, #72]	; (8000544 <HAL_MspInit+0x5c>)
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000506:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <HAL_MspInit+0x5c>)
 8000508:	69db      	ldr	r3, [r3, #28]
 800050a:	4a0e      	ldr	r2, [pc, #56]	; (8000544 <HAL_MspInit+0x5c>)
 800050c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000510:	61d3      	str	r3, [r2, #28]
 8000512:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <HAL_MspInit+0x5c>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800051e:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <HAL_MspInit+0x60>)
 8000520:	685b      	ldr	r3, [r3, #4]
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	4a04      	ldr	r2, [pc, #16]	; (8000548 <HAL_MspInit+0x60>)
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr
 8000544:	40021000 	.word	0x40021000
 8000548:	40010000 	.word	0x40010000

0800054c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b088      	sub	sp, #32
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000554:	f107 0310 	add.w	r3, r7, #16
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a47      	ldr	r2, [pc, #284]	; (8000684 <HAL_UART_MspInit+0x138>)
 8000568:	4293      	cmp	r3, r2
 800056a:	f040 8086 	bne.w	800067a <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800056e:	4b46      	ldr	r3, [pc, #280]	; (8000688 <HAL_UART_MspInit+0x13c>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	4a45      	ldr	r2, [pc, #276]	; (8000688 <HAL_UART_MspInit+0x13c>)
 8000574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000578:	6193      	str	r3, [r2, #24]
 800057a:	4b43      	ldr	r3, [pc, #268]	; (8000688 <HAL_UART_MspInit+0x13c>)
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	4b40      	ldr	r3, [pc, #256]	; (8000688 <HAL_UART_MspInit+0x13c>)
 8000588:	699b      	ldr	r3, [r3, #24]
 800058a:	4a3f      	ldr	r2, [pc, #252]	; (8000688 <HAL_UART_MspInit+0x13c>)
 800058c:	f043 0304 	orr.w	r3, r3, #4
 8000590:	6193      	str	r3, [r2, #24]
 8000592:	4b3d      	ldr	r3, [pc, #244]	; (8000688 <HAL_UART_MspInit+0x13c>)
 8000594:	699b      	ldr	r3, [r3, #24]
 8000596:	f003 0304 	and.w	r3, r3, #4
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800059e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a4:	2302      	movs	r3, #2
 80005a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005a8:	2303      	movs	r3, #3
 80005aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	4619      	mov	r1, r3
 80005b2:	4836      	ldr	r0, [pc, #216]	; (800068c <HAL_UART_MspInit+0x140>)
 80005b4:	f000 fd22 	bl	8000ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c6:	f107 0310 	add.w	r3, r7, #16
 80005ca:	4619      	mov	r1, r3
 80005cc:	482f      	ldr	r0, [pc, #188]	; (800068c <HAL_UART_MspInit+0x140>)
 80005ce:	f000 fd15 	bl	8000ffc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80005d2:	4b2f      	ldr	r3, [pc, #188]	; (8000690 <HAL_UART_MspInit+0x144>)
 80005d4:	4a2f      	ldr	r2, [pc, #188]	; (8000694 <HAL_UART_MspInit+0x148>)
 80005d6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005d8:	4b2d      	ldr	r3, [pc, #180]	; (8000690 <HAL_UART_MspInit+0x144>)
 80005da:	2200      	movs	r2, #0
 80005dc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005de:	4b2c      	ldr	r3, [pc, #176]	; (8000690 <HAL_UART_MspInit+0x144>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80005e4:	4b2a      	ldr	r3, [pc, #168]	; (8000690 <HAL_UART_MspInit+0x144>)
 80005e6:	2280      	movs	r2, #128	; 0x80
 80005e8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005ea:	4b29      	ldr	r3, [pc, #164]	; (8000690 <HAL_UART_MspInit+0x144>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005f0:	4b27      	ldr	r3, [pc, #156]	; (8000690 <HAL_UART_MspInit+0x144>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80005f6:	4b26      	ldr	r3, [pc, #152]	; (8000690 <HAL_UART_MspInit+0x144>)
 80005f8:	2220      	movs	r2, #32
 80005fa:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80005fc:	4b24      	ldr	r3, [pc, #144]	; (8000690 <HAL_UART_MspInit+0x144>)
 80005fe:	2200      	movs	r2, #0
 8000600:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000602:	4823      	ldr	r0, [pc, #140]	; (8000690 <HAL_UART_MspInit+0x144>)
 8000604:	f000 fa96 	bl	8000b34 <HAL_DMA_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800060e:	f7ff ff65 	bl	80004dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4a1e      	ldr	r2, [pc, #120]	; (8000690 <HAL_UART_MspInit+0x144>)
 8000616:	635a      	str	r2, [r3, #52]	; 0x34
 8000618:	4a1d      	ldr	r2, [pc, #116]	; (8000690 <HAL_UART_MspInit+0x144>)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800061e:	4b1e      	ldr	r3, [pc, #120]	; (8000698 <HAL_UART_MspInit+0x14c>)
 8000620:	4a1e      	ldr	r2, [pc, #120]	; (800069c <HAL_UART_MspInit+0x150>)
 8000622:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000624:	4b1c      	ldr	r3, [pc, #112]	; (8000698 <HAL_UART_MspInit+0x14c>)
 8000626:	2210      	movs	r2, #16
 8000628:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800062a:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <HAL_UART_MspInit+0x14c>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000630:	4b19      	ldr	r3, [pc, #100]	; (8000698 <HAL_UART_MspInit+0x14c>)
 8000632:	2280      	movs	r2, #128	; 0x80
 8000634:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000636:	4b18      	ldr	r3, [pc, #96]	; (8000698 <HAL_UART_MspInit+0x14c>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800063c:	4b16      	ldr	r3, [pc, #88]	; (8000698 <HAL_UART_MspInit+0x14c>)
 800063e:	2200      	movs	r2, #0
 8000640:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <HAL_UART_MspInit+0x14c>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000648:	4b13      	ldr	r3, [pc, #76]	; (8000698 <HAL_UART_MspInit+0x14c>)
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800064e:	4812      	ldr	r0, [pc, #72]	; (8000698 <HAL_UART_MspInit+0x14c>)
 8000650:	f000 fa70 	bl	8000b34 <HAL_DMA_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800065a:	f7ff ff3f 	bl	80004dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4a0d      	ldr	r2, [pc, #52]	; (8000698 <HAL_UART_MspInit+0x14c>)
 8000662:	631a      	str	r2, [r3, #48]	; 0x30
 8000664:	4a0c      	ldr	r2, [pc, #48]	; (8000698 <HAL_UART_MspInit+0x14c>)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800066a:	2200      	movs	r2, #0
 800066c:	2100      	movs	r1, #0
 800066e:	2025      	movs	r0, #37	; 0x25
 8000670:	f000 fa29 	bl	8000ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000674:	2025      	movs	r0, #37	; 0x25
 8000676:	f000 fa42 	bl	8000afe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800067a:	bf00      	nop
 800067c:	3720      	adds	r7, #32
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40013800 	.word	0x40013800
 8000688:	40021000 	.word	0x40021000
 800068c:	40010800 	.word	0x40010800
 8000690:	20000b70 	.word	0x20000b70
 8000694:	40020058 	.word	0x40020058
 8000698:	20000938 	.word	0x20000938
 800069c:	40020044 	.word	0x40020044

080006a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr

080006ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <HardFault_Handler+0x4>

080006b2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b6:	e7fe      	b.n	80006b6 <MemManage_Handler+0x4>

080006b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006bc:	e7fe      	b.n	80006bc <BusFault_Handler+0x4>

080006be <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006c2:	e7fe      	b.n	80006c2 <UsageFault_Handler+0x4>

080006c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr

080006d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr

080006dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr

080006e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ec:	f000 f8f8 	bl	80008e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80006f8:	4802      	ldr	r0, [pc, #8]	; (8000704 <DMA1_Channel4_IRQHandler+0x10>)
 80006fa:	f000 fb4b 	bl	8000d94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000938 	.word	0x20000938

08000708 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800070c:	4802      	ldr	r0, [pc, #8]	; (8000718 <DMA1_Channel5_IRQHandler+0x10>)
 800070e:	f000 fb41 	bl	8000d94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000b70 	.word	0x20000b70

0800071c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000720:	4803      	ldr	r0, [pc, #12]	; (8000730 <USART1_IRQHandler+0x14>)
 8000722:	f001 fb33 	bl	8001d8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  buffered_serial_update_rx_buffer_data(&huart1);
 8000726:	4802      	ldr	r0, [pc, #8]	; (8000730 <USART1_IRQHandler+0x14>)
 8000728:	f002 fae0 	bl	8002cec <buffered_serial_update_rx_buffer_data>
  /* USER CODE END USART1_IRQn 1 */
}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000bb4 	.word	0x20000bb4

08000734 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800073c:	4a14      	ldr	r2, [pc, #80]	; (8000790 <_sbrk+0x5c>)
 800073e:	4b15      	ldr	r3, [pc, #84]	; (8000794 <_sbrk+0x60>)
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000748:	4b13      	ldr	r3, [pc, #76]	; (8000798 <_sbrk+0x64>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d102      	bne.n	8000756 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <_sbrk+0x64>)
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <_sbrk+0x68>)
 8000754:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <_sbrk+0x64>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4413      	add	r3, r2
 800075e:	693a      	ldr	r2, [r7, #16]
 8000760:	429a      	cmp	r2, r3
 8000762:	d207      	bcs.n	8000774 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000764:	f002 fb0c 	bl	8002d80 <__errno>
 8000768:	4602      	mov	r2, r0
 800076a:	230c      	movs	r3, #12
 800076c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800076e:	f04f 33ff 	mov.w	r3, #4294967295
 8000772:	e009      	b.n	8000788 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <_sbrk+0x64>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800077a:	4b07      	ldr	r3, [pc, #28]	; (8000798 <_sbrk+0x64>)
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4413      	add	r3, r2
 8000782:	4a05      	ldr	r2, [pc, #20]	; (8000798 <_sbrk+0x64>)
 8000784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000786:	68fb      	ldr	r3, [r7, #12]
}
 8000788:	4618      	mov	r0, r3
 800078a:	3718      	adds	r7, #24
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20005000 	.word	0x20005000
 8000794:	00000400 	.word	0x00000400
 8000798:	2000008c 	.word	0x2000008c
 800079c:	200011c8 	.word	0x200011c8

080007a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <SystemInit+0x5c>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a14      	ldr	r2, [pc, #80]	; (80007fc <SystemInit+0x5c>)
 80007aa:	f043 0301 	orr.w	r3, r3, #1
 80007ae:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <SystemInit+0x5c>)
 80007b2:	685a      	ldr	r2, [r3, #4]
 80007b4:	4911      	ldr	r1, [pc, #68]	; (80007fc <SystemInit+0x5c>)
 80007b6:	4b12      	ldr	r3, [pc, #72]	; (8000800 <SystemInit+0x60>)
 80007b8:	4013      	ands	r3, r2
 80007ba:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <SystemInit+0x5c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a0e      	ldr	r2, [pc, #56]	; (80007fc <SystemInit+0x5c>)
 80007c2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80007c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007ca:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <SystemInit+0x5c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a0a      	ldr	r2, [pc, #40]	; (80007fc <SystemInit+0x5c>)
 80007d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007d6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <SystemInit+0x5c>)
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	4a07      	ldr	r2, [pc, #28]	; (80007fc <SystemInit+0x5c>)
 80007de:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80007e2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <SystemInit+0x5c>)
 80007e6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80007ea:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80007ec:	4b05      	ldr	r3, [pc, #20]	; (8000804 <SystemInit+0x64>)
 80007ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007f2:	609a      	str	r2, [r3, #8]
#endif 
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr
 80007fc:	40021000 	.word	0x40021000
 8000800:	f8ff0000 	.word	0xf8ff0000
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000808:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800080a:	e003      	b.n	8000814 <LoopCopyDataInit>

0800080c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800080c:	4b0b      	ldr	r3, [pc, #44]	; (800083c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800080e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000810:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000812:	3104      	adds	r1, #4

08000814 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000814:	480a      	ldr	r0, [pc, #40]	; (8000840 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000818:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800081a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800081c:	d3f6      	bcc.n	800080c <CopyDataInit>
  ldr r2, =_sbss
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000820:	e002      	b.n	8000828 <LoopFillZerobss>

08000822 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000824:	f842 3b04 	str.w	r3, [r2], #4

08000828 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000828:	4b08      	ldr	r3, [pc, #32]	; (800084c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800082a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800082c:	d3f9      	bcc.n	8000822 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800082e:	f7ff ffb7 	bl	80007a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000832:	f002 faab 	bl	8002d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000836:	f7ff fc89 	bl	800014c <main>
  bx lr
 800083a:	4770      	bx	lr
  ldr r3, =_sidata
 800083c:	080039ec 	.word	0x080039ec
  ldr r0, =_sdata
 8000840:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000844:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000848:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 800084c:	200011c4 	.word	0x200011c4

08000850 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000850:	e7fe      	b.n	8000850 <ADC1_2_IRQHandler>
	...

08000854 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000858:	4b08      	ldr	r3, [pc, #32]	; (800087c <HAL_Init+0x28>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a07      	ldr	r2, [pc, #28]	; (800087c <HAL_Init+0x28>)
 800085e:	f043 0310 	orr.w	r3, r3, #16
 8000862:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000864:	2003      	movs	r0, #3
 8000866:	f000 f923 	bl	8000ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800086a:	2000      	movs	r0, #0
 800086c:	f000 f808 	bl	8000880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000870:	f7ff fe3a 	bl	80004e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000874:	2300      	movs	r3, #0
}
 8000876:	4618      	mov	r0, r3
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40022000 	.word	0x40022000

08000880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <HAL_InitTick+0x54>)
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <HAL_InitTick+0x58>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	4619      	mov	r1, r3
 8000892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000896:	fbb3 f3f1 	udiv	r3, r3, r1
 800089a:	fbb2 f3f3 	udiv	r3, r2, r3
 800089e:	4618      	mov	r0, r3
 80008a0:	f000 f93b 	bl	8000b1a <HAL_SYSTICK_Config>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008aa:	2301      	movs	r3, #1
 80008ac:	e00e      	b.n	80008cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2b0f      	cmp	r3, #15
 80008b2:	d80a      	bhi.n	80008ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b4:	2200      	movs	r2, #0
 80008b6:	6879      	ldr	r1, [r7, #4]
 80008b8:	f04f 30ff 	mov.w	r0, #4294967295
 80008bc:	f000 f903 	bl	8000ac6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008c0:	4a06      	ldr	r2, [pc, #24]	; (80008dc <HAL_InitTick+0x5c>)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008c6:	2300      	movs	r3, #0
 80008c8:	e000      	b.n	80008cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000000 	.word	0x20000000
 80008d8:	20000008 	.word	0x20000008
 80008dc:	20000004 	.word	0x20000004

080008e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <HAL_IncTick+0x1c>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b05      	ldr	r3, [pc, #20]	; (8000900 <HAL_IncTick+0x20>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4413      	add	r3, r2
 80008f0:	4a03      	ldr	r2, [pc, #12]	; (8000900 <HAL_IncTick+0x20>)
 80008f2:	6013      	str	r3, [r2, #0]
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr
 80008fc:	20000008 	.word	0x20000008
 8000900:	200011bc 	.word	0x200011bc

08000904 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  return uwTick;
 8000908:	4b02      	ldr	r3, [pc, #8]	; (8000914 <HAL_GetTick+0x10>)
 800090a:	681b      	ldr	r3, [r3, #0]
}
 800090c:	4618      	mov	r0, r3
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr
 8000914:	200011bc 	.word	0x200011bc

08000918 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	f003 0307 	and.w	r3, r3, #7
 8000926:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <__NVIC_SetPriorityGrouping+0x44>)
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800092e:	68ba      	ldr	r2, [r7, #8]
 8000930:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000934:	4013      	ands	r3, r2
 8000936:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000940:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000948:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800094a:	4a04      	ldr	r2, [pc, #16]	; (800095c <__NVIC_SetPriorityGrouping+0x44>)
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	60d3      	str	r3, [r2, #12]
}
 8000950:	bf00      	nop
 8000952:	3714      	adds	r7, #20
 8000954:	46bd      	mov	sp, r7
 8000956:	bc80      	pop	{r7}
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000964:	4b04      	ldr	r3, [pc, #16]	; (8000978 <__NVIC_GetPriorityGrouping+0x18>)
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	0a1b      	lsrs	r3, r3, #8
 800096a:	f003 0307 	and.w	r3, r3, #7
}
 800096e:	4618      	mov	r0, r3
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098a:	2b00      	cmp	r3, #0
 800098c:	db0b      	blt.n	80009a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	f003 021f 	and.w	r2, r3, #31
 8000994:	4906      	ldr	r1, [pc, #24]	; (80009b0 <__NVIC_EnableIRQ+0x34>)
 8000996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099a:	095b      	lsrs	r3, r3, #5
 800099c:	2001      	movs	r0, #1
 800099e:	fa00 f202 	lsl.w	r2, r0, r2
 80009a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr
 80009b0:	e000e100 	.word	0xe000e100

080009b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	6039      	str	r1, [r7, #0]
 80009be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	db0a      	blt.n	80009de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	490c      	ldr	r1, [pc, #48]	; (8000a00 <__NVIC_SetPriority+0x4c>)
 80009ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d2:	0112      	lsls	r2, r2, #4
 80009d4:	b2d2      	uxtb	r2, r2
 80009d6:	440b      	add	r3, r1
 80009d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009dc:	e00a      	b.n	80009f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	4908      	ldr	r1, [pc, #32]	; (8000a04 <__NVIC_SetPriority+0x50>)
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	f003 030f 	and.w	r3, r3, #15
 80009ea:	3b04      	subs	r3, #4
 80009ec:	0112      	lsls	r2, r2, #4
 80009ee:	b2d2      	uxtb	r2, r2
 80009f0:	440b      	add	r3, r1
 80009f2:	761a      	strb	r2, [r3, #24]
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bc80      	pop	{r7}
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000e100 	.word	0xe000e100
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b089      	sub	sp, #36	; 0x24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	f003 0307 	and.w	r3, r3, #7
 8000a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	f1c3 0307 	rsb	r3, r3, #7
 8000a22:	2b04      	cmp	r3, #4
 8000a24:	bf28      	it	cs
 8000a26:	2304      	movcs	r3, #4
 8000a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	3304      	adds	r3, #4
 8000a2e:	2b06      	cmp	r3, #6
 8000a30:	d902      	bls.n	8000a38 <NVIC_EncodePriority+0x30>
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	3b03      	subs	r3, #3
 8000a36:	e000      	b.n	8000a3a <NVIC_EncodePriority+0x32>
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	43da      	mvns	r2, r3
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	401a      	ands	r2, r3
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a50:	f04f 31ff 	mov.w	r1, #4294967295
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5a:	43d9      	mvns	r1, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a60:	4313      	orrs	r3, r2
         );
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3724      	adds	r7, #36	; 0x24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr

08000a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a7c:	d301      	bcc.n	8000a82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e00f      	b.n	8000aa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a82:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <SysTick_Config+0x40>)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3b01      	subs	r3, #1
 8000a88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a8a:	210f      	movs	r1, #15
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	f7ff ff90 	bl	80009b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <SysTick_Config+0x40>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a9a:	4b04      	ldr	r3, [pc, #16]	; (8000aac <SysTick_Config+0x40>)
 8000a9c:	2207      	movs	r2, #7
 8000a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	e000e010 	.word	0xe000e010

08000ab0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff ff2d 	bl	8000918 <__NVIC_SetPriorityGrouping>
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b086      	sub	sp, #24
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	4603      	mov	r3, r0
 8000ace:	60b9      	str	r1, [r7, #8]
 8000ad0:	607a      	str	r2, [r7, #4]
 8000ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ad8:	f7ff ff42 	bl	8000960 <__NVIC_GetPriorityGrouping>
 8000adc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	68b9      	ldr	r1, [r7, #8]
 8000ae2:	6978      	ldr	r0, [r7, #20]
 8000ae4:	f7ff ff90 	bl	8000a08 <NVIC_EncodePriority>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aee:	4611      	mov	r1, r2
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ff5f 	bl	80009b4 <__NVIC_SetPriority>
}
 8000af6:	bf00      	nop
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b082      	sub	sp, #8
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	4603      	mov	r3, r0
 8000b06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ff35 	bl	800097c <__NVIC_EnableIRQ>
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b082      	sub	sp, #8
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f7ff ffa2 	bl	8000a6c <SysTick_Config>
 8000b28:	4603      	mov	r3, r0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d101      	bne.n	8000b4a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e043      	b.n	8000bd2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b22      	ldr	r3, [pc, #136]	; (8000bdc <HAL_DMA_Init+0xa8>)
 8000b52:	4413      	add	r3, r2
 8000b54:	4a22      	ldr	r2, [pc, #136]	; (8000be0 <HAL_DMA_Init+0xac>)
 8000b56:	fba2 2303 	umull	r2, r3, r2, r3
 8000b5a:	091b      	lsrs	r3, r3, #4
 8000b5c:	009a      	lsls	r2, r3, #2
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a1f      	ldr	r2, [pc, #124]	; (8000be4 <HAL_DMA_Init+0xb0>)
 8000b66:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2202      	movs	r2, #2
 8000b6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000b7e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000b82:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000b8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	68db      	ldr	r3, [r3, #12]
 8000b92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	695b      	ldr	r3, [r3, #20]
 8000b9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ba4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	69db      	ldr	r3, [r3, #28]
 8000baa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000bac:	68fa      	ldr	r2, [r7, #12]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	68fa      	ldr	r2, [r7, #12]
 8000bb8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3714      	adds	r7, #20
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr
 8000bdc:	bffdfff8 	.word	0xbffdfff8
 8000be0:	cccccccd 	.word	0xcccccccd
 8000be4:	40020000 	.word	0x40020000

08000be8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
 8000bf4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d101      	bne.n	8000c08 <HAL_DMA_Start_IT+0x20>
 8000c04:	2302      	movs	r3, #2
 8000c06:	e04a      	b.n	8000c9e <HAL_DMA_Start_IT+0xb6>
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d13a      	bne.n	8000c90 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	2202      	movs	r2, #2
 8000c1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	2200      	movs	r2, #0
 8000c26:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f022 0201 	bic.w	r2, r2, #1
 8000c36:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	68b9      	ldr	r1, [r7, #8]
 8000c3e:	68f8      	ldr	r0, [r7, #12]
 8000c40:	f000 f9ae 	bl	8000fa0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d008      	beq.n	8000c5e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f042 020e 	orr.w	r2, r2, #14
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	e00f      	b.n	8000c7e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f022 0204 	bic.w	r2, r2, #4
 8000c6c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f042 020a 	orr.w	r2, r2, #10
 8000c7c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f042 0201 	orr.w	r2, r2, #1
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	e005      	b.n	8000c9c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	2200      	movs	r2, #0
 8000c94:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d005      	beq.n	8000cca <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2204      	movs	r2, #4
 8000cc2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	73fb      	strb	r3, [r7, #15]
 8000cc8:	e051      	b.n	8000d6e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f022 020e 	bic.w	r2, r2, #14
 8000cd8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f022 0201 	bic.w	r2, r2, #1
 8000ce8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a22      	ldr	r2, [pc, #136]	; (8000d78 <HAL_DMA_Abort_IT+0xd0>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d029      	beq.n	8000d48 <HAL_DMA_Abort_IT+0xa0>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a20      	ldr	r2, [pc, #128]	; (8000d7c <HAL_DMA_Abort_IT+0xd4>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d022      	beq.n	8000d44 <HAL_DMA_Abort_IT+0x9c>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a1f      	ldr	r2, [pc, #124]	; (8000d80 <HAL_DMA_Abort_IT+0xd8>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d01a      	beq.n	8000d3e <HAL_DMA_Abort_IT+0x96>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a1d      	ldr	r2, [pc, #116]	; (8000d84 <HAL_DMA_Abort_IT+0xdc>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d012      	beq.n	8000d38 <HAL_DMA_Abort_IT+0x90>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a1c      	ldr	r2, [pc, #112]	; (8000d88 <HAL_DMA_Abort_IT+0xe0>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d00a      	beq.n	8000d32 <HAL_DMA_Abort_IT+0x8a>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a1a      	ldr	r2, [pc, #104]	; (8000d8c <HAL_DMA_Abort_IT+0xe4>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d102      	bne.n	8000d2c <HAL_DMA_Abort_IT+0x84>
 8000d26:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d2a:	e00e      	b.n	8000d4a <HAL_DMA_Abort_IT+0xa2>
 8000d2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d30:	e00b      	b.n	8000d4a <HAL_DMA_Abort_IT+0xa2>
 8000d32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d36:	e008      	b.n	8000d4a <HAL_DMA_Abort_IT+0xa2>
 8000d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3c:	e005      	b.n	8000d4a <HAL_DMA_Abort_IT+0xa2>
 8000d3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d42:	e002      	b.n	8000d4a <HAL_DMA_Abort_IT+0xa2>
 8000d44:	2310      	movs	r3, #16
 8000d46:	e000      	b.n	8000d4a <HAL_DMA_Abort_IT+0xa2>
 8000d48:	2301      	movs	r3, #1
 8000d4a:	4a11      	ldr	r2, [pc, #68]	; (8000d90 <HAL_DMA_Abort_IT+0xe8>)
 8000d4c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2201      	movs	r2, #1
 8000d52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d003      	beq.n	8000d6e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	4798      	blx	r3
    } 
  }
  return status;
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40020008 	.word	0x40020008
 8000d7c:	4002001c 	.word	0x4002001c
 8000d80:	40020030 	.word	0x40020030
 8000d84:	40020044 	.word	0x40020044
 8000d88:	40020058 	.word	0x40020058
 8000d8c:	4002006c 	.word	0x4002006c
 8000d90:	40020000 	.word	0x40020000

08000d94 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db0:	2204      	movs	r2, #4
 8000db2:	409a      	lsls	r2, r3
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	4013      	ands	r3, r2
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d04f      	beq.n	8000e5c <HAL_DMA_IRQHandler+0xc8>
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	f003 0304 	and.w	r3, r3, #4
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d04a      	beq.n	8000e5c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f003 0320 	and.w	r3, r3, #32
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d107      	bne.n	8000de4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f022 0204 	bic.w	r2, r2, #4
 8000de2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a66      	ldr	r2, [pc, #408]	; (8000f84 <HAL_DMA_IRQHandler+0x1f0>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d029      	beq.n	8000e42 <HAL_DMA_IRQHandler+0xae>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a65      	ldr	r2, [pc, #404]	; (8000f88 <HAL_DMA_IRQHandler+0x1f4>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d022      	beq.n	8000e3e <HAL_DMA_IRQHandler+0xaa>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a63      	ldr	r2, [pc, #396]	; (8000f8c <HAL_DMA_IRQHandler+0x1f8>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d01a      	beq.n	8000e38 <HAL_DMA_IRQHandler+0xa4>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a62      	ldr	r2, [pc, #392]	; (8000f90 <HAL_DMA_IRQHandler+0x1fc>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d012      	beq.n	8000e32 <HAL_DMA_IRQHandler+0x9e>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a60      	ldr	r2, [pc, #384]	; (8000f94 <HAL_DMA_IRQHandler+0x200>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d00a      	beq.n	8000e2c <HAL_DMA_IRQHandler+0x98>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a5f      	ldr	r2, [pc, #380]	; (8000f98 <HAL_DMA_IRQHandler+0x204>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d102      	bne.n	8000e26 <HAL_DMA_IRQHandler+0x92>
 8000e20:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e24:	e00e      	b.n	8000e44 <HAL_DMA_IRQHandler+0xb0>
 8000e26:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000e2a:	e00b      	b.n	8000e44 <HAL_DMA_IRQHandler+0xb0>
 8000e2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000e30:	e008      	b.n	8000e44 <HAL_DMA_IRQHandler+0xb0>
 8000e32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e36:	e005      	b.n	8000e44 <HAL_DMA_IRQHandler+0xb0>
 8000e38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e3c:	e002      	b.n	8000e44 <HAL_DMA_IRQHandler+0xb0>
 8000e3e:	2340      	movs	r3, #64	; 0x40
 8000e40:	e000      	b.n	8000e44 <HAL_DMA_IRQHandler+0xb0>
 8000e42:	2304      	movs	r3, #4
 8000e44:	4a55      	ldr	r2, [pc, #340]	; (8000f9c <HAL_DMA_IRQHandler+0x208>)
 8000e46:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	f000 8094 	beq.w	8000f7a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000e5a:	e08e      	b.n	8000f7a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e60:	2202      	movs	r2, #2
 8000e62:	409a      	lsls	r2, r3
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4013      	ands	r3, r2
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d056      	beq.n	8000f1a <HAL_DMA_IRQHandler+0x186>
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d051      	beq.n	8000f1a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f003 0320 	and.w	r3, r3, #32
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d10b      	bne.n	8000e9c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f022 020a 	bic.w	r2, r2, #10
 8000e92:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2201      	movs	r2, #1
 8000e98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a38      	ldr	r2, [pc, #224]	; (8000f84 <HAL_DMA_IRQHandler+0x1f0>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d029      	beq.n	8000efa <HAL_DMA_IRQHandler+0x166>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a37      	ldr	r2, [pc, #220]	; (8000f88 <HAL_DMA_IRQHandler+0x1f4>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d022      	beq.n	8000ef6 <HAL_DMA_IRQHandler+0x162>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a35      	ldr	r2, [pc, #212]	; (8000f8c <HAL_DMA_IRQHandler+0x1f8>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d01a      	beq.n	8000ef0 <HAL_DMA_IRQHandler+0x15c>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a34      	ldr	r2, [pc, #208]	; (8000f90 <HAL_DMA_IRQHandler+0x1fc>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d012      	beq.n	8000eea <HAL_DMA_IRQHandler+0x156>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a32      	ldr	r2, [pc, #200]	; (8000f94 <HAL_DMA_IRQHandler+0x200>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d00a      	beq.n	8000ee4 <HAL_DMA_IRQHandler+0x150>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a31      	ldr	r2, [pc, #196]	; (8000f98 <HAL_DMA_IRQHandler+0x204>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d102      	bne.n	8000ede <HAL_DMA_IRQHandler+0x14a>
 8000ed8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000edc:	e00e      	b.n	8000efc <HAL_DMA_IRQHandler+0x168>
 8000ede:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ee2:	e00b      	b.n	8000efc <HAL_DMA_IRQHandler+0x168>
 8000ee4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ee8:	e008      	b.n	8000efc <HAL_DMA_IRQHandler+0x168>
 8000eea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eee:	e005      	b.n	8000efc <HAL_DMA_IRQHandler+0x168>
 8000ef0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ef4:	e002      	b.n	8000efc <HAL_DMA_IRQHandler+0x168>
 8000ef6:	2320      	movs	r3, #32
 8000ef8:	e000      	b.n	8000efc <HAL_DMA_IRQHandler+0x168>
 8000efa:	2302      	movs	r3, #2
 8000efc:	4a27      	ldr	r2, [pc, #156]	; (8000f9c <HAL_DMA_IRQHandler+0x208>)
 8000efe:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d034      	beq.n	8000f7a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000f18:	e02f      	b.n	8000f7a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	2208      	movs	r2, #8
 8000f20:	409a      	lsls	r2, r3
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	4013      	ands	r3, r2
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d028      	beq.n	8000f7c <HAL_DMA_IRQHandler+0x1e8>
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	f003 0308 	and.w	r3, r3, #8
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d023      	beq.n	8000f7c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f022 020e 	bic.w	r2, r2, #14
 8000f42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f52:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2201      	movs	r2, #1
 8000f58:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d004      	beq.n	8000f7c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	4798      	blx	r3
    }
  }
  return;
 8000f7a:	bf00      	nop
 8000f7c:	bf00      	nop
}
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40020008 	.word	0x40020008
 8000f88:	4002001c 	.word	0x4002001c
 8000f8c:	40020030 	.word	0x40020030
 8000f90:	40020044 	.word	0x40020044
 8000f94:	40020058 	.word	0x40020058
 8000f98:	4002006c 	.word	0x4002006c
 8000f9c:	40020000 	.word	0x40020000

08000fa0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
 8000fac:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fbc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	683a      	ldr	r2, [r7, #0]
 8000fc4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2b10      	cmp	r3, #16
 8000fcc:	d108      	bne.n	8000fe0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000fde:	e007      	b.n	8000ff0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	68ba      	ldr	r2, [r7, #8]
 8000fe6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	60da      	str	r2, [r3, #12]
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr
	...

08000ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b08b      	sub	sp, #44	; 0x2c
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800100a:	2300      	movs	r3, #0
 800100c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800100e:	e127      	b.n	8001260 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001010:	2201      	movs	r2, #1
 8001012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	69fa      	ldr	r2, [r7, #28]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	429a      	cmp	r2, r3
 800102a:	f040 8116 	bne.w	800125a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	2b12      	cmp	r3, #18
 8001034:	d034      	beq.n	80010a0 <HAL_GPIO_Init+0xa4>
 8001036:	2b12      	cmp	r3, #18
 8001038:	d80d      	bhi.n	8001056 <HAL_GPIO_Init+0x5a>
 800103a:	2b02      	cmp	r3, #2
 800103c:	d02b      	beq.n	8001096 <HAL_GPIO_Init+0x9a>
 800103e:	2b02      	cmp	r3, #2
 8001040:	d804      	bhi.n	800104c <HAL_GPIO_Init+0x50>
 8001042:	2b00      	cmp	r3, #0
 8001044:	d031      	beq.n	80010aa <HAL_GPIO_Init+0xae>
 8001046:	2b01      	cmp	r3, #1
 8001048:	d01c      	beq.n	8001084 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800104a:	e048      	b.n	80010de <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800104c:	2b03      	cmp	r3, #3
 800104e:	d043      	beq.n	80010d8 <HAL_GPIO_Init+0xdc>
 8001050:	2b11      	cmp	r3, #17
 8001052:	d01b      	beq.n	800108c <HAL_GPIO_Init+0x90>
          break;
 8001054:	e043      	b.n	80010de <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001056:	4a89      	ldr	r2, [pc, #548]	; (800127c <HAL_GPIO_Init+0x280>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d026      	beq.n	80010aa <HAL_GPIO_Init+0xae>
 800105c:	4a87      	ldr	r2, [pc, #540]	; (800127c <HAL_GPIO_Init+0x280>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d806      	bhi.n	8001070 <HAL_GPIO_Init+0x74>
 8001062:	4a87      	ldr	r2, [pc, #540]	; (8001280 <HAL_GPIO_Init+0x284>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d020      	beq.n	80010aa <HAL_GPIO_Init+0xae>
 8001068:	4a86      	ldr	r2, [pc, #536]	; (8001284 <HAL_GPIO_Init+0x288>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d01d      	beq.n	80010aa <HAL_GPIO_Init+0xae>
          break;
 800106e:	e036      	b.n	80010de <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001070:	4a85      	ldr	r2, [pc, #532]	; (8001288 <HAL_GPIO_Init+0x28c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d019      	beq.n	80010aa <HAL_GPIO_Init+0xae>
 8001076:	4a85      	ldr	r2, [pc, #532]	; (800128c <HAL_GPIO_Init+0x290>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d016      	beq.n	80010aa <HAL_GPIO_Init+0xae>
 800107c:	4a84      	ldr	r2, [pc, #528]	; (8001290 <HAL_GPIO_Init+0x294>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d013      	beq.n	80010aa <HAL_GPIO_Init+0xae>
          break;
 8001082:	e02c      	b.n	80010de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	623b      	str	r3, [r7, #32]
          break;
 800108a:	e028      	b.n	80010de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	3304      	adds	r3, #4
 8001092:	623b      	str	r3, [r7, #32]
          break;
 8001094:	e023      	b.n	80010de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	3308      	adds	r3, #8
 800109c:	623b      	str	r3, [r7, #32]
          break;
 800109e:	e01e      	b.n	80010de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	330c      	adds	r3, #12
 80010a6:	623b      	str	r3, [r7, #32]
          break;
 80010a8:	e019      	b.n	80010de <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d102      	bne.n	80010b8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010b2:	2304      	movs	r3, #4
 80010b4:	623b      	str	r3, [r7, #32]
          break;
 80010b6:	e012      	b.n	80010de <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d105      	bne.n	80010cc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010c0:	2308      	movs	r3, #8
 80010c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	69fa      	ldr	r2, [r7, #28]
 80010c8:	611a      	str	r2, [r3, #16]
          break;
 80010ca:	e008      	b.n	80010de <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010cc:	2308      	movs	r3, #8
 80010ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	69fa      	ldr	r2, [r7, #28]
 80010d4:	615a      	str	r2, [r3, #20]
          break;
 80010d6:	e002      	b.n	80010de <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010d8:	2300      	movs	r3, #0
 80010da:	623b      	str	r3, [r7, #32]
          break;
 80010dc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	2bff      	cmp	r3, #255	; 0xff
 80010e2:	d801      	bhi.n	80010e8 <HAL_GPIO_Init+0xec>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	e001      	b.n	80010ec <HAL_GPIO_Init+0xf0>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3304      	adds	r3, #4
 80010ec:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	2bff      	cmp	r3, #255	; 0xff
 80010f2:	d802      	bhi.n	80010fa <HAL_GPIO_Init+0xfe>
 80010f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	e002      	b.n	8001100 <HAL_GPIO_Init+0x104>
 80010fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fc:	3b08      	subs	r3, #8
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	210f      	movs	r1, #15
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	fa01 f303 	lsl.w	r3, r1, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	401a      	ands	r2, r3
 8001112:	6a39      	ldr	r1, [r7, #32]
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	431a      	orrs	r2, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001128:	2b00      	cmp	r3, #0
 800112a:	f000 8096 	beq.w	800125a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800112e:	4b59      	ldr	r3, [pc, #356]	; (8001294 <HAL_GPIO_Init+0x298>)
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	4a58      	ldr	r2, [pc, #352]	; (8001294 <HAL_GPIO_Init+0x298>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6193      	str	r3, [r2, #24]
 800113a:	4b56      	ldr	r3, [pc, #344]	; (8001294 <HAL_GPIO_Init+0x298>)
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001146:	4a54      	ldr	r2, [pc, #336]	; (8001298 <HAL_GPIO_Init+0x29c>)
 8001148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114a:	089b      	lsrs	r3, r3, #2
 800114c:	3302      	adds	r3, #2
 800114e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001152:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001156:	f003 0303 	and.w	r3, r3, #3
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	220f      	movs	r2, #15
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	4013      	ands	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a4b      	ldr	r2, [pc, #300]	; (800129c <HAL_GPIO_Init+0x2a0>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d013      	beq.n	800119a <HAL_GPIO_Init+0x19e>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a4a      	ldr	r2, [pc, #296]	; (80012a0 <HAL_GPIO_Init+0x2a4>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d00d      	beq.n	8001196 <HAL_GPIO_Init+0x19a>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a49      	ldr	r2, [pc, #292]	; (80012a4 <HAL_GPIO_Init+0x2a8>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d007      	beq.n	8001192 <HAL_GPIO_Init+0x196>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a48      	ldr	r2, [pc, #288]	; (80012a8 <HAL_GPIO_Init+0x2ac>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d101      	bne.n	800118e <HAL_GPIO_Init+0x192>
 800118a:	2303      	movs	r3, #3
 800118c:	e006      	b.n	800119c <HAL_GPIO_Init+0x1a0>
 800118e:	2304      	movs	r3, #4
 8001190:	e004      	b.n	800119c <HAL_GPIO_Init+0x1a0>
 8001192:	2302      	movs	r3, #2
 8001194:	e002      	b.n	800119c <HAL_GPIO_Init+0x1a0>
 8001196:	2301      	movs	r3, #1
 8001198:	e000      	b.n	800119c <HAL_GPIO_Init+0x1a0>
 800119a:	2300      	movs	r3, #0
 800119c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800119e:	f002 0203 	and.w	r2, r2, #3
 80011a2:	0092      	lsls	r2, r2, #2
 80011a4:	4093      	lsls	r3, r2
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011ac:	493a      	ldr	r1, [pc, #232]	; (8001298 <HAL_GPIO_Init+0x29c>)
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	089b      	lsrs	r3, r3, #2
 80011b2:	3302      	adds	r3, #2
 80011b4:	68fa      	ldr	r2, [r7, #12]
 80011b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d006      	beq.n	80011d4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011c6:	4b39      	ldr	r3, [pc, #228]	; (80012ac <HAL_GPIO_Init+0x2b0>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	4938      	ldr	r1, [pc, #224]	; (80012ac <HAL_GPIO_Init+0x2b0>)
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	600b      	str	r3, [r1, #0]
 80011d2:	e006      	b.n	80011e2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011d4:	4b35      	ldr	r3, [pc, #212]	; (80012ac <HAL_GPIO_Init+0x2b0>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	43db      	mvns	r3, r3
 80011dc:	4933      	ldr	r1, [pc, #204]	; (80012ac <HAL_GPIO_Init+0x2b0>)
 80011de:	4013      	ands	r3, r2
 80011e0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d006      	beq.n	80011fc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011ee:	4b2f      	ldr	r3, [pc, #188]	; (80012ac <HAL_GPIO_Init+0x2b0>)
 80011f0:	685a      	ldr	r2, [r3, #4]
 80011f2:	492e      	ldr	r1, [pc, #184]	; (80012ac <HAL_GPIO_Init+0x2b0>)
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	604b      	str	r3, [r1, #4]
 80011fa:	e006      	b.n	800120a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011fc:	4b2b      	ldr	r3, [pc, #172]	; (80012ac <HAL_GPIO_Init+0x2b0>)
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	43db      	mvns	r3, r3
 8001204:	4929      	ldr	r1, [pc, #164]	; (80012ac <HAL_GPIO_Init+0x2b0>)
 8001206:	4013      	ands	r3, r2
 8001208:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d006      	beq.n	8001224 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001216:	4b25      	ldr	r3, [pc, #148]	; (80012ac <HAL_GPIO_Init+0x2b0>)
 8001218:	689a      	ldr	r2, [r3, #8]
 800121a:	4924      	ldr	r1, [pc, #144]	; (80012ac <HAL_GPIO_Init+0x2b0>)
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	608b      	str	r3, [r1, #8]
 8001222:	e006      	b.n	8001232 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001224:	4b21      	ldr	r3, [pc, #132]	; (80012ac <HAL_GPIO_Init+0x2b0>)
 8001226:	689a      	ldr	r2, [r3, #8]
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	43db      	mvns	r3, r3
 800122c:	491f      	ldr	r1, [pc, #124]	; (80012ac <HAL_GPIO_Init+0x2b0>)
 800122e:	4013      	ands	r3, r2
 8001230:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d006      	beq.n	800124c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800123e:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <HAL_GPIO_Init+0x2b0>)
 8001240:	68da      	ldr	r2, [r3, #12]
 8001242:	491a      	ldr	r1, [pc, #104]	; (80012ac <HAL_GPIO_Init+0x2b0>)
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	4313      	orrs	r3, r2
 8001248:	60cb      	str	r3, [r1, #12]
 800124a:	e006      	b.n	800125a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800124c:	4b17      	ldr	r3, [pc, #92]	; (80012ac <HAL_GPIO_Init+0x2b0>)
 800124e:	68da      	ldr	r2, [r3, #12]
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	43db      	mvns	r3, r3
 8001254:	4915      	ldr	r1, [pc, #84]	; (80012ac <HAL_GPIO_Init+0x2b0>)
 8001256:	4013      	ands	r3, r2
 8001258:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800125a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125c:	3301      	adds	r3, #1
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001266:	fa22 f303 	lsr.w	r3, r2, r3
 800126a:	2b00      	cmp	r3, #0
 800126c:	f47f aed0 	bne.w	8001010 <HAL_GPIO_Init+0x14>
  }
}
 8001270:	bf00      	nop
 8001272:	372c      	adds	r7, #44	; 0x2c
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	10210000 	.word	0x10210000
 8001280:	10110000 	.word	0x10110000
 8001284:	10120000 	.word	0x10120000
 8001288:	10310000 	.word	0x10310000
 800128c:	10320000 	.word	0x10320000
 8001290:	10220000 	.word	0x10220000
 8001294:	40021000 	.word	0x40021000
 8001298:	40010000 	.word	0x40010000
 800129c:	40010800 	.word	0x40010800
 80012a0:	40010c00 	.word	0x40010c00
 80012a4:	40011000 	.word	0x40011000
 80012a8:	40011400 	.word	0x40011400
 80012ac:	40010400 	.word	0x40010400

080012b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	807b      	strh	r3, [r7, #2]
 80012bc:	4613      	mov	r3, r2
 80012be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012c0:	787b      	ldrb	r3, [r7, #1]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012c6:	887a      	ldrh	r2, [r7, #2]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012cc:	e003      	b.n	80012d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012ce:	887b      	ldrh	r3, [r7, #2]
 80012d0:	041a      	lsls	r2, r3, #16
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	611a      	str	r2, [r3, #16]
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr

080012e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e26c      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f000 8087 	beq.w	800140e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001300:	4b92      	ldr	r3, [pc, #584]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 030c 	and.w	r3, r3, #12
 8001308:	2b04      	cmp	r3, #4
 800130a:	d00c      	beq.n	8001326 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800130c:	4b8f      	ldr	r3, [pc, #572]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 030c 	and.w	r3, r3, #12
 8001314:	2b08      	cmp	r3, #8
 8001316:	d112      	bne.n	800133e <HAL_RCC_OscConfig+0x5e>
 8001318:	4b8c      	ldr	r3, [pc, #560]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001324:	d10b      	bne.n	800133e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001326:	4b89      	ldr	r3, [pc, #548]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d06c      	beq.n	800140c <HAL_RCC_OscConfig+0x12c>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d168      	bne.n	800140c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e246      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001346:	d106      	bne.n	8001356 <HAL_RCC_OscConfig+0x76>
 8001348:	4b80      	ldr	r3, [pc, #512]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a7f      	ldr	r2, [pc, #508]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800134e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001352:	6013      	str	r3, [r2, #0]
 8001354:	e02e      	b.n	80013b4 <HAL_RCC_OscConfig+0xd4>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10c      	bne.n	8001378 <HAL_RCC_OscConfig+0x98>
 800135e:	4b7b      	ldr	r3, [pc, #492]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a7a      	ldr	r2, [pc, #488]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	4b78      	ldr	r3, [pc, #480]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a77      	ldr	r2, [pc, #476]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001370:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	e01d      	b.n	80013b4 <HAL_RCC_OscConfig+0xd4>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001380:	d10c      	bne.n	800139c <HAL_RCC_OscConfig+0xbc>
 8001382:	4b72      	ldr	r3, [pc, #456]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a71      	ldr	r2, [pc, #452]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001388:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	4b6f      	ldr	r3, [pc, #444]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a6e      	ldr	r2, [pc, #440]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	e00b      	b.n	80013b4 <HAL_RCC_OscConfig+0xd4>
 800139c:	4b6b      	ldr	r3, [pc, #428]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a6a      	ldr	r2, [pc, #424]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80013a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	4b68      	ldr	r3, [pc, #416]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a67      	ldr	r2, [pc, #412]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80013ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d013      	beq.n	80013e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013bc:	f7ff faa2 	bl	8000904 <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c4:	f7ff fa9e 	bl	8000904 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b64      	cmp	r3, #100	; 0x64
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e1fa      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d6:	4b5d      	ldr	r3, [pc, #372]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0f0      	beq.n	80013c4 <HAL_RCC_OscConfig+0xe4>
 80013e2:	e014      	b.n	800140e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e4:	f7ff fa8e 	bl	8000904 <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013ec:	f7ff fa8a 	bl	8000904 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b64      	cmp	r3, #100	; 0x64
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e1e6      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013fe:	4b53      	ldr	r3, [pc, #332]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f0      	bne.n	80013ec <HAL_RCC_OscConfig+0x10c>
 800140a:	e000      	b.n	800140e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800140c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d063      	beq.n	80014e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800141a:	4b4c      	ldr	r3, [pc, #304]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f003 030c 	and.w	r3, r3, #12
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00b      	beq.n	800143e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001426:	4b49      	ldr	r3, [pc, #292]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f003 030c 	and.w	r3, r3, #12
 800142e:	2b08      	cmp	r3, #8
 8001430:	d11c      	bne.n	800146c <HAL_RCC_OscConfig+0x18c>
 8001432:	4b46      	ldr	r3, [pc, #280]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d116      	bne.n	800146c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800143e:	4b43      	ldr	r3, [pc, #268]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d005      	beq.n	8001456 <HAL_RCC_OscConfig+0x176>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d001      	beq.n	8001456 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e1ba      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001456:	4b3d      	ldr	r3, [pc, #244]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	4939      	ldr	r1, [pc, #228]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001466:	4313      	orrs	r3, r2
 8001468:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800146a:	e03a      	b.n	80014e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d020      	beq.n	80014b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001474:	4b36      	ldr	r3, [pc, #216]	; (8001550 <HAL_RCC_OscConfig+0x270>)
 8001476:	2201      	movs	r2, #1
 8001478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147a:	f7ff fa43 	bl	8000904 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001482:	f7ff fa3f 	bl	8000904 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e19b      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001494:	4b2d      	ldr	r3, [pc, #180]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0f0      	beq.n	8001482 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a0:	4b2a      	ldr	r3, [pc, #168]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	4927      	ldr	r1, [pc, #156]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80014b0:	4313      	orrs	r3, r2
 80014b2:	600b      	str	r3, [r1, #0]
 80014b4:	e015      	b.n	80014e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014b6:	4b26      	ldr	r3, [pc, #152]	; (8001550 <HAL_RCC_OscConfig+0x270>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014bc:	f7ff fa22 	bl	8000904 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c4:	f7ff fa1e 	bl	8000904 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e17a      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d6:	4b1d      	ldr	r3, [pc, #116]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f0      	bne.n	80014c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d03a      	beq.n	8001564 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d019      	beq.n	800152a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014f6:	4b17      	ldr	r3, [pc, #92]	; (8001554 <HAL_RCC_OscConfig+0x274>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fc:	f7ff fa02 	bl	8000904 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001504:	f7ff f9fe 	bl	8000904 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e15a      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001516:	4b0d      	ldr	r3, [pc, #52]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0f0      	beq.n	8001504 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001522:	2001      	movs	r0, #1
 8001524:	f000 fada 	bl	8001adc <RCC_Delay>
 8001528:	e01c      	b.n	8001564 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_RCC_OscConfig+0x274>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001530:	f7ff f9e8 	bl	8000904 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001536:	e00f      	b.n	8001558 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001538:	f7ff f9e4 	bl	8000904 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d908      	bls.n	8001558 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e140      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
 800154a:	bf00      	nop
 800154c:	40021000 	.word	0x40021000
 8001550:	42420000 	.word	0x42420000
 8001554:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001558:	4b9e      	ldr	r3, [pc, #632]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 800155a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1e9      	bne.n	8001538 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 80a6 	beq.w	80016be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001572:	2300      	movs	r3, #0
 8001574:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001576:	4b97      	ldr	r3, [pc, #604]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10d      	bne.n	800159e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001582:	4b94      	ldr	r3, [pc, #592]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	4a93      	ldr	r2, [pc, #588]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800158c:	61d3      	str	r3, [r2, #28]
 800158e:	4b91      	ldr	r3, [pc, #580]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800159a:	2301      	movs	r3, #1
 800159c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800159e:	4b8e      	ldr	r3, [pc, #568]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d118      	bne.n	80015dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015aa:	4b8b      	ldr	r3, [pc, #556]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a8a      	ldr	r2, [pc, #552]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 80015b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015b6:	f7ff f9a5 	bl	8000904 <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015be:	f7ff f9a1 	bl	8000904 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b64      	cmp	r3, #100	; 0x64
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e0fd      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d0:	4b81      	ldr	r3, [pc, #516]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0f0      	beq.n	80015be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d106      	bne.n	80015f2 <HAL_RCC_OscConfig+0x312>
 80015e4:	4b7b      	ldr	r3, [pc, #492]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	4a7a      	ldr	r2, [pc, #488]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	6213      	str	r3, [r2, #32]
 80015f0:	e02d      	b.n	800164e <HAL_RCC_OscConfig+0x36e>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10c      	bne.n	8001614 <HAL_RCC_OscConfig+0x334>
 80015fa:	4b76      	ldr	r3, [pc, #472]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	4a75      	ldr	r2, [pc, #468]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001600:	f023 0301 	bic.w	r3, r3, #1
 8001604:	6213      	str	r3, [r2, #32]
 8001606:	4b73      	ldr	r3, [pc, #460]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	4a72      	ldr	r2, [pc, #456]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 800160c:	f023 0304 	bic.w	r3, r3, #4
 8001610:	6213      	str	r3, [r2, #32]
 8001612:	e01c      	b.n	800164e <HAL_RCC_OscConfig+0x36e>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	2b05      	cmp	r3, #5
 800161a:	d10c      	bne.n	8001636 <HAL_RCC_OscConfig+0x356>
 800161c:	4b6d      	ldr	r3, [pc, #436]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	4a6c      	ldr	r2, [pc, #432]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001622:	f043 0304 	orr.w	r3, r3, #4
 8001626:	6213      	str	r3, [r2, #32]
 8001628:	4b6a      	ldr	r3, [pc, #424]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	4a69      	ldr	r2, [pc, #420]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	6213      	str	r3, [r2, #32]
 8001634:	e00b      	b.n	800164e <HAL_RCC_OscConfig+0x36e>
 8001636:	4b67      	ldr	r3, [pc, #412]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001638:	6a1b      	ldr	r3, [r3, #32]
 800163a:	4a66      	ldr	r2, [pc, #408]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 800163c:	f023 0301 	bic.w	r3, r3, #1
 8001640:	6213      	str	r3, [r2, #32]
 8001642:	4b64      	ldr	r3, [pc, #400]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	4a63      	ldr	r2, [pc, #396]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001648:	f023 0304 	bic.w	r3, r3, #4
 800164c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d015      	beq.n	8001682 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001656:	f7ff f955 	bl	8000904 <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800165c:	e00a      	b.n	8001674 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800165e:	f7ff f951 	bl	8000904 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	f241 3288 	movw	r2, #5000	; 0x1388
 800166c:	4293      	cmp	r3, r2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e0ab      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001674:	4b57      	ldr	r3, [pc, #348]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0ee      	beq.n	800165e <HAL_RCC_OscConfig+0x37e>
 8001680:	e014      	b.n	80016ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001682:	f7ff f93f 	bl	8000904 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001688:	e00a      	b.n	80016a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800168a:	f7ff f93b 	bl	8000904 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	f241 3288 	movw	r2, #5000	; 0x1388
 8001698:	4293      	cmp	r3, r2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e095      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a0:	4b4c      	ldr	r3, [pc, #304]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1ee      	bne.n	800168a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016ac:	7dfb      	ldrb	r3, [r7, #23]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d105      	bne.n	80016be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016b2:	4b48      	ldr	r3, [pc, #288]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	4a47      	ldr	r2, [pc, #284]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 80016b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 8081 	beq.w	80017ca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016c8:	4b42      	ldr	r3, [pc, #264]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 030c 	and.w	r3, r3, #12
 80016d0:	2b08      	cmp	r3, #8
 80016d2:	d061      	beq.n	8001798 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69db      	ldr	r3, [r3, #28]
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d146      	bne.n	800176a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016dc:	4b3f      	ldr	r3, [pc, #252]	; (80017dc <HAL_RCC_OscConfig+0x4fc>)
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e2:	f7ff f90f 	bl	8000904 <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ea:	f7ff f90b 	bl	8000904 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e067      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016fc:	4b35      	ldr	r3, [pc, #212]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1f0      	bne.n	80016ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001710:	d108      	bne.n	8001724 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001712:	4b30      	ldr	r3, [pc, #192]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	492d      	ldr	r1, [pc, #180]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001720:	4313      	orrs	r3, r2
 8001722:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001724:	4b2b      	ldr	r3, [pc, #172]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a19      	ldr	r1, [r3, #32]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001734:	430b      	orrs	r3, r1
 8001736:	4927      	ldr	r1, [pc, #156]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001738:	4313      	orrs	r3, r2
 800173a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800173c:	4b27      	ldr	r3, [pc, #156]	; (80017dc <HAL_RCC_OscConfig+0x4fc>)
 800173e:	2201      	movs	r2, #1
 8001740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001742:	f7ff f8df 	bl	8000904 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800174a:	f7ff f8db 	bl	8000904 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e037      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800175c:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0f0      	beq.n	800174a <HAL_RCC_OscConfig+0x46a>
 8001768:	e02f      	b.n	80017ca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800176a:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <HAL_RCC_OscConfig+0x4fc>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001770:	f7ff f8c8 	bl	8000904 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001778:	f7ff f8c4 	bl	8000904 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e020      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800178a:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0x498>
 8001796:	e018      	b.n	80017ca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69db      	ldr	r3, [r3, #28]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d101      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e013      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017a4:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d106      	bne.n	80017c6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d001      	beq.n	80017ca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e000      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40007000 	.word	0x40007000
 80017dc:	42420060 	.word	0x42420060

080017e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e0d0      	b.n	8001996 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017f4:	4b6a      	ldr	r3, [pc, #424]	; (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d910      	bls.n	8001824 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001802:	4b67      	ldr	r3, [pc, #412]	; (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f023 0207 	bic.w	r2, r3, #7
 800180a:	4965      	ldr	r1, [pc, #404]	; (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	4313      	orrs	r3, r2
 8001810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001812:	4b63      	ldr	r3, [pc, #396]	; (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d001      	beq.n	8001824 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e0b8      	b.n	8001996 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d020      	beq.n	8001872 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b00      	cmp	r3, #0
 800183a:	d005      	beq.n	8001848 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800183c:	4b59      	ldr	r3, [pc, #356]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	4a58      	ldr	r2, [pc, #352]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001842:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001846:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0308 	and.w	r3, r3, #8
 8001850:	2b00      	cmp	r3, #0
 8001852:	d005      	beq.n	8001860 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001854:	4b53      	ldr	r3, [pc, #332]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	4a52      	ldr	r2, [pc, #328]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 800185a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800185e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001860:	4b50      	ldr	r3, [pc, #320]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	494d      	ldr	r1, [pc, #308]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 800186e:	4313      	orrs	r3, r2
 8001870:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b00      	cmp	r3, #0
 800187c:	d040      	beq.n	8001900 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d107      	bne.n	8001896 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001886:	4b47      	ldr	r3, [pc, #284]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d115      	bne.n	80018be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e07f      	b.n	8001996 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b02      	cmp	r3, #2
 800189c:	d107      	bne.n	80018ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800189e:	4b41      	ldr	r3, [pc, #260]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d109      	bne.n	80018be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e073      	b.n	8001996 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ae:	4b3d      	ldr	r3, [pc, #244]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e06b      	b.n	8001996 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018be:	4b39      	ldr	r3, [pc, #228]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f023 0203 	bic.w	r2, r3, #3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	4936      	ldr	r1, [pc, #216]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018d0:	f7ff f818 	bl	8000904 <HAL_GetTick>
 80018d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d6:	e00a      	b.n	80018ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d8:	f7ff f814 	bl	8000904 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e053      	b.n	8001996 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ee:	4b2d      	ldr	r3, [pc, #180]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 020c 	and.w	r2, r3, #12
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d1eb      	bne.n	80018d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001900:	4b27      	ldr	r3, [pc, #156]	; (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	d210      	bcs.n	8001930 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190e:	4b24      	ldr	r3, [pc, #144]	; (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f023 0207 	bic.w	r2, r3, #7
 8001916:	4922      	ldr	r1, [pc, #136]	; (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	4313      	orrs	r3, r2
 800191c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800191e:	4b20      	ldr	r3, [pc, #128]	; (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	429a      	cmp	r2, r3
 800192a:	d001      	beq.n	8001930 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e032      	b.n	8001996 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	d008      	beq.n	800194e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800193c:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	4916      	ldr	r1, [pc, #88]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 800194a:	4313      	orrs	r3, r2
 800194c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	2b00      	cmp	r3, #0
 8001958:	d009      	beq.n	800196e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800195a:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	490e      	ldr	r1, [pc, #56]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 800196a:	4313      	orrs	r3, r2
 800196c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800196e:	f000 f821 	bl	80019b4 <HAL_RCC_GetSysClockFreq>
 8001972:	4601      	mov	r1, r0
 8001974:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	091b      	lsrs	r3, r3, #4
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001980:	5cd3      	ldrb	r3, [r2, r3]
 8001982:	fa21 f303 	lsr.w	r3, r1, r3
 8001986:	4a09      	ldr	r2, [pc, #36]	; (80019ac <HAL_RCC_ClockConfig+0x1cc>)
 8001988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800198a:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <HAL_RCC_ClockConfig+0x1d0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7fe ff76 	bl	8000880 <HAL_InitTick>

  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40022000 	.word	0x40022000
 80019a4:	40021000 	.word	0x40021000
 80019a8:	08003998 	.word	0x08003998
 80019ac:	20000000 	.word	0x20000000
 80019b0:	20000004 	.word	0x20000004

080019b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019b4:	b490      	push	{r4, r7}
 80019b6:	b08a      	sub	sp, #40	; 0x28
 80019b8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019ba:	4b2a      	ldr	r3, [pc, #168]	; (8001a64 <HAL_RCC_GetSysClockFreq+0xb0>)
 80019bc:	1d3c      	adds	r4, r7, #4
 80019be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019c4:	4b28      	ldr	r3, [pc, #160]	; (8001a68 <HAL_RCC_GetSysClockFreq+0xb4>)
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
 80019ce:	2300      	movs	r3, #0
 80019d0:	61bb      	str	r3, [r7, #24]
 80019d2:	2300      	movs	r3, #0
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80019da:	2300      	movs	r3, #0
 80019dc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019de:	4b23      	ldr	r3, [pc, #140]	; (8001a6c <HAL_RCC_GetSysClockFreq+0xb8>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f003 030c 	and.w	r3, r3, #12
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	d002      	beq.n	80019f4 <HAL_RCC_GetSysClockFreq+0x40>
 80019ee:	2b08      	cmp	r3, #8
 80019f0:	d003      	beq.n	80019fa <HAL_RCC_GetSysClockFreq+0x46>
 80019f2:	e02d      	b.n	8001a50 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019f4:	4b1e      	ldr	r3, [pc, #120]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019f6:	623b      	str	r3, [r7, #32]
      break;
 80019f8:	e02d      	b.n	8001a56 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	0c9b      	lsrs	r3, r3, #18
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a06:	4413      	add	r3, r2
 8001a08:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a0c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d013      	beq.n	8001a40 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a18:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	0c5b      	lsrs	r3, r3, #17
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a26:	4413      	add	r3, r2
 8001a28:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a2c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	4a0f      	ldr	r2, [pc, #60]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a32:	fb02 f203 	mul.w	r2, r2, r3
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3e:	e004      	b.n	8001a4a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	4a0c      	ldr	r2, [pc, #48]	; (8001a74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a44:	fb02 f303 	mul.w	r3, r2, r3
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	623b      	str	r3, [r7, #32]
      break;
 8001a4e:	e002      	b.n	8001a56 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a50:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a52:	623b      	str	r3, [r7, #32]
      break;
 8001a54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a56:	6a3b      	ldr	r3, [r7, #32]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3728      	adds	r7, #40	; 0x28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc90      	pop	{r4, r7}
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	08003984 	.word	0x08003984
 8001a68:	08003994 	.word	0x08003994
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	007a1200 	.word	0x007a1200
 8001a74:	003d0900 	.word	0x003d0900

08001a78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a7c:	4b02      	ldr	r3, [pc, #8]	; (8001a88 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr
 8001a88:	20000000 	.word	0x20000000

08001a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a90:	f7ff fff2 	bl	8001a78 <HAL_RCC_GetHCLKFreq>
 8001a94:	4601      	mov	r1, r0
 8001a96:	4b05      	ldr	r3, [pc, #20]	; (8001aac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	0a1b      	lsrs	r3, r3, #8
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	4a03      	ldr	r2, [pc, #12]	; (8001ab0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aa2:	5cd3      	ldrb	r3, [r2, r3]
 8001aa4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	080039a8 	.word	0x080039a8

08001ab4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ab8:	f7ff ffde 	bl	8001a78 <HAL_RCC_GetHCLKFreq>
 8001abc:	4601      	mov	r1, r0
 8001abe:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	0adb      	lsrs	r3, r3, #11
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	4a03      	ldr	r2, [pc, #12]	; (8001ad8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aca:	5cd3      	ldrb	r3, [r2, r3]
 8001acc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	080039a8 	.word	0x080039a8

08001adc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ae4:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <RCC_Delay+0x34>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <RCC_Delay+0x38>)
 8001aea:	fba2 2303 	umull	r2, r3, r2, r3
 8001aee:	0a5b      	lsrs	r3, r3, #9
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	fb02 f303 	mul.w	r3, r2, r3
 8001af6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001af8:	bf00      	nop
  }
  while (Delay --);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	1e5a      	subs	r2, r3, #1
 8001afe:	60fa      	str	r2, [r7, #12]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1f9      	bne.n	8001af8 <RCC_Delay+0x1c>
}
 8001b04:	bf00      	nop
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	20000000 	.word	0x20000000
 8001b14:	10624dd3 	.word	0x10624dd3

08001b18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e03f      	b.n	8001baa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d106      	bne.n	8001b44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7fe fd04 	bl	800054c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2224      	movs	r2, #36	; 0x24
 8001b48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68da      	ldr	r2, [r3, #12]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 fc35 	bl	80023cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	691a      	ldr	r2, [r3, #16]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	695a      	ldr	r2, [r3, #20]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68da      	ldr	r2, [r3, #12]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2220      	movs	r2, #32
 8001b9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2220      	movs	r2, #32
 8001ba4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b20      	cmp	r3, #32
 8001bcc:	d153      	bne.n	8001c76 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d002      	beq.n	8001bda <HAL_UART_Transmit_DMA+0x26>
 8001bd4:	88fb      	ldrh	r3, [r7, #6]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e04c      	b.n	8001c78 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d101      	bne.n	8001bec <HAL_UART_Transmit_DMA+0x38>
 8001be8:	2302      	movs	r3, #2
 8001bea:	e045      	b.n	8001c78 <HAL_UART_Transmit_DMA+0xc4>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8001bf4:	68ba      	ldr	r2, [r7, #8]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	88fa      	ldrh	r2, [r7, #6]
 8001bfe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	88fa      	ldrh	r2, [r7, #6]
 8001c04:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2221      	movs	r2, #33	; 0x21
 8001c10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c18:	4a19      	ldr	r2, [pc, #100]	; (8001c80 <HAL_UART_Transmit_DMA+0xcc>)
 8001c1a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c20:	4a18      	ldr	r2, [pc, #96]	; (8001c84 <HAL_UART_Transmit_DMA+0xd0>)
 8001c22:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c28:	4a17      	ldr	r2, [pc, #92]	; (8001c88 <HAL_UART_Transmit_DMA+0xd4>)
 8001c2a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c30:	2200      	movs	r2, #0
 8001c32:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8001c34:	f107 0308 	add.w	r3, r7, #8
 8001c38:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	6819      	ldr	r1, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	3304      	adds	r3, #4
 8001c48:	461a      	mov	r2, r3
 8001c4a:	88fb      	ldrh	r3, [r7, #6]
 8001c4c:	f7fe ffcc 	bl	8000be8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c58:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	695a      	ldr	r2, [r3, #20]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c70:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8001c72:	2300      	movs	r3, #0
 8001c74:	e000      	b.n	8001c78 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8001c76:	2302      	movs	r3, #2
  }
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3718      	adds	r7, #24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	08001fdf 	.word	0x08001fdf
 8001c84:	08002031 	.word	0x08002031
 8001c88:	080020d1 	.word	0x080020d1

08001c8c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	4613      	mov	r3, r2
 8001c98:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b20      	cmp	r3, #32
 8001ca4:	d166      	bne.n	8001d74 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d002      	beq.n	8001cb2 <HAL_UART_Receive_DMA+0x26>
 8001cac:	88fb      	ldrh	r3, [r7, #6]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e05f      	b.n	8001d76 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d101      	bne.n	8001cc4 <HAL_UART_Receive_DMA+0x38>
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	e058      	b.n	8001d76 <HAL_UART_Receive_DMA+0xea>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	88fa      	ldrh	r2, [r7, #6]
 8001cd6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2222      	movs	r2, #34	; 0x22
 8001ce2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cea:	4a25      	ldr	r2, [pc, #148]	; (8001d80 <HAL_UART_Receive_DMA+0xf4>)
 8001cec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf2:	4a24      	ldr	r2, [pc, #144]	; (8001d84 <HAL_UART_Receive_DMA+0xf8>)
 8001cf4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cfa:	4a23      	ldr	r2, [pc, #140]	; (8001d88 <HAL_UART_Receive_DMA+0xfc>)
 8001cfc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d02:	2200      	movs	r2, #0
 8001d04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8001d06:	f107 0308 	add.w	r3, r7, #8
 8001d0a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	3304      	adds	r3, #4
 8001d16:	4619      	mov	r1, r3
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	88fb      	ldrh	r3, [r7, #6]
 8001d1e:	f7fe ff63 	bl	8000be8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8001d22:	2300      	movs	r3, #0
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68da      	ldr	r2, [r3, #12]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d4e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	695a      	ldr	r2, [r3, #20]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0201 	orr.w	r2, r2, #1
 8001d5e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	695a      	ldr	r2, [r3, #20]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d6e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8001d70:	2300      	movs	r3, #0
 8001d72:	e000      	b.n	8001d76 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8001d74:	2302      	movs	r3, #2
  }
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	0800204d 	.word	0x0800204d
 8001d84:	080020b5 	.word	0x080020b5
 8001d88:	080020d1 	.word	0x080020d1

08001d8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10d      	bne.n	8001dde <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	f003 0320 	and.w	r3, r3, #32
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d008      	beq.n	8001dde <HAL_UART_IRQHandler+0x52>
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	f003 0320 	and.w	r3, r3, #32
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 fa77 	bl	80022ca <UART_Receive_IT>
      return;
 8001ddc:	e0cc      	b.n	8001f78 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 80ab 	beq.w	8001f3c <HAL_UART_IRQHandler+0x1b0>
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d105      	bne.n	8001dfc <HAL_UART_IRQHandler+0x70>
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 80a0 	beq.w	8001f3c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00a      	beq.n	8001e1c <HAL_UART_IRQHandler+0x90>
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d005      	beq.n	8001e1c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e14:	f043 0201 	orr.w	r2, r3, #1
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00a      	beq.n	8001e3c <HAL_UART_IRQHandler+0xb0>
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d005      	beq.n	8001e3c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e34:	f043 0202 	orr.w	r2, r3, #2
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00a      	beq.n	8001e5c <HAL_UART_IRQHandler+0xd0>
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d005      	beq.n	8001e5c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e54:	f043 0204 	orr.w	r2, r3, #4
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00a      	beq.n	8001e7c <HAL_UART_IRQHandler+0xf0>
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d005      	beq.n	8001e7c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e74:	f043 0208 	orr.w	r2, r3, #8
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d078      	beq.n	8001f76 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	f003 0320 	and.w	r3, r3, #32
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d007      	beq.n	8001e9e <HAL_UART_IRQHandler+0x112>
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	f003 0320 	and.w	r3, r3, #32
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d002      	beq.n	8001e9e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 fa16 	bl	80022ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	bf14      	ite	ne
 8001eac:	2301      	movne	r3, #1
 8001eae:	2300      	moveq	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb8:	f003 0308 	and.w	r3, r3, #8
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d102      	bne.n	8001ec6 <HAL_UART_IRQHandler+0x13a>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d031      	beq.n	8001f2a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f961 	bl	800218e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d023      	beq.n	8001f22 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	695a      	ldr	r2, [r3, #20]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ee8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d013      	beq.n	8001f1a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef6:	4a22      	ldr	r2, [pc, #136]	; (8001f80 <HAL_UART_IRQHandler+0x1f4>)
 8001ef8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe fed2 	bl	8000ca8 <HAL_DMA_Abort_IT>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d016      	beq.n	8001f38 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f14:	4610      	mov	r0, r2
 8001f16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f18:	e00e      	b.n	8001f38 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f856 	bl	8001fcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f20:	e00a      	b.n	8001f38 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f852 	bl	8001fcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f28:	e006      	b.n	8001f38 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f84e 	bl	8001fcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001f36:	e01e      	b.n	8001f76 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f38:	bf00      	nop
    return;
 8001f3a:	e01c      	b.n	8001f76 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d008      	beq.n	8001f58 <HAL_UART_IRQHandler+0x1cc>
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d003      	beq.n	8001f58 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f94d 	bl	80021f0 <UART_Transmit_IT>
    return;
 8001f56:	e00f      	b.n	8001f78 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00a      	beq.n	8001f78 <HAL_UART_IRQHandler+0x1ec>
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f994 	bl	800229a <UART_EndTransmit_IT>
    return;
 8001f72:	bf00      	nop
 8001f74:	e000      	b.n	8001f78 <HAL_UART_IRQHandler+0x1ec>
    return;
 8001f76:	bf00      	nop
  }
}
 8001f78:	3720      	adds	r7, #32
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	080021c9 	.word	0x080021c9

08001f84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr

08001f96 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bc80      	pop	{r7}
 8001fb8:	4770      	bx	lr

08001fba <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr

08001fcc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr

08001fde <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b084      	sub	sp, #16
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fea:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0320 	and.w	r3, r3, #32
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d113      	bne.n	8002022 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	695a      	ldr	r2, [r3, #20]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800200e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68da      	ldr	r2, [r3, #12]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800201e:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002020:	e002      	b.n	8002028 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f7ff ffae 	bl	8001f84 <HAL_UART_TxCpltCallback>
}
 8002028:	bf00      	nop
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f7ff ffa9 	bl	8001f96 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002044:	bf00      	nop
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0320 	and.w	r3, r3, #32
 8002064:	2b00      	cmp	r3, #0
 8002066:	d11e      	bne.n	80020a6 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800207c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	695a      	ldr	r2, [r3, #20]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 0201 	bic.w	r2, r2, #1
 800208c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	695a      	ldr	r2, [r3, #20]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800209c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2220      	movs	r2, #32
 80020a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f7ff ff7e 	bl	8001fa8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80020ac:	bf00      	nop
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f7ff ff79 	bl	8001fba <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80020c8:	bf00      	nop
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80020d8:	2300      	movs	r3, #0
 80020da:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	695b      	ldr	r3, [r3, #20]
 80020e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	bf14      	ite	ne
 80020f0:	2301      	movne	r3, #1
 80020f2:	2300      	moveq	r3, #0
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b21      	cmp	r3, #33	; 0x21
 8002102:	d108      	bne.n	8002116 <UART_DMAError+0x46>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d005      	beq.n	8002116 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	2200      	movs	r2, #0
 800210e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002110:	68b8      	ldr	r0, [r7, #8]
 8002112:	f000 f827 	bl	8002164 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002120:	2b00      	cmp	r3, #0
 8002122:	bf14      	ite	ne
 8002124:	2301      	movne	r3, #1
 8002126:	2300      	moveq	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b22      	cmp	r3, #34	; 0x22
 8002136:	d108      	bne.n	800214a <UART_DMAError+0x7a>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d005      	beq.n	800214a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	2200      	movs	r2, #0
 8002142:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002144:	68b8      	ldr	r0, [r7, #8]
 8002146:	f000 f822 	bl	800218e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214e:	f043 0210 	orr.w	r2, r3, #16
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002156:	68b8      	ldr	r0, [r7, #8]
 8002158:	f7ff ff38 	bl	8001fcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800215c:	bf00      	nop
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800217a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2220      	movs	r2, #32
 8002180:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr

0800218e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68da      	ldr	r2, [r3, #12]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80021a4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	695a      	ldr	r2, [r3, #20]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0201 	bic.w	r2, r2, #1
 80021b4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2220      	movs	r2, #32
 80021ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr

080021c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f7ff fef2 	bl	8001fcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80021e8:	bf00      	nop
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b21      	cmp	r3, #33	; 0x21
 8002202:	d144      	bne.n	800228e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800220c:	d11a      	bne.n	8002244 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	461a      	mov	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002222:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d105      	bne.n	8002238 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	1c9a      	adds	r2, r3, #2
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	621a      	str	r2, [r3, #32]
 8002236:	e00e      	b.n	8002256 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	1c5a      	adds	r2, r3, #1
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	621a      	str	r2, [r3, #32]
 8002242:	e008      	b.n	8002256 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	1c59      	adds	r1, r3, #1
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6211      	str	r1, [r2, #32]
 800224e:	781a      	ldrb	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800225a:	b29b      	uxth	r3, r3
 800225c:	3b01      	subs	r3, #1
 800225e:	b29b      	uxth	r3, r3
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	4619      	mov	r1, r3
 8002264:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10f      	bne.n	800228a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002278:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68da      	ldr	r2, [r3, #12]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002288:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800228a:	2300      	movs	r3, #0
 800228c:	e000      	b.n	8002290 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800228e:	2302      	movs	r3, #2
  }
}
 8002290:	4618      	mov	r0, r3
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr

0800229a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2220      	movs	r2, #32
 80022b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7ff fe62 	bl	8001f84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b084      	sub	sp, #16
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b22      	cmp	r3, #34	; 0x22
 80022dc:	d171      	bne.n	80023c2 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022e6:	d123      	bne.n	8002330 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ec:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10e      	bne.n	8002314 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002302:	b29a      	uxth	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230c:	1c9a      	adds	r2, r3, #2
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	629a      	str	r2, [r3, #40]	; 0x28
 8002312:	e029      	b.n	8002368 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	b29b      	uxth	r3, r3
 800231c:	b2db      	uxtb	r3, r3
 800231e:	b29a      	uxth	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	629a      	str	r2, [r3, #40]	; 0x28
 800232e:	e01b      	b.n	8002368 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10a      	bne.n	800234e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6858      	ldr	r0, [r3, #4]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002342:	1c59      	adds	r1, r3, #1
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6291      	str	r1, [r2, #40]	; 0x28
 8002348:	b2c2      	uxtb	r2, r0
 800234a:	701a      	strb	r2, [r3, #0]
 800234c:	e00c      	b.n	8002368 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	b2da      	uxtb	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235a:	1c58      	adds	r0, r3, #1
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	6288      	str	r0, [r1, #40]	; 0x28
 8002360:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800236c:	b29b      	uxth	r3, r3
 800236e:	3b01      	subs	r3, #1
 8002370:	b29b      	uxth	r3, r3
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	4619      	mov	r1, r3
 8002376:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002378:	2b00      	cmp	r3, #0
 800237a:	d120      	bne.n	80023be <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 0220 	bic.w	r2, r2, #32
 800238a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800239a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695a      	ldr	r2, [r3, #20]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0201 	bic.w	r2, r2, #1
 80023aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2220      	movs	r2, #32
 80023b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff fdf7 	bl	8001fa8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80023ba:	2300      	movs	r3, #0
 80023bc:	e002      	b.n	80023c4 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80023be:	2300      	movs	r3, #0
 80023c0:	e000      	b.n	80023c4 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80023c2:	2302      	movs	r3, #2
  }
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68da      	ldr	r2, [r3, #12]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	431a      	orrs	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002406:	f023 030c 	bic.w	r3, r3, #12
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6812      	ldr	r2, [r2, #0]
 800240e:	68f9      	ldr	r1, [r7, #12]
 8002410:	430b      	orrs	r3, r1
 8002412:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	699a      	ldr	r2, [r3, #24]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a52      	ldr	r2, [pc, #328]	; (8002578 <UART_SetConfig+0x1ac>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d14e      	bne.n	80024d2 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002434:	f7ff fb3e 	bl	8001ab4 <HAL_RCC_GetPCLK2Freq>
 8002438:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	009a      	lsls	r2, r3, #2
 8002444:	441a      	add	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002450:	4a4a      	ldr	r2, [pc, #296]	; (800257c <UART_SetConfig+0x1b0>)
 8002452:	fba2 2303 	umull	r2, r3, r2, r3
 8002456:	095b      	lsrs	r3, r3, #5
 8002458:	0119      	lsls	r1, r3, #4
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	009a      	lsls	r2, r3, #2
 8002464:	441a      	add	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002470:	4b42      	ldr	r3, [pc, #264]	; (800257c <UART_SetConfig+0x1b0>)
 8002472:	fba3 0302 	umull	r0, r3, r3, r2
 8002476:	095b      	lsrs	r3, r3, #5
 8002478:	2064      	movs	r0, #100	; 0x64
 800247a:	fb00 f303 	mul.w	r3, r0, r3
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	3332      	adds	r3, #50	; 0x32
 8002484:	4a3d      	ldr	r2, [pc, #244]	; (800257c <UART_SetConfig+0x1b0>)
 8002486:	fba2 2303 	umull	r2, r3, r2, r3
 800248a:	095b      	lsrs	r3, r3, #5
 800248c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002490:	4419      	add	r1, r3
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	4613      	mov	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	009a      	lsls	r2, r3, #2
 800249c:	441a      	add	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80024a8:	4b34      	ldr	r3, [pc, #208]	; (800257c <UART_SetConfig+0x1b0>)
 80024aa:	fba3 0302 	umull	r0, r3, r3, r2
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	2064      	movs	r0, #100	; 0x64
 80024b2:	fb00 f303 	mul.w	r3, r0, r3
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	011b      	lsls	r3, r3, #4
 80024ba:	3332      	adds	r3, #50	; 0x32
 80024bc:	4a2f      	ldr	r2, [pc, #188]	; (800257c <UART_SetConfig+0x1b0>)
 80024be:	fba2 2303 	umull	r2, r3, r2, r3
 80024c2:	095b      	lsrs	r3, r3, #5
 80024c4:	f003 020f 	and.w	r2, r3, #15
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	440a      	add	r2, r1
 80024ce:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80024d0:	e04d      	b.n	800256e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80024d2:	f7ff fadb 	bl	8001a8c <HAL_RCC_GetPCLK1Freq>
 80024d6:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024d8:	68ba      	ldr	r2, [r7, #8]
 80024da:	4613      	mov	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	009a      	lsls	r2, r3, #2
 80024e2:	441a      	add	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ee:	4a23      	ldr	r2, [pc, #140]	; (800257c <UART_SetConfig+0x1b0>)
 80024f0:	fba2 2303 	umull	r2, r3, r2, r3
 80024f4:	095b      	lsrs	r3, r3, #5
 80024f6:	0119      	lsls	r1, r3, #4
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	4613      	mov	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	009a      	lsls	r2, r3, #2
 8002502:	441a      	add	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	fbb2 f2f3 	udiv	r2, r2, r3
 800250e:	4b1b      	ldr	r3, [pc, #108]	; (800257c <UART_SetConfig+0x1b0>)
 8002510:	fba3 0302 	umull	r0, r3, r3, r2
 8002514:	095b      	lsrs	r3, r3, #5
 8002516:	2064      	movs	r0, #100	; 0x64
 8002518:	fb00 f303 	mul.w	r3, r0, r3
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	011b      	lsls	r3, r3, #4
 8002520:	3332      	adds	r3, #50	; 0x32
 8002522:	4a16      	ldr	r2, [pc, #88]	; (800257c <UART_SetConfig+0x1b0>)
 8002524:	fba2 2303 	umull	r2, r3, r2, r3
 8002528:	095b      	lsrs	r3, r3, #5
 800252a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800252e:	4419      	add	r1, r3
 8002530:	68ba      	ldr	r2, [r7, #8]
 8002532:	4613      	mov	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	009a      	lsls	r2, r3, #2
 800253a:	441a      	add	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	fbb2 f2f3 	udiv	r2, r2, r3
 8002546:	4b0d      	ldr	r3, [pc, #52]	; (800257c <UART_SetConfig+0x1b0>)
 8002548:	fba3 0302 	umull	r0, r3, r3, r2
 800254c:	095b      	lsrs	r3, r3, #5
 800254e:	2064      	movs	r0, #100	; 0x64
 8002550:	fb00 f303 	mul.w	r3, r0, r3
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	011b      	lsls	r3, r3, #4
 8002558:	3332      	adds	r3, #50	; 0x32
 800255a:	4a08      	ldr	r2, [pc, #32]	; (800257c <UART_SetConfig+0x1b0>)
 800255c:	fba2 2303 	umull	r2, r3, r2, r3
 8002560:	095b      	lsrs	r3, r3, #5
 8002562:	f003 020f 	and.w	r2, r3, #15
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	440a      	add	r2, r1
 800256c:	609a      	str	r2, [r3, #8]
}
 800256e:	bf00      	nop
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40013800 	.word	0x40013800
 800257c:	51eb851f 	.word	0x51eb851f

08002580 <static_strings_init>:

#include "static_strings.h"

static_strings_string_splitter_parameters static_strings_string_splitter = {NULL,'\0'};

void static_strings_init(){
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 8002586:	2300      	movs	r3, #0
 8002588:	607b      	str	r3, [r7, #4]
 800258a:	e018      	b.n	80025be <static_strings_init+0x3e>
		static_strings_very_short_strings_descriptors[i].string = static_strings_very_short_string_memory[i];
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2232      	movs	r2, #50	; 0x32
 8002590:	fb02 f303 	mul.w	r3, r2, r3
 8002594:	4a4d      	ldr	r2, [pc, #308]	; (80026cc <static_strings_init+0x14c>)
 8002596:	441a      	add	r2, r3
 8002598:	494d      	ldr	r1, [pc, #308]	; (80026d0 <static_strings_init+0x150>)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_very_short_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_VERY_SHORT;
 80025a0:	4a4b      	ldr	r2, [pc, #300]	; (80026d0 <static_strings_init+0x150>)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	4413      	add	r3, r2
 80025a8:	2200      	movs	r2, #0
 80025aa:	719a      	strb	r2, [r3, #6]
		static_strings_very_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 80025ac:	4a48      	ldr	r2, [pc, #288]	; (80026d0 <static_strings_init+0x150>)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	4413      	add	r3, r2
 80025b4:	2200      	movs	r2, #0
 80025b6:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3301      	adds	r3, #1
 80025bc:	607b      	str	r3, [r7, #4]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b09      	cmp	r3, #9
 80025c2:	dde3      	ble.n	800258c <static_strings_init+0xc>
	}
	for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 80025c4:	2300      	movs	r3, #0
 80025c6:	607b      	str	r3, [r7, #4]
 80025c8:	e018      	b.n	80025fc <static_strings_init+0x7c>
		static_strings_short_strings_descriptors[i].string = static_strings_short_string_memory[i];
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2264      	movs	r2, #100	; 0x64
 80025ce:	fb02 f303 	mul.w	r3, r2, r3
 80025d2:	4a40      	ldr	r2, [pc, #256]	; (80026d4 <static_strings_init+0x154>)
 80025d4:	441a      	add	r2, r3
 80025d6:	4940      	ldr	r1, [pc, #256]	; (80026d8 <static_strings_init+0x158>)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_short_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_SHORT;
 80025de:	4a3e      	ldr	r2, [pc, #248]	; (80026d8 <static_strings_init+0x158>)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	4413      	add	r3, r2
 80025e6:	2201      	movs	r2, #1
 80025e8:	719a      	strb	r2, [r3, #6]
		static_strings_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 80025ea:	4a3b      	ldr	r2, [pc, #236]	; (80026d8 <static_strings_init+0x158>)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4413      	add	r3, r2
 80025f2:	2200      	movs	r2, #0
 80025f4:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3301      	adds	r3, #1
 80025fa:	607b      	str	r3, [r7, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b05      	cmp	r3, #5
 8002600:	dde3      	ble.n	80025ca <static_strings_init+0x4a>
	}
	for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 8002602:	2300      	movs	r3, #0
 8002604:	607b      	str	r3, [r7, #4]
 8002606:	e018      	b.n	800263a <static_strings_init+0xba>
		static_strings_medium_strings_descriptors[i].string = static_strings_medium_string_memory[i];
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	22c8      	movs	r2, #200	; 0xc8
 800260c:	fb02 f303 	mul.w	r3, r2, r3
 8002610:	4a32      	ldr	r2, [pc, #200]	; (80026dc <static_strings_init+0x15c>)
 8002612:	441a      	add	r2, r3
 8002614:	4932      	ldr	r1, [pc, #200]	; (80026e0 <static_strings_init+0x160>)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_medium_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_MEDIUM;
 800261c:	4a30      	ldr	r2, [pc, #192]	; (80026e0 <static_strings_init+0x160>)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	4413      	add	r3, r2
 8002624:	2202      	movs	r2, #2
 8002626:	719a      	strb	r2, [r3, #6]
		static_strings_medium_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 8002628:	4a2d      	ldr	r2, [pc, #180]	; (80026e0 <static_strings_init+0x160>)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	4413      	add	r3, r2
 8002630:	2200      	movs	r2, #0
 8002632:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3301      	adds	r3, #1
 8002638:	607b      	str	r3, [r7, #4]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b01      	cmp	r3, #1
 800263e:	dde3      	ble.n	8002608 <static_strings_init+0x88>
	}
	for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 8002640:	2300      	movs	r3, #0
 8002642:	607b      	str	r3, [r7, #4]
 8002644:	e019      	b.n	800267a <static_strings_init+0xfa>
		static_strings_long_strings_descriptors[i].string = static_strings_long_string_memory[i];
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800264c:	fb02 f303 	mul.w	r3, r2, r3
 8002650:	4a24      	ldr	r2, [pc, #144]	; (80026e4 <static_strings_init+0x164>)
 8002652:	441a      	add	r2, r3
 8002654:	4924      	ldr	r1, [pc, #144]	; (80026e8 <static_strings_init+0x168>)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_long_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_LONG;
 800265c:	4a22      	ldr	r2, [pc, #136]	; (80026e8 <static_strings_init+0x168>)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	4413      	add	r3, r2
 8002664:	2203      	movs	r2, #3
 8002666:	719a      	strb	r2, [r3, #6]
		static_strings_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 8002668:	4a1f      	ldr	r2, [pc, #124]	; (80026e8 <static_strings_init+0x168>)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	4413      	add	r3, r2
 8002670:	2200      	movs	r2, #0
 8002672:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3301      	adds	r3, #1
 8002678:	607b      	str	r3, [r7, #4]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	dde2      	ble.n	8002646 <static_strings_init+0xc6>
	}
	for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 8002680:	2300      	movs	r3, #0
 8002682:	607b      	str	r3, [r7, #4]
 8002684:	e019      	b.n	80026ba <static_strings_init+0x13a>
		static_strings_very_long_strings_descriptors[i].string = static_strings_very_long_string_memory[i];
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800268c:	fb02 f303 	mul.w	r3, r2, r3
 8002690:	4a16      	ldr	r2, [pc, #88]	; (80026ec <static_strings_init+0x16c>)
 8002692:	441a      	add	r2, r3
 8002694:	4916      	ldr	r1, [pc, #88]	; (80026f0 <static_strings_init+0x170>)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_very_long_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_VERY_LONG;
 800269c:	4a14      	ldr	r2, [pc, #80]	; (80026f0 <static_strings_init+0x170>)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	4413      	add	r3, r2
 80026a4:	2204      	movs	r2, #4
 80026a6:	719a      	strb	r2, [r3, #6]
		static_strings_very_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 80026a8:	4a11      	ldr	r2, [pc, #68]	; (80026f0 <static_strings_init+0x170>)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	4413      	add	r3, r2
 80026b0:	2200      	movs	r2, #0
 80026b2:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3301      	adds	r3, #1
 80026b8:	607b      	str	r3, [r7, #4]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	dde2      	ble.n	8002686 <static_strings_init+0x106>
	}
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc80      	pop	{r7}
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	200002f8 	.word	0x200002f8
 80026d0:	200008e8 	.word	0x200008e8
 80026d4:	200000a0 	.word	0x200000a0
 80026d8:	20001170 	.word	0x20001170
 80026dc:	20000fe0 	.word	0x20000fe0
 80026e0:	200008d8 	.word	0x200008d8
 80026e4:	2000097c 	.word	0x2000097c
 80026e8:	200011a0 	.word	0x200011a0
 80026ec:	200004f0 	.word	0x200004f0
 80026f0:	20000098 	.word	0x20000098

080026f4 <static_strings_allocate>:

static_strings_string_descriptor *static_strings_allocate(uint16_t string_size){
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	80fb      	strh	r3, [r7, #6]
	int i;
	if(string_size <= STATIC_STRINGS_VERY_SHORT_STRING_SIZE){
 80026fe:	88fb      	ldrh	r3, [r7, #6]
 8002700:	2b32      	cmp	r3, #50	; 0x32
 8002702:	d81a      	bhi.n	800273a <static_strings_allocate+0x46>
		for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 8002704:	2300      	movs	r3, #0
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	e014      	b.n	8002734 <static_strings_allocate+0x40>
			if(static_strings_very_short_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 800270a:	4a51      	ldr	r2, [pc, #324]	; (8002850 <static_strings_allocate+0x15c>)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	4413      	add	r3, r2
 8002712:	79db      	ldrb	r3, [r3, #7]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10a      	bne.n	800272e <static_strings_allocate+0x3a>
				static_strings_very_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 8002718:	4a4d      	ldr	r2, [pc, #308]	; (8002850 <static_strings_allocate+0x15c>)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	4413      	add	r3, r2
 8002720:	2201      	movs	r2, #1
 8002722:	71da      	strb	r2, [r3, #7]
				return &static_strings_very_short_strings_descriptors[i];
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4a49      	ldr	r2, [pc, #292]	; (8002850 <static_strings_allocate+0x15c>)
 800272a:	4413      	add	r3, r2
 800272c:	e08b      	b.n	8002846 <static_strings_allocate+0x152>
		for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	3301      	adds	r3, #1
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2b09      	cmp	r3, #9
 8002738:	dde7      	ble.n	800270a <static_strings_allocate+0x16>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_SHORT_STRING_SIZE){
 800273a:	88fb      	ldrh	r3, [r7, #6]
 800273c:	2b64      	cmp	r3, #100	; 0x64
 800273e:	d81a      	bhi.n	8002776 <static_strings_allocate+0x82>
		for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 8002740:	2300      	movs	r3, #0
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	e014      	b.n	8002770 <static_strings_allocate+0x7c>
			if(static_strings_short_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 8002746:	4a43      	ldr	r2, [pc, #268]	; (8002854 <static_strings_allocate+0x160>)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	4413      	add	r3, r2
 800274e:	79db      	ldrb	r3, [r3, #7]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10a      	bne.n	800276a <static_strings_allocate+0x76>
				static_strings_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 8002754:	4a3f      	ldr	r2, [pc, #252]	; (8002854 <static_strings_allocate+0x160>)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	4413      	add	r3, r2
 800275c:	2201      	movs	r2, #1
 800275e:	71da      	strb	r2, [r3, #7]
				return &static_strings_short_strings_descriptors[i];
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	4a3b      	ldr	r2, [pc, #236]	; (8002854 <static_strings_allocate+0x160>)
 8002766:	4413      	add	r3, r2
 8002768:	e06d      	b.n	8002846 <static_strings_allocate+0x152>
		for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	3301      	adds	r3, #1
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2b05      	cmp	r3, #5
 8002774:	dde7      	ble.n	8002746 <static_strings_allocate+0x52>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_MEDIUM_STRING_SIZE){
 8002776:	88fb      	ldrh	r3, [r7, #6]
 8002778:	2bc8      	cmp	r3, #200	; 0xc8
 800277a:	d81a      	bhi.n	80027b2 <static_strings_allocate+0xbe>
		for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 800277c:	2300      	movs	r3, #0
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	e014      	b.n	80027ac <static_strings_allocate+0xb8>
			if(static_strings_medium_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 8002782:	4a35      	ldr	r2, [pc, #212]	; (8002858 <static_strings_allocate+0x164>)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	4413      	add	r3, r2
 800278a:	79db      	ldrb	r3, [r3, #7]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10a      	bne.n	80027a6 <static_strings_allocate+0xb2>
				static_strings_medium_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 8002790:	4a31      	ldr	r2, [pc, #196]	; (8002858 <static_strings_allocate+0x164>)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	4413      	add	r3, r2
 8002798:	2201      	movs	r2, #1
 800279a:	71da      	strb	r2, [r3, #7]
				return &static_strings_medium_strings_descriptors[i];
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	4a2d      	ldr	r2, [pc, #180]	; (8002858 <static_strings_allocate+0x164>)
 80027a2:	4413      	add	r3, r2
 80027a4:	e04f      	b.n	8002846 <static_strings_allocate+0x152>
		for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	3301      	adds	r3, #1
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	dde7      	ble.n	8002782 <static_strings_allocate+0x8e>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_LONG_STRING_SIZE){
 80027b2:	88fb      	ldrh	r3, [r7, #6]
 80027b4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80027b8:	d81a      	bhi.n	80027f0 <static_strings_allocate+0xfc>
		for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 80027ba:	2300      	movs	r3, #0
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	e014      	b.n	80027ea <static_strings_allocate+0xf6>
			if(static_strings_long_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 80027c0:	4a26      	ldr	r2, [pc, #152]	; (800285c <static_strings_allocate+0x168>)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	4413      	add	r3, r2
 80027c8:	79db      	ldrb	r3, [r3, #7]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10a      	bne.n	80027e4 <static_strings_allocate+0xf0>
				static_strings_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 80027ce:	4a23      	ldr	r2, [pc, #140]	; (800285c <static_strings_allocate+0x168>)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	4413      	add	r3, r2
 80027d6:	2201      	movs	r2, #1
 80027d8:	71da      	strb	r2, [r3, #7]
				return &static_strings_long_strings_descriptors[i];
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	4a1f      	ldr	r2, [pc, #124]	; (800285c <static_strings_allocate+0x168>)
 80027e0:	4413      	add	r3, r2
 80027e2:	e030      	b.n	8002846 <static_strings_allocate+0x152>
		for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	3301      	adds	r3, #1
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	dde7      	ble.n	80027c0 <static_strings_allocate+0xcc>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_VERY_LONG_STRING_SIZE){
 80027f0:	88fb      	ldrh	r3, [r7, #6]
 80027f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027f6:	d81a      	bhi.n	800282e <static_strings_allocate+0x13a>
		for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 80027f8:	2300      	movs	r3, #0
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	e014      	b.n	8002828 <static_strings_allocate+0x134>
			if(static_strings_very_long_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 80027fe:	4a18      	ldr	r2, [pc, #96]	; (8002860 <static_strings_allocate+0x16c>)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	4413      	add	r3, r2
 8002806:	79db      	ldrb	r3, [r3, #7]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10a      	bne.n	8002822 <static_strings_allocate+0x12e>
				static_strings_very_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 800280c:	4a14      	ldr	r2, [pc, #80]	; (8002860 <static_strings_allocate+0x16c>)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	4413      	add	r3, r2
 8002814:	2201      	movs	r2, #1
 8002816:	71da      	strb	r2, [r3, #7]
				return &static_strings_very_long_strings_descriptors[i];
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	4a10      	ldr	r2, [pc, #64]	; (8002860 <static_strings_allocate+0x16c>)
 800281e:	4413      	add	r3, r2
 8002820:	e011      	b.n	8002846 <static_strings_allocate+0x152>
		for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	3301      	adds	r3, #1
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2b00      	cmp	r3, #0
 800282c:	dde7      	ble.n	80027fe <static_strings_allocate+0x10a>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_VERY_LONG_STRING_SIZE){
 800282e:	88fb      	ldrh	r3, [r7, #6]
 8002830:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002834:	d803      	bhi.n	800283e <static_strings_allocate+0x14a>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_NO_MEMORY_AVAILABLE;
 8002836:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <static_strings_allocate+0x170>)
 8002838:	2200      	movs	r2, #0
 800283a:	701a      	strb	r2, [r3, #0]
 800283c:	e002      	b.n	8002844 <static_strings_allocate+0x150>
	}
	else{
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_STRING_TOO_LONG;
 800283e:	4b09      	ldr	r3, [pc, #36]	; (8002864 <static_strings_allocate+0x170>)
 8002840:	2202      	movs	r2, #2
 8002842:	701a      	strb	r2, [r3, #0]
	}
	return (static_strings_string_descriptor *)NULL;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr
 8002850:	200008e8 	.word	0x200008e8
 8002854:	20001170 	.word	0x20001170
 8002858:	200008d8 	.word	0x200008d8
 800285c:	200011a0 	.word	0x200011a0
 8002860:	20000098 	.word	0x20000098
 8002864:	200004ec 	.word	0x200004ec

08002868 <static_strings_save>:

static_strings_string_descriptor *static_strings_save(uint8_t *string){
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
	uint16_t string_length = static_strings_strlen(string);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f831 	bl	80028d8 <static_strings_strlen>
 8002876:	4603      	mov	r3, r0
 8002878:	81fb      	strh	r3, [r7, #14]
	if(string_length == 0){
 800287a:	89fb      	ldrh	r3, [r7, #14]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <static_strings_save+0x1c>
		return (static_strings_string_descriptor *)NULL;
 8002880:	2300      	movs	r3, #0
 8002882:	e014      	b.n	80028ae <static_strings_save+0x46>
	}
	static_strings_string_descriptor *descriptor = static_strings_allocate(string_length);
 8002884:	89fb      	ldrh	r3, [r7, #14]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff ff34 	bl	80026f4 <static_strings_allocate>
 800288c:	60b8      	str	r0, [r7, #8]
	if(descriptor == NULL){
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <static_strings_save+0x30>
		return descriptor;
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	e00a      	b.n	80028ae <static_strings_save+0x46>
	}
	memcpy(descriptor->string,string,string_length);
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	89fa      	ldrh	r2, [r7, #14]
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 fa97 	bl	8002dd4 <memcpy>
	descriptor->length = string_length;
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	89fa      	ldrh	r2, [r7, #14]
 80028aa:	809a      	strh	r2, [r3, #4]
	return descriptor;
 80028ac:	68bb      	ldr	r3, [r7, #8]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <static_strings_deallocate>:
	string_descriptor->string = string;
	string_descriptor->length = static_strings_strlen(string_descriptor->string);
	return string_descriptor->length;
}

void static_strings_deallocate(static_strings_string_descriptor *string_descriptor){
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
	if(string_descriptor->type != STATIC_STRINGS_STRING_STATUS_CONSTANT){
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	799b      	ldrb	r3, [r3, #6]
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d002      	beq.n	80028cc <static_strings_deallocate+0x16>
		string_descriptor->status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	71da      	strb	r2, [r3, #7]
	}
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr
	...

080028d8 <static_strings_strlen>:
		return 1;
	}
	return 0;
}

uint16_t static_strings_strlen(uint8_t *string){
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
	uint16_t length;
	for(length = 0;length < STATIC_STRINGS_VERY_LONG_STRING_SIZE;length++){
 80028e0:	2300      	movs	r3, #0
 80028e2:	81fb      	strh	r3, [r7, #14]
 80028e4:	e010      	b.n	8002908 <static_strings_strlen+0x30>
		if( *(string + length) == '\r'){
 80028e6:	89fb      	ldrh	r3, [r7, #14]
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	4413      	add	r3, r2
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	2b0d      	cmp	r3, #13
 80028f0:	d00f      	beq.n	8002912 <static_strings_strlen+0x3a>
			break;
		}
		if( *(string + length) == '\0'){
 80028f2:	89fb      	ldrh	r3, [r7, #14]
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	4413      	add	r3, r2
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <static_strings_strlen+0x2a>
			return length;
 80028fe:	89fb      	ldrh	r3, [r7, #14]
 8002900:	e022      	b.n	8002948 <static_strings_strlen+0x70>
	for(length = 0;length < STATIC_STRINGS_VERY_LONG_STRING_SIZE;length++){
 8002902:	89fb      	ldrh	r3, [r7, #14]
 8002904:	3301      	adds	r3, #1
 8002906:	81fb      	strh	r3, [r7, #14]
 8002908:	89fb      	ldrh	r3, [r7, #14]
 800290a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800290e:	d3ea      	bcc.n	80028e6 <static_strings_strlen+0xe>
 8002910:	e000      	b.n	8002914 <static_strings_strlen+0x3c>
			break;
 8002912:	bf00      	nop
		}
	}
	if(length >= 999){
 8002914:	89fb      	ldrh	r3, [r7, #14]
 8002916:	f240 32e6 	movw	r2, #998	; 0x3e6
 800291a:	4293      	cmp	r3, r2
 800291c:	d904      	bls.n	8002928 <static_strings_strlen+0x50>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_INVALID_STRING;
 800291e:	4b0d      	ldr	r3, [pc, #52]	; (8002954 <static_strings_strlen+0x7c>)
 8002920:	2201      	movs	r2, #1
 8002922:	701a      	strb	r2, [r3, #0]
		return 0;
 8002924:	2300      	movs	r3, #0
 8002926:	e00f      	b.n	8002948 <static_strings_strlen+0x70>
	}
	else{
		if(*(string + length + 1) != '\n'){
 8002928:	89fb      	ldrh	r3, [r7, #14]
 800292a:	3301      	adds	r3, #1
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	4413      	add	r3, r2
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b0a      	cmp	r3, #10
 8002934:	d005      	beq.n	8002942 <static_strings_strlen+0x6a>
			*(string + length + 1) = '\n';
 8002936:	89fb      	ldrh	r3, [r7, #14]
 8002938:	3301      	adds	r3, #1
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	4413      	add	r3, r2
 800293e:	220a      	movs	r2, #10
 8002940:	701a      	strb	r2, [r3, #0]
		}
		return length + 2;
 8002942:	89fb      	ldrh	r3, [r7, #14]
 8002944:	3302      	adds	r3, #2
 8002946:	b29b      	uxth	r3, r3
	}
}
 8002948:	4618      	mov	r0, r3
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	200004ec 	.word	0x200004ec

08002958 <buffered_serial_init>:
 * \brief Serial communication based on a circular buffer, dma and huart with hal controls and Static Strings.
 */

#include "buffered_serial.h"

void buffered_serial_init(UART_HandleTypeDef **huarts){
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
	static_strings_init();
 8002960:	f7ff fe0e 	bl	8002580 <static_strings_init>
	int i;
	for(i = 0;i < BUFFERED_SERIAL_SERIALS_QUANTITY;i++){
 8002964:	2300      	movs	r3, #0
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	e07b      	b.n	8002a62 <buffered_serial_init+0x10a>
		buffered_serial_serial_descriptors[i].huart = *(huarts + i);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	4413      	add	r3, r2
 8002972:	6819      	ldr	r1, [r3, #0]
 8002974:	483e      	ldr	r0, [pc, #248]	; (8002a70 <buffered_serial_init+0x118>)
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	4613      	mov	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4403      	add	r3, r0
 8002982:	6019      	str	r1, [r3, #0]
		buffered_serial_serial_descriptors[i].rx_buffer = buffered_serial_rx_buffers[i];
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800298a:	fb02 f303 	mul.w	r3, r2, r3
 800298e:	4a39      	ldr	r2, [pc, #228]	; (8002a74 <buffered_serial_init+0x11c>)
 8002990:	1899      	adds	r1, r3, r2
 8002992:	4837      	ldr	r0, [pc, #220]	; (8002a70 <buffered_serial_init+0x118>)
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4403      	add	r3, r0
 80029a0:	3304      	adds	r3, #4
 80029a2:	6019      	str	r1, [r3, #0]
		buffered_serial_serial_descriptors[i].rx_buffer_data_start = buffered_serial_rx_buffers[i];
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80029aa:	fb02 f303 	mul.w	r3, r2, r3
 80029ae:	4a31      	ldr	r2, [pc, #196]	; (8002a74 <buffered_serial_init+0x11c>)
 80029b0:	1899      	adds	r1, r3, r2
 80029b2:	482f      	ldr	r0, [pc, #188]	; (8002a70 <buffered_serial_init+0x118>)
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	4613      	mov	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4403      	add	r3, r0
 80029c0:	3308      	adds	r3, #8
 80029c2:	6019      	str	r1, [r3, #0]
		buffered_serial_serial_descriptors[i].rx_buffer_data_finish = buffered_serial_rx_buffers[i];
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80029ca:	fb02 f303 	mul.w	r3, r2, r3
 80029ce:	4a29      	ldr	r2, [pc, #164]	; (8002a74 <buffered_serial_init+0x11c>)
 80029d0:	1899      	adds	r1, r3, r2
 80029d2:	4827      	ldr	r0, [pc, #156]	; (8002a70 <buffered_serial_init+0x118>)
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	4613      	mov	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4403      	add	r3, r0
 80029e0:	330c      	adds	r3, #12
 80029e2:	6019      	str	r1, [r3, #0]
		buffered_serial_serial_descriptors[i].tx_buffer = buffered_serial_tx_buffers[i];
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80029ea:	fb02 f303 	mul.w	r3, r2, r3
 80029ee:	4a22      	ldr	r2, [pc, #136]	; (8002a78 <buffered_serial_init+0x120>)
 80029f0:	1899      	adds	r1, r3, r2
 80029f2:	481f      	ldr	r0, [pc, #124]	; (8002a70 <buffered_serial_init+0x118>)
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	4613      	mov	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4413      	add	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4403      	add	r3, r0
 8002a00:	3310      	adds	r3, #16
 8002a02:	6019      	str	r1, [r3, #0]
		__HAL_UART_ENABLE_IT(buffered_serial_serial_descriptors[i].huart, UART_IT_IDLE);
 8002a04:	491a      	ldr	r1, [pc, #104]	; (8002a70 <buffered_serial_init+0x118>)
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68d9      	ldr	r1, [r3, #12]
 8002a18:	4815      	ldr	r0, [pc, #84]	; (8002a70 <buffered_serial_init+0x118>)
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4403      	add	r3, r0
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f041 0210 	orr.w	r2, r1, #16
 8002a2e:	60da      	str	r2, [r3, #12]
		HAL_UART_Receive_DMA(buffered_serial_serial_descriptors[i].huart,buffered_serial_serial_descriptors[i].rx_buffer,BUFFERED_SERIAL_BUFFERS_SIZE);
 8002a30:	490f      	ldr	r1, [pc, #60]	; (8002a70 <buffered_serial_init+0x118>)
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	4613      	mov	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	6818      	ldr	r0, [r3, #0]
 8002a40:	490b      	ldr	r1, [pc, #44]	; (8002a70 <buffered_serial_init+0x118>)
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	4613      	mov	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	3304      	adds	r3, #4
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002a56:	4619      	mov	r1, r3
 8002a58:	f7ff f918 	bl	8001c8c <HAL_UART_Receive_DMA>
	for(i = 0;i < BUFFERED_SERIAL_SERIALS_QUANTITY;i++){
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	dd80      	ble.n	800296a <buffered_serial_init+0x12>
	}
}
 8002a68:	bf00      	nop
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	200011a8 	.word	0x200011a8
 8002a74:	20000de8 	.word	0x20000de8
 8002a78:	20000bf4 	.word	0x20000bf4

08002a7c <buffered_serial_get_huart_serial_descriptor>:

buffered_serial_serial_descriptor *buffered_serial_get_huart_serial_descriptor(UART_HandleTypeDef *huart){
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
	int i;
	for(i = 0; i < BUFFERED_SERIAL_SERIALS_QUANTITY;i++){
 8002a84:	2300      	movs	r3, #0
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	e015      	b.n	8002ab6 <buffered_serial_get_huart_serial_descriptor+0x3a>
		if(buffered_serial_serial_descriptors[i].huart == huart){
 8002a8a:	490f      	ldr	r1, [pc, #60]	; (8002ac8 <buffered_serial_get_huart_serial_descriptor+0x4c>)
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	440b      	add	r3, r1
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d107      	bne.n	8002ab0 <buffered_serial_get_huart_serial_descriptor+0x34>
			return &buffered_serial_serial_descriptors[i];
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4a07      	ldr	r2, [pc, #28]	; (8002ac8 <buffered_serial_get_huart_serial_descriptor+0x4c>)
 8002aac:	4413      	add	r3, r2
 8002aae:	e006      	b.n	8002abe <buffered_serial_get_huart_serial_descriptor+0x42>
	for(i = 0; i < BUFFERED_SERIAL_SERIALS_QUANTITY;i++){
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	dde6      	ble.n	8002a8a <buffered_serial_get_huart_serial_descriptor+0xe>
		}
	}
	return NULL;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr
 8002ac8:	200011a8 	.word	0x200011a8

08002acc <buffered_serial_available>:

uint16_t buffered_serial_available(buffered_serial_serial_descriptor *serial){
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
	if(serial->rx_buffer_data_finish >= serial->rx_buffer_data_start){
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d307      	bcc.n	8002af0 <buffered_serial_available+0x24>
		return (uint16_t)(serial->rx_buffer_data_finish - serial->rx_buffer_data_start);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	e011      	b.n	8002b14 <buffered_serial_available+0x48>
	}
	else{
		return ((uint16_t)((serial->rx_buffer + BUFFERED_SERIAL_BUFFERS_SIZE) - serial->rx_buffer_data_start) + (uint16_t)(serial->rx_buffer_data_finish - serial->rx_buffer));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002af8:	461a      	mov	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	4619      	mov	r1, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	1acb      	subs	r3, r1, r3
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	4413      	add	r3, r2
 8002b12:	b29b      	uxth	r3, r3
	}
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr

08002b1e <buffered_serial_print_string>:

void buffered_serial_print_string(buffered_serial_serial_descriptor *serial,static_strings_string_descriptor *string_descriptor){
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b084      	sub	sp, #16
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	6039      	str	r1, [r7, #0]
	uint16_t remaining_data_to_send = string_descriptor->length;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	889b      	ldrh	r3, [r3, #4]
 8002b2c:	81fb      	strh	r3, [r7, #14]
	while(remaining_data_to_send > 0){
 8002b2e:	e040      	b.n	8002bb2 <buffered_serial_print_string+0x94>
		while(serial->huart->gState == HAL_UART_STATE_BUSY_TX);
 8002b30:	bf00      	nop
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b21      	cmp	r3, #33	; 0x21
 8002b3e:	d0f8      	beq.n	8002b32 <buffered_serial_print_string+0x14>
		if(remaining_data_to_send < BUFFERED_SERIAL_BUFFERS_SIZE){
 8002b40:	89fb      	ldrh	r3, [r7, #14]
 8002b42:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b46:	d218      	bcs.n	8002b7a <buffered_serial_print_string+0x5c>
			memcpy(serial->tx_buffer,string_descriptor->string + (string_descriptor->length - remaining_data_to_send),remaining_data_to_send);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6918      	ldr	r0, [r3, #16]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	8892      	ldrh	r2, [r2, #4]
 8002b54:	4611      	mov	r1, r2
 8002b56:	89fa      	ldrh	r2, [r7, #14]
 8002b58:	1a8a      	subs	r2, r1, r2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	89fa      	ldrh	r2, [r7, #14]
 8002b5e:	4619      	mov	r1, r3
 8002b60:	f000 f938 	bl	8002dd4 <memcpy>
			HAL_UART_Transmit_DMA(serial->huart,serial->tx_buffer,remaining_data_to_send);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6818      	ldr	r0, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	89fa      	ldrh	r2, [r7, #14]
 8002b6e:	4619      	mov	r1, r3
 8002b70:	f7ff f820 	bl	8001bb4 <HAL_UART_Transmit_DMA>
			remaining_data_to_send = 0;
 8002b74:	2300      	movs	r3, #0
 8002b76:	81fb      	strh	r3, [r7, #14]
 8002b78:	e01b      	b.n	8002bb2 <buffered_serial_print_string+0x94>
		}
		else{
			memcpy(serial->tx_buffer,string_descriptor->string + (string_descriptor->length - remaining_data_to_send),BUFFERED_SERIAL_BUFFERS_SIZE);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6918      	ldr	r0, [r3, #16]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	8892      	ldrh	r2, [r2, #4]
 8002b86:	4611      	mov	r1, r2
 8002b88:	89fa      	ldrh	r2, [r7, #14]
 8002b8a:	1a8a      	subs	r2, r1, r2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002b92:	4619      	mov	r1, r3
 8002b94:	f000 f91e 	bl	8002dd4 <memcpy>
			HAL_UART_Transmit_DMA(serial->huart,serial->tx_buffer,BUFFERED_SERIAL_BUFFERS_SIZE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6818      	ldr	r0, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	f7ff f805 	bl	8001bb4 <HAL_UART_Transmit_DMA>
			remaining_data_to_send -= BUFFERED_SERIAL_BUFFERS_SIZE;
 8002baa:	89fb      	ldrh	r3, [r7, #14]
 8002bac:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8002bb0:	81fb      	strh	r3, [r7, #14]
	while(remaining_data_to_send > 0){
 8002bb2:	89fb      	ldrh	r3, [r7, #14]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1bb      	bne.n	8002b30 <buffered_serial_print_string+0x12>
		}
	}
}
 8002bb8:	bf00      	nop
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <buffered_serial_read_line>:

static_strings_string_descriptor *buffered_serial_read_line(buffered_serial_serial_descriptor *serial){
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b088      	sub	sp, #32
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint16_t availaible_data;
	uint8_t *serial_data;
	for(i=0,availaible_data = buffered_serial_available(serial),serial_data = serial->rx_buffer_data_start;i < availaible_data;i++,serial_data++){
 8002bc8:	2300      	movs	r3, #0
 8002bca:	83fb      	strh	r3, [r7, #30]
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f7ff ff7d 	bl	8002acc <buffered_serial_available>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	827b      	strh	r3, [r7, #18]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	61bb      	str	r3, [r7, #24]
 8002bdc:	e078      	b.n	8002cd0 <buffered_serial_read_line+0x110>
		if(serial_data - serial->rx_buffer == BUFFERED_SERIAL_BUFFERS_SIZE){
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6852      	ldr	r2, [r2, #4]
 8002be4:	1a9b      	subs	r3, r3, r2
 8002be6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002bea:	d102      	bne.n	8002bf2 <buffered_serial_read_line+0x32>
			serial_data = serial->rx_buffer;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	61bb      	str	r3, [r7, #24]
		}
		if(*serial_data == '\n'){
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b0a      	cmp	r3, #10
 8002bf8:	d164      	bne.n	8002cc4 <buffered_serial_read_line+0x104>
			uint8_t *serial_data_previous;
			if(serial_data == serial->rx_buffer){
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d105      	bne.n	8002c10 <buffered_serial_read_line+0x50>
				serial_data_previous = serial->rx_buffer + BUFFERED_SERIAL_BUFFERS_SIZE - 1;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8002c0c:	617b      	str	r3, [r7, #20]
 8002c0e:	e002      	b.n	8002c16 <buffered_serial_read_line+0x56>
			}
			else{
				serial_data_previous = serial_data - 1;
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	617b      	str	r3, [r7, #20]
			}
			if(*serial_data_previous == '\r'){
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	2b0d      	cmp	r3, #13
 8002c1c:	d152      	bne.n	8002cc4 <buffered_serial_read_line+0x104>
				static_strings_string_descriptor *string_descriptor = static_strings_allocate(i + 1);
 8002c1e:	8bfb      	ldrh	r3, [r7, #30]
 8002c20:	3301      	adds	r3, #1
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff fd65 	bl	80026f4 <static_strings_allocate>
 8002c2a:	60f8      	str	r0, [r7, #12]
				if(string_descriptor == NULL){
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d104      	bne.n	8002c3c <buffered_serial_read_line+0x7c>
					buffered_serial_error_code = BUFFERED_SERIAL_ERROR_CODE_STATIC_STRINGS_ERROR;
 8002c32:	4b2d      	ldr	r3, [pc, #180]	; (8002ce8 <buffered_serial_read_line+0x128>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	701a      	strb	r2, [r3, #0]
					return string_descriptor;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	e051      	b.n	8002ce0 <buffered_serial_read_line+0x120>
				}
				string_descriptor->length = i + 1;
 8002c3c:	8bfb      	ldrh	r3, [r7, #30]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	809a      	strh	r2, [r3, #4]
				if(serial_data >= serial->rx_buffer_data_start){
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d309      	bcc.n	8002c64 <buffered_serial_read_line+0xa4>
					memcpy(string_descriptor->string,serial->rx_buffer_data_start, i + 1);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6818      	ldr	r0, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6899      	ldr	r1, [r3, #8]
 8002c58:	8bfb      	ldrh	r3, [r7, #30]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	f000 f8b9 	bl	8002dd4 <memcpy>
 8002c62:	e01d      	b.n	8002ca0 <buffered_serial_read_line+0xe0>
				}
				else{
					uint16_t data_at_buffer_end = (serial->rx_buffer + BUFFERED_SERIAL_BUFFERS_SIZE) - serial->rx_buffer_data_start;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	817b      	strh	r3, [r7, #10]
					memcpy(string_descriptor->string,serial->rx_buffer_data_start,data_at_buffer_end);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6818      	ldr	r0, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	897a      	ldrh	r2, [r7, #10]
 8002c80:	4619      	mov	r1, r3
 8002c82:	f000 f8a7 	bl	8002dd4 <memcpy>
					memcpy(string_descriptor->string + data_at_buffer_end,serial->rx_buffer,i - data_at_buffer_end + 1);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	897b      	ldrh	r3, [r7, #10]
 8002c8c:	18d0      	adds	r0, r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6859      	ldr	r1, [r3, #4]
 8002c92:	8bfa      	ldrh	r2, [r7, #30]
 8002c94:	897b      	ldrh	r3, [r7, #10]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	3301      	adds	r3, #1
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	f000 f89a 	bl	8002dd4 <memcpy>
				}
				if(serial_data == (serial->rx_buffer + BUFFERED_SERIAL_BUFFERS_SIZE) - 1){
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d104      	bne.n	8002cb8 <buffered_serial_read_line+0xf8>
					serial->rx_buffer_data_start = serial->rx_buffer;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	609a      	str	r2, [r3, #8]
 8002cb6:	e003      	b.n	8002cc0 <buffered_serial_read_line+0x100>
				}
				else{
					serial->rx_buffer_data_start = serial_data + 1;
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	1c5a      	adds	r2, r3, #1
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	609a      	str	r2, [r3, #8]
				}
				return string_descriptor;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	e00d      	b.n	8002ce0 <buffered_serial_read_line+0x120>
	for(i=0,availaible_data = buffered_serial_available(serial),serial_data = serial->rx_buffer_data_start;i < availaible_data;i++,serial_data++){
 8002cc4:	8bfb      	ldrh	r3, [r7, #30]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	83fb      	strh	r3, [r7, #30]
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	61bb      	str	r3, [r7, #24]
 8002cd0:	8bfa      	ldrh	r2, [r7, #30]
 8002cd2:	8a7b      	ldrh	r3, [r7, #18]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d382      	bcc.n	8002bde <buffered_serial_read_line+0x1e>
			}
		}
	}
	buffered_serial_error_code = BUFFERED_SERIAL_ERROR_CODE_NO_LINE_ENDING_DETECTED;
 8002cd8:	4b03      	ldr	r3, [pc, #12]	; (8002ce8 <buffered_serial_read_line+0x128>)
 8002cda:	2201      	movs	r2, #1
 8002cdc:	701a      	strb	r2, [r3, #0]
	return NULL;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3720      	adds	r7, #32
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	20000fdc 	.word	0x20000fdc

08002cec <buffered_serial_update_rx_buffer_data>:

void buffered_serial_update_rx_buffer_data(UART_HandleTypeDef *huart){
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
	if(__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) != RESET){
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0310 	and.w	r3, r3, #16
 8002cfe:	2b10      	cmp	r3, #16
 8002d00:	d137      	bne.n	8002d72 <buffered_serial_update_rx_buffer_data+0x86>
		__HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d02:	2300      	movs	r3, #0
 8002d04:	60bb      	str	r3, [r7, #8]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	60bb      	str	r3, [r7, #8]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	60bb      	str	r3, [r7, #8]
 8002d16:	68bb      	ldr	r3, [r7, #8]
		int i;
		for(i = 0; i < BUFFERED_SERIAL_SERIALS_QUANTITY;i++){
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	e026      	b.n	8002d6c <buffered_serial_update_rx_buffer_data+0x80>
			if(buffered_serial_serial_descriptors[i].huart == huart){
 8002d1e:	4917      	ldr	r1, [pc, #92]	; (8002d7c <buffered_serial_update_rx_buffer_data+0x90>)
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	4613      	mov	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d118      	bne.n	8002d66 <buffered_serial_update_rx_buffer_data+0x7a>
				buffered_serial_serial_descriptors[i].rx_buffer_data_finish = buffered_serial_serial_descriptors[i].rx_buffer + (BUFFERED_SERIAL_BUFFERS_SIZE - __HAL_DMA_GET_COUNTER(huart->hdmarx));
 8002d34:	4911      	ldr	r1, [pc, #68]	; (8002d7c <buffered_serial_update_rx_buffer_data+0x90>)
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	3304      	adds	r3, #4
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 8002d52:	18d1      	adds	r1, r2, r3
 8002d54:	4809      	ldr	r0, [pc, #36]	; (8002d7c <buffered_serial_update_rx_buffer_data+0x90>)
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4403      	add	r3, r0
 8002d62:	330c      	adds	r3, #12
 8002d64:	6019      	str	r1, [r3, #0]
		for(i = 0; i < BUFFERED_SERIAL_SERIALS_QUANTITY;i++){
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	ddd5      	ble.n	8002d1e <buffered_serial_update_rx_buffer_data+0x32>
			}
		}
	}
}
 8002d72:	bf00      	nop
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr
 8002d7c:	200011a8 	.word	0x200011a8

08002d80 <__errno>:
 8002d80:	4b01      	ldr	r3, [pc, #4]	; (8002d88 <__errno+0x8>)
 8002d82:	6818      	ldr	r0, [r3, #0]
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	2000000c 	.word	0x2000000c

08002d8c <__libc_init_array>:
 8002d8c:	b570      	push	{r4, r5, r6, lr}
 8002d8e:	2500      	movs	r5, #0
 8002d90:	4e0c      	ldr	r6, [pc, #48]	; (8002dc4 <__libc_init_array+0x38>)
 8002d92:	4c0d      	ldr	r4, [pc, #52]	; (8002dc8 <__libc_init_array+0x3c>)
 8002d94:	1ba4      	subs	r4, r4, r6
 8002d96:	10a4      	asrs	r4, r4, #2
 8002d98:	42a5      	cmp	r5, r4
 8002d9a:	d109      	bne.n	8002db0 <__libc_init_array+0x24>
 8002d9c:	f000 fc36 	bl	800360c <_init>
 8002da0:	2500      	movs	r5, #0
 8002da2:	4e0a      	ldr	r6, [pc, #40]	; (8002dcc <__libc_init_array+0x40>)
 8002da4:	4c0a      	ldr	r4, [pc, #40]	; (8002dd0 <__libc_init_array+0x44>)
 8002da6:	1ba4      	subs	r4, r4, r6
 8002da8:	10a4      	asrs	r4, r4, #2
 8002daa:	42a5      	cmp	r5, r4
 8002dac:	d105      	bne.n	8002dba <__libc_init_array+0x2e>
 8002dae:	bd70      	pop	{r4, r5, r6, pc}
 8002db0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002db4:	4798      	blx	r3
 8002db6:	3501      	adds	r5, #1
 8002db8:	e7ee      	b.n	8002d98 <__libc_init_array+0xc>
 8002dba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002dbe:	4798      	blx	r3
 8002dc0:	3501      	adds	r5, #1
 8002dc2:	e7f2      	b.n	8002daa <__libc_init_array+0x1e>
 8002dc4:	080039e4 	.word	0x080039e4
 8002dc8:	080039e4 	.word	0x080039e4
 8002dcc:	080039e4 	.word	0x080039e4
 8002dd0:	080039e8 	.word	0x080039e8

08002dd4 <memcpy>:
 8002dd4:	b510      	push	{r4, lr}
 8002dd6:	1e43      	subs	r3, r0, #1
 8002dd8:	440a      	add	r2, r1
 8002dda:	4291      	cmp	r1, r2
 8002ddc:	d100      	bne.n	8002de0 <memcpy+0xc>
 8002dde:	bd10      	pop	{r4, pc}
 8002de0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002de4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002de8:	e7f7      	b.n	8002dda <memcpy+0x6>

08002dea <memset>:
 8002dea:	4603      	mov	r3, r0
 8002dec:	4402      	add	r2, r0
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d100      	bne.n	8002df4 <memset+0xa>
 8002df2:	4770      	bx	lr
 8002df4:	f803 1b01 	strb.w	r1, [r3], #1
 8002df8:	e7f9      	b.n	8002dee <memset+0x4>
	...

08002dfc <siprintf>:
 8002dfc:	b40e      	push	{r1, r2, r3}
 8002dfe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002e02:	b500      	push	{lr}
 8002e04:	b09c      	sub	sp, #112	; 0x70
 8002e06:	ab1d      	add	r3, sp, #116	; 0x74
 8002e08:	9002      	str	r0, [sp, #8]
 8002e0a:	9006      	str	r0, [sp, #24]
 8002e0c:	9107      	str	r1, [sp, #28]
 8002e0e:	9104      	str	r1, [sp, #16]
 8002e10:	4808      	ldr	r0, [pc, #32]	; (8002e34 <siprintf+0x38>)
 8002e12:	4909      	ldr	r1, [pc, #36]	; (8002e38 <siprintf+0x3c>)
 8002e14:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e18:	9105      	str	r1, [sp, #20]
 8002e1a:	6800      	ldr	r0, [r0, #0]
 8002e1c:	a902      	add	r1, sp, #8
 8002e1e:	9301      	str	r3, [sp, #4]
 8002e20:	f000 f866 	bl	8002ef0 <_svfiprintf_r>
 8002e24:	2200      	movs	r2, #0
 8002e26:	9b02      	ldr	r3, [sp, #8]
 8002e28:	701a      	strb	r2, [r3, #0]
 8002e2a:	b01c      	add	sp, #112	; 0x70
 8002e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e30:	b003      	add	sp, #12
 8002e32:	4770      	bx	lr
 8002e34:	2000000c 	.word	0x2000000c
 8002e38:	ffff0208 	.word	0xffff0208

08002e3c <__ssputs_r>:
 8002e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e40:	688e      	ldr	r6, [r1, #8]
 8002e42:	4682      	mov	sl, r0
 8002e44:	429e      	cmp	r6, r3
 8002e46:	460c      	mov	r4, r1
 8002e48:	4690      	mov	r8, r2
 8002e4a:	4699      	mov	r9, r3
 8002e4c:	d837      	bhi.n	8002ebe <__ssputs_r+0x82>
 8002e4e:	898a      	ldrh	r2, [r1, #12]
 8002e50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002e54:	d031      	beq.n	8002eba <__ssputs_r+0x7e>
 8002e56:	2302      	movs	r3, #2
 8002e58:	6825      	ldr	r5, [r4, #0]
 8002e5a:	6909      	ldr	r1, [r1, #16]
 8002e5c:	1a6f      	subs	r7, r5, r1
 8002e5e:	6965      	ldr	r5, [r4, #20]
 8002e60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e64:	fb95 f5f3 	sdiv	r5, r5, r3
 8002e68:	f109 0301 	add.w	r3, r9, #1
 8002e6c:	443b      	add	r3, r7
 8002e6e:	429d      	cmp	r5, r3
 8002e70:	bf38      	it	cc
 8002e72:	461d      	movcc	r5, r3
 8002e74:	0553      	lsls	r3, r2, #21
 8002e76:	d530      	bpl.n	8002eda <__ssputs_r+0x9e>
 8002e78:	4629      	mov	r1, r5
 8002e7a:	f000 fb2d 	bl	80034d8 <_malloc_r>
 8002e7e:	4606      	mov	r6, r0
 8002e80:	b950      	cbnz	r0, 8002e98 <__ssputs_r+0x5c>
 8002e82:	230c      	movs	r3, #12
 8002e84:	f04f 30ff 	mov.w	r0, #4294967295
 8002e88:	f8ca 3000 	str.w	r3, [sl]
 8002e8c:	89a3      	ldrh	r3, [r4, #12]
 8002e8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e92:	81a3      	strh	r3, [r4, #12]
 8002e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e98:	463a      	mov	r2, r7
 8002e9a:	6921      	ldr	r1, [r4, #16]
 8002e9c:	f7ff ff9a 	bl	8002dd4 <memcpy>
 8002ea0:	89a3      	ldrh	r3, [r4, #12]
 8002ea2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eaa:	81a3      	strh	r3, [r4, #12]
 8002eac:	6126      	str	r6, [r4, #16]
 8002eae:	443e      	add	r6, r7
 8002eb0:	6026      	str	r6, [r4, #0]
 8002eb2:	464e      	mov	r6, r9
 8002eb4:	6165      	str	r5, [r4, #20]
 8002eb6:	1bed      	subs	r5, r5, r7
 8002eb8:	60a5      	str	r5, [r4, #8]
 8002eba:	454e      	cmp	r6, r9
 8002ebc:	d900      	bls.n	8002ec0 <__ssputs_r+0x84>
 8002ebe:	464e      	mov	r6, r9
 8002ec0:	4632      	mov	r2, r6
 8002ec2:	4641      	mov	r1, r8
 8002ec4:	6820      	ldr	r0, [r4, #0]
 8002ec6:	f000 faa1 	bl	800340c <memmove>
 8002eca:	68a3      	ldr	r3, [r4, #8]
 8002ecc:	2000      	movs	r0, #0
 8002ece:	1b9b      	subs	r3, r3, r6
 8002ed0:	60a3      	str	r3, [r4, #8]
 8002ed2:	6823      	ldr	r3, [r4, #0]
 8002ed4:	441e      	add	r6, r3
 8002ed6:	6026      	str	r6, [r4, #0]
 8002ed8:	e7dc      	b.n	8002e94 <__ssputs_r+0x58>
 8002eda:	462a      	mov	r2, r5
 8002edc:	f000 fb56 	bl	800358c <_realloc_r>
 8002ee0:	4606      	mov	r6, r0
 8002ee2:	2800      	cmp	r0, #0
 8002ee4:	d1e2      	bne.n	8002eac <__ssputs_r+0x70>
 8002ee6:	6921      	ldr	r1, [r4, #16]
 8002ee8:	4650      	mov	r0, sl
 8002eea:	f000 faa9 	bl	8003440 <_free_r>
 8002eee:	e7c8      	b.n	8002e82 <__ssputs_r+0x46>

08002ef0 <_svfiprintf_r>:
 8002ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ef4:	461d      	mov	r5, r3
 8002ef6:	898b      	ldrh	r3, [r1, #12]
 8002ef8:	b09d      	sub	sp, #116	; 0x74
 8002efa:	061f      	lsls	r7, r3, #24
 8002efc:	4680      	mov	r8, r0
 8002efe:	460c      	mov	r4, r1
 8002f00:	4616      	mov	r6, r2
 8002f02:	d50f      	bpl.n	8002f24 <_svfiprintf_r+0x34>
 8002f04:	690b      	ldr	r3, [r1, #16]
 8002f06:	b96b      	cbnz	r3, 8002f24 <_svfiprintf_r+0x34>
 8002f08:	2140      	movs	r1, #64	; 0x40
 8002f0a:	f000 fae5 	bl	80034d8 <_malloc_r>
 8002f0e:	6020      	str	r0, [r4, #0]
 8002f10:	6120      	str	r0, [r4, #16]
 8002f12:	b928      	cbnz	r0, 8002f20 <_svfiprintf_r+0x30>
 8002f14:	230c      	movs	r3, #12
 8002f16:	f8c8 3000 	str.w	r3, [r8]
 8002f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8002f1e:	e0c8      	b.n	80030b2 <_svfiprintf_r+0x1c2>
 8002f20:	2340      	movs	r3, #64	; 0x40
 8002f22:	6163      	str	r3, [r4, #20]
 8002f24:	2300      	movs	r3, #0
 8002f26:	9309      	str	r3, [sp, #36]	; 0x24
 8002f28:	2320      	movs	r3, #32
 8002f2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f2e:	2330      	movs	r3, #48	; 0x30
 8002f30:	f04f 0b01 	mov.w	fp, #1
 8002f34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f38:	9503      	str	r5, [sp, #12]
 8002f3a:	4637      	mov	r7, r6
 8002f3c:	463d      	mov	r5, r7
 8002f3e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002f42:	b10b      	cbz	r3, 8002f48 <_svfiprintf_r+0x58>
 8002f44:	2b25      	cmp	r3, #37	; 0x25
 8002f46:	d13e      	bne.n	8002fc6 <_svfiprintf_r+0xd6>
 8002f48:	ebb7 0a06 	subs.w	sl, r7, r6
 8002f4c:	d00b      	beq.n	8002f66 <_svfiprintf_r+0x76>
 8002f4e:	4653      	mov	r3, sl
 8002f50:	4632      	mov	r2, r6
 8002f52:	4621      	mov	r1, r4
 8002f54:	4640      	mov	r0, r8
 8002f56:	f7ff ff71 	bl	8002e3c <__ssputs_r>
 8002f5a:	3001      	adds	r0, #1
 8002f5c:	f000 80a4 	beq.w	80030a8 <_svfiprintf_r+0x1b8>
 8002f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f62:	4453      	add	r3, sl
 8002f64:	9309      	str	r3, [sp, #36]	; 0x24
 8002f66:	783b      	ldrb	r3, [r7, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 809d 	beq.w	80030a8 <_svfiprintf_r+0x1b8>
 8002f6e:	2300      	movs	r3, #0
 8002f70:	f04f 32ff 	mov.w	r2, #4294967295
 8002f74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f78:	9304      	str	r3, [sp, #16]
 8002f7a:	9307      	str	r3, [sp, #28]
 8002f7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f80:	931a      	str	r3, [sp, #104]	; 0x68
 8002f82:	462f      	mov	r7, r5
 8002f84:	2205      	movs	r2, #5
 8002f86:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002f8a:	4850      	ldr	r0, [pc, #320]	; (80030cc <_svfiprintf_r+0x1dc>)
 8002f8c:	f000 fa30 	bl	80033f0 <memchr>
 8002f90:	9b04      	ldr	r3, [sp, #16]
 8002f92:	b9d0      	cbnz	r0, 8002fca <_svfiprintf_r+0xda>
 8002f94:	06d9      	lsls	r1, r3, #27
 8002f96:	bf44      	itt	mi
 8002f98:	2220      	movmi	r2, #32
 8002f9a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f9e:	071a      	lsls	r2, r3, #28
 8002fa0:	bf44      	itt	mi
 8002fa2:	222b      	movmi	r2, #43	; 0x2b
 8002fa4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002fa8:	782a      	ldrb	r2, [r5, #0]
 8002faa:	2a2a      	cmp	r2, #42	; 0x2a
 8002fac:	d015      	beq.n	8002fda <_svfiprintf_r+0xea>
 8002fae:	462f      	mov	r7, r5
 8002fb0:	2000      	movs	r0, #0
 8002fb2:	250a      	movs	r5, #10
 8002fb4:	9a07      	ldr	r2, [sp, #28]
 8002fb6:	4639      	mov	r1, r7
 8002fb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002fbc:	3b30      	subs	r3, #48	; 0x30
 8002fbe:	2b09      	cmp	r3, #9
 8002fc0:	d94d      	bls.n	800305e <_svfiprintf_r+0x16e>
 8002fc2:	b1b8      	cbz	r0, 8002ff4 <_svfiprintf_r+0x104>
 8002fc4:	e00f      	b.n	8002fe6 <_svfiprintf_r+0xf6>
 8002fc6:	462f      	mov	r7, r5
 8002fc8:	e7b8      	b.n	8002f3c <_svfiprintf_r+0x4c>
 8002fca:	4a40      	ldr	r2, [pc, #256]	; (80030cc <_svfiprintf_r+0x1dc>)
 8002fcc:	463d      	mov	r5, r7
 8002fce:	1a80      	subs	r0, r0, r2
 8002fd0:	fa0b f000 	lsl.w	r0, fp, r0
 8002fd4:	4318      	orrs	r0, r3
 8002fd6:	9004      	str	r0, [sp, #16]
 8002fd8:	e7d3      	b.n	8002f82 <_svfiprintf_r+0x92>
 8002fda:	9a03      	ldr	r2, [sp, #12]
 8002fdc:	1d11      	adds	r1, r2, #4
 8002fde:	6812      	ldr	r2, [r2, #0]
 8002fe0:	9103      	str	r1, [sp, #12]
 8002fe2:	2a00      	cmp	r2, #0
 8002fe4:	db01      	blt.n	8002fea <_svfiprintf_r+0xfa>
 8002fe6:	9207      	str	r2, [sp, #28]
 8002fe8:	e004      	b.n	8002ff4 <_svfiprintf_r+0x104>
 8002fea:	4252      	negs	r2, r2
 8002fec:	f043 0302 	orr.w	r3, r3, #2
 8002ff0:	9207      	str	r2, [sp, #28]
 8002ff2:	9304      	str	r3, [sp, #16]
 8002ff4:	783b      	ldrb	r3, [r7, #0]
 8002ff6:	2b2e      	cmp	r3, #46	; 0x2e
 8002ff8:	d10c      	bne.n	8003014 <_svfiprintf_r+0x124>
 8002ffa:	787b      	ldrb	r3, [r7, #1]
 8002ffc:	2b2a      	cmp	r3, #42	; 0x2a
 8002ffe:	d133      	bne.n	8003068 <_svfiprintf_r+0x178>
 8003000:	9b03      	ldr	r3, [sp, #12]
 8003002:	3702      	adds	r7, #2
 8003004:	1d1a      	adds	r2, r3, #4
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	9203      	str	r2, [sp, #12]
 800300a:	2b00      	cmp	r3, #0
 800300c:	bfb8      	it	lt
 800300e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003012:	9305      	str	r3, [sp, #20]
 8003014:	4d2e      	ldr	r5, [pc, #184]	; (80030d0 <_svfiprintf_r+0x1e0>)
 8003016:	2203      	movs	r2, #3
 8003018:	7839      	ldrb	r1, [r7, #0]
 800301a:	4628      	mov	r0, r5
 800301c:	f000 f9e8 	bl	80033f0 <memchr>
 8003020:	b138      	cbz	r0, 8003032 <_svfiprintf_r+0x142>
 8003022:	2340      	movs	r3, #64	; 0x40
 8003024:	1b40      	subs	r0, r0, r5
 8003026:	fa03 f000 	lsl.w	r0, r3, r0
 800302a:	9b04      	ldr	r3, [sp, #16]
 800302c:	3701      	adds	r7, #1
 800302e:	4303      	orrs	r3, r0
 8003030:	9304      	str	r3, [sp, #16]
 8003032:	7839      	ldrb	r1, [r7, #0]
 8003034:	2206      	movs	r2, #6
 8003036:	4827      	ldr	r0, [pc, #156]	; (80030d4 <_svfiprintf_r+0x1e4>)
 8003038:	1c7e      	adds	r6, r7, #1
 800303a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800303e:	f000 f9d7 	bl	80033f0 <memchr>
 8003042:	2800      	cmp	r0, #0
 8003044:	d038      	beq.n	80030b8 <_svfiprintf_r+0x1c8>
 8003046:	4b24      	ldr	r3, [pc, #144]	; (80030d8 <_svfiprintf_r+0x1e8>)
 8003048:	bb13      	cbnz	r3, 8003090 <_svfiprintf_r+0x1a0>
 800304a:	9b03      	ldr	r3, [sp, #12]
 800304c:	3307      	adds	r3, #7
 800304e:	f023 0307 	bic.w	r3, r3, #7
 8003052:	3308      	adds	r3, #8
 8003054:	9303      	str	r3, [sp, #12]
 8003056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003058:	444b      	add	r3, r9
 800305a:	9309      	str	r3, [sp, #36]	; 0x24
 800305c:	e76d      	b.n	8002f3a <_svfiprintf_r+0x4a>
 800305e:	fb05 3202 	mla	r2, r5, r2, r3
 8003062:	2001      	movs	r0, #1
 8003064:	460f      	mov	r7, r1
 8003066:	e7a6      	b.n	8002fb6 <_svfiprintf_r+0xc6>
 8003068:	2300      	movs	r3, #0
 800306a:	250a      	movs	r5, #10
 800306c:	4619      	mov	r1, r3
 800306e:	3701      	adds	r7, #1
 8003070:	9305      	str	r3, [sp, #20]
 8003072:	4638      	mov	r0, r7
 8003074:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003078:	3a30      	subs	r2, #48	; 0x30
 800307a:	2a09      	cmp	r2, #9
 800307c:	d903      	bls.n	8003086 <_svfiprintf_r+0x196>
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0c8      	beq.n	8003014 <_svfiprintf_r+0x124>
 8003082:	9105      	str	r1, [sp, #20]
 8003084:	e7c6      	b.n	8003014 <_svfiprintf_r+0x124>
 8003086:	fb05 2101 	mla	r1, r5, r1, r2
 800308a:	2301      	movs	r3, #1
 800308c:	4607      	mov	r7, r0
 800308e:	e7f0      	b.n	8003072 <_svfiprintf_r+0x182>
 8003090:	ab03      	add	r3, sp, #12
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	4622      	mov	r2, r4
 8003096:	4b11      	ldr	r3, [pc, #68]	; (80030dc <_svfiprintf_r+0x1ec>)
 8003098:	a904      	add	r1, sp, #16
 800309a:	4640      	mov	r0, r8
 800309c:	f3af 8000 	nop.w
 80030a0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80030a4:	4681      	mov	r9, r0
 80030a6:	d1d6      	bne.n	8003056 <_svfiprintf_r+0x166>
 80030a8:	89a3      	ldrh	r3, [r4, #12]
 80030aa:	065b      	lsls	r3, r3, #25
 80030ac:	f53f af35 	bmi.w	8002f1a <_svfiprintf_r+0x2a>
 80030b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030b2:	b01d      	add	sp, #116	; 0x74
 80030b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030b8:	ab03      	add	r3, sp, #12
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	4622      	mov	r2, r4
 80030be:	4b07      	ldr	r3, [pc, #28]	; (80030dc <_svfiprintf_r+0x1ec>)
 80030c0:	a904      	add	r1, sp, #16
 80030c2:	4640      	mov	r0, r8
 80030c4:	f000 f882 	bl	80031cc <_printf_i>
 80030c8:	e7ea      	b.n	80030a0 <_svfiprintf_r+0x1b0>
 80030ca:	bf00      	nop
 80030cc:	080039b0 	.word	0x080039b0
 80030d0:	080039b6 	.word	0x080039b6
 80030d4:	080039ba 	.word	0x080039ba
 80030d8:	00000000 	.word	0x00000000
 80030dc:	08002e3d 	.word	0x08002e3d

080030e0 <_printf_common>:
 80030e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030e4:	4691      	mov	r9, r2
 80030e6:	461f      	mov	r7, r3
 80030e8:	688a      	ldr	r2, [r1, #8]
 80030ea:	690b      	ldr	r3, [r1, #16]
 80030ec:	4606      	mov	r6, r0
 80030ee:	4293      	cmp	r3, r2
 80030f0:	bfb8      	it	lt
 80030f2:	4613      	movlt	r3, r2
 80030f4:	f8c9 3000 	str.w	r3, [r9]
 80030f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80030fc:	460c      	mov	r4, r1
 80030fe:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003102:	b112      	cbz	r2, 800310a <_printf_common+0x2a>
 8003104:	3301      	adds	r3, #1
 8003106:	f8c9 3000 	str.w	r3, [r9]
 800310a:	6823      	ldr	r3, [r4, #0]
 800310c:	0699      	lsls	r1, r3, #26
 800310e:	bf42      	ittt	mi
 8003110:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003114:	3302      	addmi	r3, #2
 8003116:	f8c9 3000 	strmi.w	r3, [r9]
 800311a:	6825      	ldr	r5, [r4, #0]
 800311c:	f015 0506 	ands.w	r5, r5, #6
 8003120:	d107      	bne.n	8003132 <_printf_common+0x52>
 8003122:	f104 0a19 	add.w	sl, r4, #25
 8003126:	68e3      	ldr	r3, [r4, #12]
 8003128:	f8d9 2000 	ldr.w	r2, [r9]
 800312c:	1a9b      	subs	r3, r3, r2
 800312e:	42ab      	cmp	r3, r5
 8003130:	dc29      	bgt.n	8003186 <_printf_common+0xa6>
 8003132:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003136:	6822      	ldr	r2, [r4, #0]
 8003138:	3300      	adds	r3, #0
 800313a:	bf18      	it	ne
 800313c:	2301      	movne	r3, #1
 800313e:	0692      	lsls	r2, r2, #26
 8003140:	d42e      	bmi.n	80031a0 <_printf_common+0xc0>
 8003142:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003146:	4639      	mov	r1, r7
 8003148:	4630      	mov	r0, r6
 800314a:	47c0      	blx	r8
 800314c:	3001      	adds	r0, #1
 800314e:	d021      	beq.n	8003194 <_printf_common+0xb4>
 8003150:	6823      	ldr	r3, [r4, #0]
 8003152:	68e5      	ldr	r5, [r4, #12]
 8003154:	f003 0306 	and.w	r3, r3, #6
 8003158:	2b04      	cmp	r3, #4
 800315a:	bf18      	it	ne
 800315c:	2500      	movne	r5, #0
 800315e:	f8d9 2000 	ldr.w	r2, [r9]
 8003162:	f04f 0900 	mov.w	r9, #0
 8003166:	bf08      	it	eq
 8003168:	1aad      	subeq	r5, r5, r2
 800316a:	68a3      	ldr	r3, [r4, #8]
 800316c:	6922      	ldr	r2, [r4, #16]
 800316e:	bf08      	it	eq
 8003170:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003174:	4293      	cmp	r3, r2
 8003176:	bfc4      	itt	gt
 8003178:	1a9b      	subgt	r3, r3, r2
 800317a:	18ed      	addgt	r5, r5, r3
 800317c:	341a      	adds	r4, #26
 800317e:	454d      	cmp	r5, r9
 8003180:	d11a      	bne.n	80031b8 <_printf_common+0xd8>
 8003182:	2000      	movs	r0, #0
 8003184:	e008      	b.n	8003198 <_printf_common+0xb8>
 8003186:	2301      	movs	r3, #1
 8003188:	4652      	mov	r2, sl
 800318a:	4639      	mov	r1, r7
 800318c:	4630      	mov	r0, r6
 800318e:	47c0      	blx	r8
 8003190:	3001      	adds	r0, #1
 8003192:	d103      	bne.n	800319c <_printf_common+0xbc>
 8003194:	f04f 30ff 	mov.w	r0, #4294967295
 8003198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800319c:	3501      	adds	r5, #1
 800319e:	e7c2      	b.n	8003126 <_printf_common+0x46>
 80031a0:	2030      	movs	r0, #48	; 0x30
 80031a2:	18e1      	adds	r1, r4, r3
 80031a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031ae:	4422      	add	r2, r4
 80031b0:	3302      	adds	r3, #2
 80031b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031b6:	e7c4      	b.n	8003142 <_printf_common+0x62>
 80031b8:	2301      	movs	r3, #1
 80031ba:	4622      	mov	r2, r4
 80031bc:	4639      	mov	r1, r7
 80031be:	4630      	mov	r0, r6
 80031c0:	47c0      	blx	r8
 80031c2:	3001      	adds	r0, #1
 80031c4:	d0e6      	beq.n	8003194 <_printf_common+0xb4>
 80031c6:	f109 0901 	add.w	r9, r9, #1
 80031ca:	e7d8      	b.n	800317e <_printf_common+0x9e>

080031cc <_printf_i>:
 80031cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80031d4:	460c      	mov	r4, r1
 80031d6:	7e09      	ldrb	r1, [r1, #24]
 80031d8:	b085      	sub	sp, #20
 80031da:	296e      	cmp	r1, #110	; 0x6e
 80031dc:	4617      	mov	r7, r2
 80031de:	4606      	mov	r6, r0
 80031e0:	4698      	mov	r8, r3
 80031e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80031e4:	f000 80b3 	beq.w	800334e <_printf_i+0x182>
 80031e8:	d822      	bhi.n	8003230 <_printf_i+0x64>
 80031ea:	2963      	cmp	r1, #99	; 0x63
 80031ec:	d036      	beq.n	800325c <_printf_i+0x90>
 80031ee:	d80a      	bhi.n	8003206 <_printf_i+0x3a>
 80031f0:	2900      	cmp	r1, #0
 80031f2:	f000 80b9 	beq.w	8003368 <_printf_i+0x19c>
 80031f6:	2958      	cmp	r1, #88	; 0x58
 80031f8:	f000 8083 	beq.w	8003302 <_printf_i+0x136>
 80031fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003200:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003204:	e032      	b.n	800326c <_printf_i+0xa0>
 8003206:	2964      	cmp	r1, #100	; 0x64
 8003208:	d001      	beq.n	800320e <_printf_i+0x42>
 800320a:	2969      	cmp	r1, #105	; 0x69
 800320c:	d1f6      	bne.n	80031fc <_printf_i+0x30>
 800320e:	6820      	ldr	r0, [r4, #0]
 8003210:	6813      	ldr	r3, [r2, #0]
 8003212:	0605      	lsls	r5, r0, #24
 8003214:	f103 0104 	add.w	r1, r3, #4
 8003218:	d52a      	bpl.n	8003270 <_printf_i+0xa4>
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6011      	str	r1, [r2, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	da03      	bge.n	800322a <_printf_i+0x5e>
 8003222:	222d      	movs	r2, #45	; 0x2d
 8003224:	425b      	negs	r3, r3
 8003226:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800322a:	486f      	ldr	r0, [pc, #444]	; (80033e8 <_printf_i+0x21c>)
 800322c:	220a      	movs	r2, #10
 800322e:	e039      	b.n	80032a4 <_printf_i+0xd8>
 8003230:	2973      	cmp	r1, #115	; 0x73
 8003232:	f000 809d 	beq.w	8003370 <_printf_i+0x1a4>
 8003236:	d808      	bhi.n	800324a <_printf_i+0x7e>
 8003238:	296f      	cmp	r1, #111	; 0x6f
 800323a:	d020      	beq.n	800327e <_printf_i+0xb2>
 800323c:	2970      	cmp	r1, #112	; 0x70
 800323e:	d1dd      	bne.n	80031fc <_printf_i+0x30>
 8003240:	6823      	ldr	r3, [r4, #0]
 8003242:	f043 0320 	orr.w	r3, r3, #32
 8003246:	6023      	str	r3, [r4, #0]
 8003248:	e003      	b.n	8003252 <_printf_i+0x86>
 800324a:	2975      	cmp	r1, #117	; 0x75
 800324c:	d017      	beq.n	800327e <_printf_i+0xb2>
 800324e:	2978      	cmp	r1, #120	; 0x78
 8003250:	d1d4      	bne.n	80031fc <_printf_i+0x30>
 8003252:	2378      	movs	r3, #120	; 0x78
 8003254:	4865      	ldr	r0, [pc, #404]	; (80033ec <_printf_i+0x220>)
 8003256:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800325a:	e055      	b.n	8003308 <_printf_i+0x13c>
 800325c:	6813      	ldr	r3, [r2, #0]
 800325e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003262:	1d19      	adds	r1, r3, #4
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6011      	str	r1, [r2, #0]
 8003268:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800326c:	2301      	movs	r3, #1
 800326e:	e08c      	b.n	800338a <_printf_i+0x1be>
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003276:	6011      	str	r1, [r2, #0]
 8003278:	bf18      	it	ne
 800327a:	b21b      	sxthne	r3, r3
 800327c:	e7cf      	b.n	800321e <_printf_i+0x52>
 800327e:	6813      	ldr	r3, [r2, #0]
 8003280:	6825      	ldr	r5, [r4, #0]
 8003282:	1d18      	adds	r0, r3, #4
 8003284:	6010      	str	r0, [r2, #0]
 8003286:	0628      	lsls	r0, r5, #24
 8003288:	d501      	bpl.n	800328e <_printf_i+0xc2>
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	e002      	b.n	8003294 <_printf_i+0xc8>
 800328e:	0668      	lsls	r0, r5, #25
 8003290:	d5fb      	bpl.n	800328a <_printf_i+0xbe>
 8003292:	881b      	ldrh	r3, [r3, #0]
 8003294:	296f      	cmp	r1, #111	; 0x6f
 8003296:	bf14      	ite	ne
 8003298:	220a      	movne	r2, #10
 800329a:	2208      	moveq	r2, #8
 800329c:	4852      	ldr	r0, [pc, #328]	; (80033e8 <_printf_i+0x21c>)
 800329e:	2100      	movs	r1, #0
 80032a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032a4:	6865      	ldr	r5, [r4, #4]
 80032a6:	2d00      	cmp	r5, #0
 80032a8:	60a5      	str	r5, [r4, #8]
 80032aa:	f2c0 8095 	blt.w	80033d8 <_printf_i+0x20c>
 80032ae:	6821      	ldr	r1, [r4, #0]
 80032b0:	f021 0104 	bic.w	r1, r1, #4
 80032b4:	6021      	str	r1, [r4, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d13d      	bne.n	8003336 <_printf_i+0x16a>
 80032ba:	2d00      	cmp	r5, #0
 80032bc:	f040 808e 	bne.w	80033dc <_printf_i+0x210>
 80032c0:	4665      	mov	r5, ip
 80032c2:	2a08      	cmp	r2, #8
 80032c4:	d10b      	bne.n	80032de <_printf_i+0x112>
 80032c6:	6823      	ldr	r3, [r4, #0]
 80032c8:	07db      	lsls	r3, r3, #31
 80032ca:	d508      	bpl.n	80032de <_printf_i+0x112>
 80032cc:	6923      	ldr	r3, [r4, #16]
 80032ce:	6862      	ldr	r2, [r4, #4]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	bfde      	ittt	le
 80032d4:	2330      	movle	r3, #48	; 0x30
 80032d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80032da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80032de:	ebac 0305 	sub.w	r3, ip, r5
 80032e2:	6123      	str	r3, [r4, #16]
 80032e4:	f8cd 8000 	str.w	r8, [sp]
 80032e8:	463b      	mov	r3, r7
 80032ea:	aa03      	add	r2, sp, #12
 80032ec:	4621      	mov	r1, r4
 80032ee:	4630      	mov	r0, r6
 80032f0:	f7ff fef6 	bl	80030e0 <_printf_common>
 80032f4:	3001      	adds	r0, #1
 80032f6:	d14d      	bne.n	8003394 <_printf_i+0x1c8>
 80032f8:	f04f 30ff 	mov.w	r0, #4294967295
 80032fc:	b005      	add	sp, #20
 80032fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003302:	4839      	ldr	r0, [pc, #228]	; (80033e8 <_printf_i+0x21c>)
 8003304:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003308:	6813      	ldr	r3, [r2, #0]
 800330a:	6821      	ldr	r1, [r4, #0]
 800330c:	1d1d      	adds	r5, r3, #4
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6015      	str	r5, [r2, #0]
 8003312:	060a      	lsls	r2, r1, #24
 8003314:	d50b      	bpl.n	800332e <_printf_i+0x162>
 8003316:	07ca      	lsls	r2, r1, #31
 8003318:	bf44      	itt	mi
 800331a:	f041 0120 	orrmi.w	r1, r1, #32
 800331e:	6021      	strmi	r1, [r4, #0]
 8003320:	b91b      	cbnz	r3, 800332a <_printf_i+0x15e>
 8003322:	6822      	ldr	r2, [r4, #0]
 8003324:	f022 0220 	bic.w	r2, r2, #32
 8003328:	6022      	str	r2, [r4, #0]
 800332a:	2210      	movs	r2, #16
 800332c:	e7b7      	b.n	800329e <_printf_i+0xd2>
 800332e:	064d      	lsls	r5, r1, #25
 8003330:	bf48      	it	mi
 8003332:	b29b      	uxthmi	r3, r3
 8003334:	e7ef      	b.n	8003316 <_printf_i+0x14a>
 8003336:	4665      	mov	r5, ip
 8003338:	fbb3 f1f2 	udiv	r1, r3, r2
 800333c:	fb02 3311 	mls	r3, r2, r1, r3
 8003340:	5cc3      	ldrb	r3, [r0, r3]
 8003342:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003346:	460b      	mov	r3, r1
 8003348:	2900      	cmp	r1, #0
 800334a:	d1f5      	bne.n	8003338 <_printf_i+0x16c>
 800334c:	e7b9      	b.n	80032c2 <_printf_i+0xf6>
 800334e:	6813      	ldr	r3, [r2, #0]
 8003350:	6825      	ldr	r5, [r4, #0]
 8003352:	1d18      	adds	r0, r3, #4
 8003354:	6961      	ldr	r1, [r4, #20]
 8003356:	6010      	str	r0, [r2, #0]
 8003358:	0628      	lsls	r0, r5, #24
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	d501      	bpl.n	8003362 <_printf_i+0x196>
 800335e:	6019      	str	r1, [r3, #0]
 8003360:	e002      	b.n	8003368 <_printf_i+0x19c>
 8003362:	066a      	lsls	r2, r5, #25
 8003364:	d5fb      	bpl.n	800335e <_printf_i+0x192>
 8003366:	8019      	strh	r1, [r3, #0]
 8003368:	2300      	movs	r3, #0
 800336a:	4665      	mov	r5, ip
 800336c:	6123      	str	r3, [r4, #16]
 800336e:	e7b9      	b.n	80032e4 <_printf_i+0x118>
 8003370:	6813      	ldr	r3, [r2, #0]
 8003372:	1d19      	adds	r1, r3, #4
 8003374:	6011      	str	r1, [r2, #0]
 8003376:	681d      	ldr	r5, [r3, #0]
 8003378:	6862      	ldr	r2, [r4, #4]
 800337a:	2100      	movs	r1, #0
 800337c:	4628      	mov	r0, r5
 800337e:	f000 f837 	bl	80033f0 <memchr>
 8003382:	b108      	cbz	r0, 8003388 <_printf_i+0x1bc>
 8003384:	1b40      	subs	r0, r0, r5
 8003386:	6060      	str	r0, [r4, #4]
 8003388:	6863      	ldr	r3, [r4, #4]
 800338a:	6123      	str	r3, [r4, #16]
 800338c:	2300      	movs	r3, #0
 800338e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003392:	e7a7      	b.n	80032e4 <_printf_i+0x118>
 8003394:	6923      	ldr	r3, [r4, #16]
 8003396:	462a      	mov	r2, r5
 8003398:	4639      	mov	r1, r7
 800339a:	4630      	mov	r0, r6
 800339c:	47c0      	blx	r8
 800339e:	3001      	adds	r0, #1
 80033a0:	d0aa      	beq.n	80032f8 <_printf_i+0x12c>
 80033a2:	6823      	ldr	r3, [r4, #0]
 80033a4:	079b      	lsls	r3, r3, #30
 80033a6:	d413      	bmi.n	80033d0 <_printf_i+0x204>
 80033a8:	68e0      	ldr	r0, [r4, #12]
 80033aa:	9b03      	ldr	r3, [sp, #12]
 80033ac:	4298      	cmp	r0, r3
 80033ae:	bfb8      	it	lt
 80033b0:	4618      	movlt	r0, r3
 80033b2:	e7a3      	b.n	80032fc <_printf_i+0x130>
 80033b4:	2301      	movs	r3, #1
 80033b6:	464a      	mov	r2, r9
 80033b8:	4639      	mov	r1, r7
 80033ba:	4630      	mov	r0, r6
 80033bc:	47c0      	blx	r8
 80033be:	3001      	adds	r0, #1
 80033c0:	d09a      	beq.n	80032f8 <_printf_i+0x12c>
 80033c2:	3501      	adds	r5, #1
 80033c4:	68e3      	ldr	r3, [r4, #12]
 80033c6:	9a03      	ldr	r2, [sp, #12]
 80033c8:	1a9b      	subs	r3, r3, r2
 80033ca:	42ab      	cmp	r3, r5
 80033cc:	dcf2      	bgt.n	80033b4 <_printf_i+0x1e8>
 80033ce:	e7eb      	b.n	80033a8 <_printf_i+0x1dc>
 80033d0:	2500      	movs	r5, #0
 80033d2:	f104 0919 	add.w	r9, r4, #25
 80033d6:	e7f5      	b.n	80033c4 <_printf_i+0x1f8>
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1ac      	bne.n	8003336 <_printf_i+0x16a>
 80033dc:	7803      	ldrb	r3, [r0, #0]
 80033de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033e6:	e76c      	b.n	80032c2 <_printf_i+0xf6>
 80033e8:	080039c1 	.word	0x080039c1
 80033ec:	080039d2 	.word	0x080039d2

080033f0 <memchr>:
 80033f0:	b510      	push	{r4, lr}
 80033f2:	b2c9      	uxtb	r1, r1
 80033f4:	4402      	add	r2, r0
 80033f6:	4290      	cmp	r0, r2
 80033f8:	4603      	mov	r3, r0
 80033fa:	d101      	bne.n	8003400 <memchr+0x10>
 80033fc:	2300      	movs	r3, #0
 80033fe:	e003      	b.n	8003408 <memchr+0x18>
 8003400:	781c      	ldrb	r4, [r3, #0]
 8003402:	3001      	adds	r0, #1
 8003404:	428c      	cmp	r4, r1
 8003406:	d1f6      	bne.n	80033f6 <memchr+0x6>
 8003408:	4618      	mov	r0, r3
 800340a:	bd10      	pop	{r4, pc}

0800340c <memmove>:
 800340c:	4288      	cmp	r0, r1
 800340e:	b510      	push	{r4, lr}
 8003410:	eb01 0302 	add.w	r3, r1, r2
 8003414:	d807      	bhi.n	8003426 <memmove+0x1a>
 8003416:	1e42      	subs	r2, r0, #1
 8003418:	4299      	cmp	r1, r3
 800341a:	d00a      	beq.n	8003432 <memmove+0x26>
 800341c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003420:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003424:	e7f8      	b.n	8003418 <memmove+0xc>
 8003426:	4283      	cmp	r3, r0
 8003428:	d9f5      	bls.n	8003416 <memmove+0xa>
 800342a:	1881      	adds	r1, r0, r2
 800342c:	1ad2      	subs	r2, r2, r3
 800342e:	42d3      	cmn	r3, r2
 8003430:	d100      	bne.n	8003434 <memmove+0x28>
 8003432:	bd10      	pop	{r4, pc}
 8003434:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003438:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800343c:	e7f7      	b.n	800342e <memmove+0x22>
	...

08003440 <_free_r>:
 8003440:	b538      	push	{r3, r4, r5, lr}
 8003442:	4605      	mov	r5, r0
 8003444:	2900      	cmp	r1, #0
 8003446:	d043      	beq.n	80034d0 <_free_r+0x90>
 8003448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800344c:	1f0c      	subs	r4, r1, #4
 800344e:	2b00      	cmp	r3, #0
 8003450:	bfb8      	it	lt
 8003452:	18e4      	addlt	r4, r4, r3
 8003454:	f000 f8d0 	bl	80035f8 <__malloc_lock>
 8003458:	4a1e      	ldr	r2, [pc, #120]	; (80034d4 <_free_r+0x94>)
 800345a:	6813      	ldr	r3, [r2, #0]
 800345c:	4610      	mov	r0, r2
 800345e:	b933      	cbnz	r3, 800346e <_free_r+0x2e>
 8003460:	6063      	str	r3, [r4, #4]
 8003462:	6014      	str	r4, [r2, #0]
 8003464:	4628      	mov	r0, r5
 8003466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800346a:	f000 b8c6 	b.w	80035fa <__malloc_unlock>
 800346e:	42a3      	cmp	r3, r4
 8003470:	d90b      	bls.n	800348a <_free_r+0x4a>
 8003472:	6821      	ldr	r1, [r4, #0]
 8003474:	1862      	adds	r2, r4, r1
 8003476:	4293      	cmp	r3, r2
 8003478:	bf01      	itttt	eq
 800347a:	681a      	ldreq	r2, [r3, #0]
 800347c:	685b      	ldreq	r3, [r3, #4]
 800347e:	1852      	addeq	r2, r2, r1
 8003480:	6022      	streq	r2, [r4, #0]
 8003482:	6063      	str	r3, [r4, #4]
 8003484:	6004      	str	r4, [r0, #0]
 8003486:	e7ed      	b.n	8003464 <_free_r+0x24>
 8003488:	4613      	mov	r3, r2
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	b10a      	cbz	r2, 8003492 <_free_r+0x52>
 800348e:	42a2      	cmp	r2, r4
 8003490:	d9fa      	bls.n	8003488 <_free_r+0x48>
 8003492:	6819      	ldr	r1, [r3, #0]
 8003494:	1858      	adds	r0, r3, r1
 8003496:	42a0      	cmp	r0, r4
 8003498:	d10b      	bne.n	80034b2 <_free_r+0x72>
 800349a:	6820      	ldr	r0, [r4, #0]
 800349c:	4401      	add	r1, r0
 800349e:	1858      	adds	r0, r3, r1
 80034a0:	4282      	cmp	r2, r0
 80034a2:	6019      	str	r1, [r3, #0]
 80034a4:	d1de      	bne.n	8003464 <_free_r+0x24>
 80034a6:	6810      	ldr	r0, [r2, #0]
 80034a8:	6852      	ldr	r2, [r2, #4]
 80034aa:	4401      	add	r1, r0
 80034ac:	6019      	str	r1, [r3, #0]
 80034ae:	605a      	str	r2, [r3, #4]
 80034b0:	e7d8      	b.n	8003464 <_free_r+0x24>
 80034b2:	d902      	bls.n	80034ba <_free_r+0x7a>
 80034b4:	230c      	movs	r3, #12
 80034b6:	602b      	str	r3, [r5, #0]
 80034b8:	e7d4      	b.n	8003464 <_free_r+0x24>
 80034ba:	6820      	ldr	r0, [r4, #0]
 80034bc:	1821      	adds	r1, r4, r0
 80034be:	428a      	cmp	r2, r1
 80034c0:	bf01      	itttt	eq
 80034c2:	6811      	ldreq	r1, [r2, #0]
 80034c4:	6852      	ldreq	r2, [r2, #4]
 80034c6:	1809      	addeq	r1, r1, r0
 80034c8:	6021      	streq	r1, [r4, #0]
 80034ca:	6062      	str	r2, [r4, #4]
 80034cc:	605c      	str	r4, [r3, #4]
 80034ce:	e7c9      	b.n	8003464 <_free_r+0x24>
 80034d0:	bd38      	pop	{r3, r4, r5, pc}
 80034d2:	bf00      	nop
 80034d4:	20000090 	.word	0x20000090

080034d8 <_malloc_r>:
 80034d8:	b570      	push	{r4, r5, r6, lr}
 80034da:	1ccd      	adds	r5, r1, #3
 80034dc:	f025 0503 	bic.w	r5, r5, #3
 80034e0:	3508      	adds	r5, #8
 80034e2:	2d0c      	cmp	r5, #12
 80034e4:	bf38      	it	cc
 80034e6:	250c      	movcc	r5, #12
 80034e8:	2d00      	cmp	r5, #0
 80034ea:	4606      	mov	r6, r0
 80034ec:	db01      	blt.n	80034f2 <_malloc_r+0x1a>
 80034ee:	42a9      	cmp	r1, r5
 80034f0:	d903      	bls.n	80034fa <_malloc_r+0x22>
 80034f2:	230c      	movs	r3, #12
 80034f4:	6033      	str	r3, [r6, #0]
 80034f6:	2000      	movs	r0, #0
 80034f8:	bd70      	pop	{r4, r5, r6, pc}
 80034fa:	f000 f87d 	bl	80035f8 <__malloc_lock>
 80034fe:	4a21      	ldr	r2, [pc, #132]	; (8003584 <_malloc_r+0xac>)
 8003500:	6814      	ldr	r4, [r2, #0]
 8003502:	4621      	mov	r1, r4
 8003504:	b991      	cbnz	r1, 800352c <_malloc_r+0x54>
 8003506:	4c20      	ldr	r4, [pc, #128]	; (8003588 <_malloc_r+0xb0>)
 8003508:	6823      	ldr	r3, [r4, #0]
 800350a:	b91b      	cbnz	r3, 8003514 <_malloc_r+0x3c>
 800350c:	4630      	mov	r0, r6
 800350e:	f000 f863 	bl	80035d8 <_sbrk_r>
 8003512:	6020      	str	r0, [r4, #0]
 8003514:	4629      	mov	r1, r5
 8003516:	4630      	mov	r0, r6
 8003518:	f000 f85e 	bl	80035d8 <_sbrk_r>
 800351c:	1c43      	adds	r3, r0, #1
 800351e:	d124      	bne.n	800356a <_malloc_r+0x92>
 8003520:	230c      	movs	r3, #12
 8003522:	4630      	mov	r0, r6
 8003524:	6033      	str	r3, [r6, #0]
 8003526:	f000 f868 	bl	80035fa <__malloc_unlock>
 800352a:	e7e4      	b.n	80034f6 <_malloc_r+0x1e>
 800352c:	680b      	ldr	r3, [r1, #0]
 800352e:	1b5b      	subs	r3, r3, r5
 8003530:	d418      	bmi.n	8003564 <_malloc_r+0x8c>
 8003532:	2b0b      	cmp	r3, #11
 8003534:	d90f      	bls.n	8003556 <_malloc_r+0x7e>
 8003536:	600b      	str	r3, [r1, #0]
 8003538:	18cc      	adds	r4, r1, r3
 800353a:	50cd      	str	r5, [r1, r3]
 800353c:	4630      	mov	r0, r6
 800353e:	f000 f85c 	bl	80035fa <__malloc_unlock>
 8003542:	f104 000b 	add.w	r0, r4, #11
 8003546:	1d23      	adds	r3, r4, #4
 8003548:	f020 0007 	bic.w	r0, r0, #7
 800354c:	1ac3      	subs	r3, r0, r3
 800354e:	d0d3      	beq.n	80034f8 <_malloc_r+0x20>
 8003550:	425a      	negs	r2, r3
 8003552:	50e2      	str	r2, [r4, r3]
 8003554:	e7d0      	b.n	80034f8 <_malloc_r+0x20>
 8003556:	684b      	ldr	r3, [r1, #4]
 8003558:	428c      	cmp	r4, r1
 800355a:	bf16      	itet	ne
 800355c:	6063      	strne	r3, [r4, #4]
 800355e:	6013      	streq	r3, [r2, #0]
 8003560:	460c      	movne	r4, r1
 8003562:	e7eb      	b.n	800353c <_malloc_r+0x64>
 8003564:	460c      	mov	r4, r1
 8003566:	6849      	ldr	r1, [r1, #4]
 8003568:	e7cc      	b.n	8003504 <_malloc_r+0x2c>
 800356a:	1cc4      	adds	r4, r0, #3
 800356c:	f024 0403 	bic.w	r4, r4, #3
 8003570:	42a0      	cmp	r0, r4
 8003572:	d005      	beq.n	8003580 <_malloc_r+0xa8>
 8003574:	1a21      	subs	r1, r4, r0
 8003576:	4630      	mov	r0, r6
 8003578:	f000 f82e 	bl	80035d8 <_sbrk_r>
 800357c:	3001      	adds	r0, #1
 800357e:	d0cf      	beq.n	8003520 <_malloc_r+0x48>
 8003580:	6025      	str	r5, [r4, #0]
 8003582:	e7db      	b.n	800353c <_malloc_r+0x64>
 8003584:	20000090 	.word	0x20000090
 8003588:	20000094 	.word	0x20000094

0800358c <_realloc_r>:
 800358c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800358e:	4607      	mov	r7, r0
 8003590:	4614      	mov	r4, r2
 8003592:	460e      	mov	r6, r1
 8003594:	b921      	cbnz	r1, 80035a0 <_realloc_r+0x14>
 8003596:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800359a:	4611      	mov	r1, r2
 800359c:	f7ff bf9c 	b.w	80034d8 <_malloc_r>
 80035a0:	b922      	cbnz	r2, 80035ac <_realloc_r+0x20>
 80035a2:	f7ff ff4d 	bl	8003440 <_free_r>
 80035a6:	4625      	mov	r5, r4
 80035a8:	4628      	mov	r0, r5
 80035aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035ac:	f000 f826 	bl	80035fc <_malloc_usable_size_r>
 80035b0:	42a0      	cmp	r0, r4
 80035b2:	d20f      	bcs.n	80035d4 <_realloc_r+0x48>
 80035b4:	4621      	mov	r1, r4
 80035b6:	4638      	mov	r0, r7
 80035b8:	f7ff ff8e 	bl	80034d8 <_malloc_r>
 80035bc:	4605      	mov	r5, r0
 80035be:	2800      	cmp	r0, #0
 80035c0:	d0f2      	beq.n	80035a8 <_realloc_r+0x1c>
 80035c2:	4631      	mov	r1, r6
 80035c4:	4622      	mov	r2, r4
 80035c6:	f7ff fc05 	bl	8002dd4 <memcpy>
 80035ca:	4631      	mov	r1, r6
 80035cc:	4638      	mov	r0, r7
 80035ce:	f7ff ff37 	bl	8003440 <_free_r>
 80035d2:	e7e9      	b.n	80035a8 <_realloc_r+0x1c>
 80035d4:	4635      	mov	r5, r6
 80035d6:	e7e7      	b.n	80035a8 <_realloc_r+0x1c>

080035d8 <_sbrk_r>:
 80035d8:	b538      	push	{r3, r4, r5, lr}
 80035da:	2300      	movs	r3, #0
 80035dc:	4c05      	ldr	r4, [pc, #20]	; (80035f4 <_sbrk_r+0x1c>)
 80035de:	4605      	mov	r5, r0
 80035e0:	4608      	mov	r0, r1
 80035e2:	6023      	str	r3, [r4, #0]
 80035e4:	f7fd f8a6 	bl	8000734 <_sbrk>
 80035e8:	1c43      	adds	r3, r0, #1
 80035ea:	d102      	bne.n	80035f2 <_sbrk_r+0x1a>
 80035ec:	6823      	ldr	r3, [r4, #0]
 80035ee:	b103      	cbz	r3, 80035f2 <_sbrk_r+0x1a>
 80035f0:	602b      	str	r3, [r5, #0]
 80035f2:	bd38      	pop	{r3, r4, r5, pc}
 80035f4:	200011c0 	.word	0x200011c0

080035f8 <__malloc_lock>:
 80035f8:	4770      	bx	lr

080035fa <__malloc_unlock>:
 80035fa:	4770      	bx	lr

080035fc <_malloc_usable_size_r>:
 80035fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003600:	1f18      	subs	r0, r3, #4
 8003602:	2b00      	cmp	r3, #0
 8003604:	bfbc      	itt	lt
 8003606:	580b      	ldrlt	r3, [r1, r0]
 8003608:	18c0      	addlt	r0, r0, r3
 800360a:	4770      	bx	lr

0800360c <_init>:
 800360c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800360e:	bf00      	nop
 8003610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003612:	bc08      	pop	{r3}
 8003614:	469e      	mov	lr, r3
 8003616:	4770      	bx	lr

08003618 <_fini>:
 8003618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800361a:	bf00      	nop
 800361c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800361e:	bc08      	pop	{r3}
 8003620:	469e      	mov	lr, r3
 8003622:	4770      	bx	lr
