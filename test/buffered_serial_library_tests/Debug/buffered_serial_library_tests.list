
buffered_serial_library_tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000579c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  080058b0  080058b0  000158b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e98  08005e98  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08005e98  08005e98  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e98  08005e98  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e98  08005e98  00015e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e9c  08005e9c  00015e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005ea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b28  200001dc  0800607c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d04  0800607c  00021d04  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aaea  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b2f  00000000  00000000  0002acef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007d8  00000000  00000000  0002c820  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000700  00000000  00000000  0002cff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000143fd  00000000  00000000  0002d6f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007964  00000000  00000000  00041af5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006ba7c  00000000  00000000  00049459  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b4ed5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028ac  00000000  00000000  000b4f50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08005894 	.word	0x08005894

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08005894 	.word	0x08005894

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b5b0      	push	{r4, r5, r7, lr}
 8000a8a:	f5ad 7d5e 	sub.w	sp, sp, #888	; 0x378
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a90:	f000 fb88 	bl	80011a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a94:	f000 f8e8 	bl	8000c68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a98:	f000 f97c 	bl	8000d94 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a9c:	f000 f954 	bl	8000d48 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000aa0:	f000 f928 	bl	8000cf4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  UART_HandleTypeDef *huarts[] = {&huart1};
 8000aa4:	4b6a      	ldr	r3, [pc, #424]	; (8000c50 <main+0x1c8>)
 8000aa6:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
  buffered_serial_init(huarts);
 8000aaa:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f002 fc40 	bl	8003334 <buffered_serial_init>
  buffered_serial_serial_descriptor *serial1 = buffered_serial_get_huart_serial_descriptor(&huart1);
 8000ab4:	4866      	ldr	r0, [pc, #408]	; (8000c50 <main+0x1c8>)
 8000ab6:	f002 fccf 	bl	8003458 <buffered_serial_get_huart_serial_descriptor>
 8000aba:	f8c7 0374 	str.w	r0, [r7, #884]	; 0x374
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //test 1

  uint8_t test1a[40] = "2A6V7W5NL5ZZC6AYE84NKZ6MVFMZ5DZSYD9TM3\r\n";
 8000abe:	4b65      	ldr	r3, [pc, #404]	; (8000c54 <main+0x1cc>)
 8000ac0:	f507 744f 	add.w	r4, r7, #828	; 0x33c
 8000ac4:	461d      	mov	r5, r3
 8000ac6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ac8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000acc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ace:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ad2:	e884 0003 	stmia.w	r4, {r0, r1}
  static_strings_string_descriptor *string_descriptor = static_strings_save(test1a);
 8000ad6:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8000ada:	4618      	mov	r0, r3
 8000adc:	f002 fbb2 	bl	8003244 <static_strings_save>
 8000ae0:	f8c7 0370 	str.w	r0, [r7, #880]	; 0x370
  buffered_serial_print_string(serial1,string_descriptor);
 8000ae4:	f8d7 1370 	ldr.w	r1, [r7, #880]	; 0x370
 8000ae8:	f8d7 0374 	ldr.w	r0, [r7, #884]	; 0x374
 8000aec:	f002 fd1e 	bl	800352c <buffered_serial_print_string>
  static_strings_deallocate(string_descriptor);
 8000af0:	f8d7 0370 	ldr.w	r0, [r7, #880]	; 0x370
 8000af4:	f002 fbcd 	bl	8003292 <static_strings_deallocate>

  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000afe:	4856      	ldr	r0, [pc, #344]	; (8000c58 <main+0x1d0>)
 8000b00:	f001 f87e 	bl	8001c00 <HAL_GPIO_WritePin>
  uint8_t test1br\n";
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	4a54      	ldr	r2, [pc, #336]	; (8000c5c <main+0x1d4>)
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	4611      	mov	r1, r2
 8000b0e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000b12:	461a      	mov	r2, r3
 8000b14:	f002 fe7a 	bl	800380c <memcpy>
  string_descriptor = static_strings_save(test1b);
 8000b18:	f107 031c 	add.w	r3, r7, #28
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f002 fb91 	bl	8003244 <static_strings_save>
 8000b22:	f8c7 0370 	str.w	r0, [r7, #880]	; 0x370

  uint16_t length = string_descriptor->length;
 8000b26:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 8000b2a:	889b      	ldrh	r3, [r3, #4]
 8000b2c:	f8a7 336e 	strh.w	r3, [r7, #878]	; 0x36e
  uint8_t length_string[10];
  sprintf((char *)length_string,"%08d",length);
 8000b30:	f8b7 236e 	ldrh.w	r2, [r7, #878]	; 0x36e
 8000b34:	f107 0310 	add.w	r3, r7, #16
 8000b38:	4949      	ldr	r1, [pc, #292]	; (8000c60 <main+0x1d8>)
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f003 fac8 	bl	80040d0 <siprintf>
  length_string[8] = '\r';
 8000b40:	f107 0310 	add.w	r3, r7, #16
 8000b44:	220d      	movs	r2, #13
 8000b46:	721a      	strb	r2, [r3, #8]
  length_string[9] = '\n';
 8000b48:	f107 0310 	add.w	r3, r7, #16
 8000b4c:	220a      	movs	r2, #10
 8000b4e:	725a      	strb	r2, [r3, #9]
  while(serial1->huart->gState == HAL_UART_STATE_BUSY_TX);
 8000b50:	bf00      	nop
 8000b52:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	2b21      	cmp	r3, #33	; 0x21
 8000b60:	d0f7      	beq.n	8000b52 <main+0xca>
  HAL_UART_Transmit_DMA(serial1->huart,length_string,10);
 8000b62:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f107 0110 	add.w	r1, r7, #16
 8000b6c:	220a      	movs	r2, #10
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f001 fcc8 	bl	8002504 <HAL_UART_Transmit_DMA>
  while(serial1->huart->gState == HAL_UART_STATE_BUSY_TX);
 8000b74:	bf00      	nop
 8000b76:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	2b21      	cmp	r3, #33	; 0x21
 8000b84:	d0f7      	beq.n	8000b76 <main+0xee>

  buffered_serial_print_string(serial1,string_descriptor);
 8000b86:	f8d7 1370 	ldr.w	r1, [r7, #880]	; 0x370
 8000b8a:	f8d7 0374 	ldr.w	r0, [r7, #884]	; 0x374
 8000b8e:	f002 fccd 	bl	800352c <buffered_serial_print_string>
  static_strings_deallocate(string_descriptor);
 8000b92:	f8d7 0370 	ldr.w	r0, [r7, #880]	; 0x370
 8000b96:	f002 fb7c 	bl	8003292 <static_strings_deallocate>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_SET);
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ba0:	482d      	ldr	r0, [pc, #180]	; (8000c58 <main+0x1d0>)
 8000ba2:	f001 f82d 	bl	8001c00 <HAL_GPIO_WritePin>

  // test 2

  uint8_t character = 'A';
 8000ba6:	2341      	movs	r3, #65	; 0x41
 8000ba8:	f887 336d 	strb.w	r3, [r7, #877]	; 0x36d
  buffered_serial_print_character(serial1,character);
 8000bac:	f897 336d 	ldrb.w	r3, [r7, #877]	; 0x36d
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f8d7 0374 	ldr.w	r0, [r7, #884]	; 0x374
 8000bb6:	f002 fca0 	bl	80034fa <buffered_serial_print_character>
  while (1)
  {

	  // test 3-7 Echo

	  if(buffered_serial_available(serial1) > 0){
 8000bba:	f8d7 0374 	ldr.w	r0, [r7, #884]	; 0x374
 8000bbe:	f002 fc73 	bl	80034a8 <buffered_serial_available>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d0f8      	beq.n	8000bba <main+0x132>
		  uint16_t available = buffered_serial_available(serial1);
 8000bc8:	f8d7 0374 	ldr.w	r0, [r7, #884]	; 0x374
 8000bcc:	f002 fc6c 	bl	80034a8 <buffered_serial_available>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	f8a7 336a 	strh.w	r3, [r7, #874]	; 0x36a
		  uint8_t available_string[10];
		  sprintf((char *)available_string,"%08d",available);
 8000bd6:	f8b7 236a 	ldrh.w	r2, [r7, #874]	; 0x36a
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	4920      	ldr	r1, [pc, #128]	; (8000c60 <main+0x1d8>)
 8000bde:	4618      	mov	r0, r3
 8000be0:	f003 fa76 	bl	80040d0 <siprintf>
		  available_string[8] = '\r';
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	220d      	movs	r2, #13
 8000be8:	721a      	strb	r2, [r3, #8]
		  available_string[9] = '\n';
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	220a      	movs	r2, #10
 8000bee:	725a      	strb	r2, [r3, #9]
		  HAL_UART_Transmit_DMA(serial1->huart,available_string,10);
 8000bf0:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	1d39      	adds	r1, r7, #4
 8000bf8:	220a      	movs	r2, #10
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f001 fc82 	bl	8002504 <HAL_UART_Transmit_DMA>
		  string_descriptor = buffered_serial_read_line(serial1);
 8000c00:	f8d7 0374 	ldr.w	r0, [r7, #884]	; 0x374
 8000c04:	f002 fce4 	bl	80035d0 <buffered_serial_read_line>
 8000c08:	f8c7 0370 	str.w	r0, [r7, #880]	; 0x370
		  if(string_descriptor != NULL){
 8000c0c:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d00a      	beq.n	8000c2a <main+0x1a2>
			  buffered_serial_print_string(serial1,string_descriptor);
 8000c14:	f8d7 1370 	ldr.w	r1, [r7, #880]	; 0x370
 8000c18:	f8d7 0374 	ldr.w	r0, [r7, #884]	; 0x374
 8000c1c:	f002 fc86 	bl	800352c <buffered_serial_print_string>
			  static_strings_deallocate(string_descriptor);
 8000c20:	f8d7 0370 	ldr.w	r0, [r7, #880]	; 0x370
 8000c24:	f002 fb35 	bl	8003292 <static_strings_deallocate>
 8000c28:	e7c7      	b.n	8000bba <main+0x132>
		  }
		  else{
			  HAL_UART_Transmit_DMA(serial1->huart,(uint8_t *)"fail\r\n",7);
 8000c2a:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2207      	movs	r2, #7
 8000c32:	490c      	ldr	r1, [pc, #48]	; (8000c64 <main+0x1dc>)
 8000c34:	4618      	mov	r0, r3
 8000c36:	f001 fc65 	bl	8002504 <HAL_UART_Transmit_DMA>
			  while(serial1->huart->gState == HAL_UART_STATE_BUSY_TX);
 8000c3a:	bf00      	nop
 8000c3c:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	2b21      	cmp	r3, #33	; 0x21
 8000c4a:	d0f7      	beq.n	8000c3c <main+0x1b4>
	  if(buffered_serial_available(serial1) > 0){
 8000c4c:	e7b5      	b.n	8000bba <main+0x132>
 8000c4e:	bf00      	nop
 8000c50:	200016ec 	.word	0x200016ec
 8000c54:	080058c0 	.word	0x080058c0
 8000c58:	40011000 	.word	0x40011000
 8000c5c:	080058ec 	.word	0x080058ec
 8000c60:	080058b0 	.word	0x080058b0
 8000c64:	080058b8 	.word	0x080058b8

08000c68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b090      	sub	sp, #64	; 0x40
 8000c6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6e:	f107 0318 	add.w	r3, r7, #24
 8000c72:	2228      	movs	r2, #40	; 0x28
 8000c74:	2100      	movs	r1, #0
 8000c76:	4618      	mov	r0, r3
 8000c78:	f002 fdd3 	bl	8003822 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
 8000c88:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c92:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c94:	2300      	movs	r3, #0
 8000c96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ca0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ca4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ca6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000caa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cac:	f107 0318 	add.w	r3, r7, #24
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f000 ffbd 	bl	8001c30 <HAL_RCC_OscConfig>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000cbc:	f000 f8b6 	bl	8000e2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc0:	230f      	movs	r3, #15
 8000cc2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ccc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	2102      	movs	r1, #2
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f001 fa28 	bl	8002130 <HAL_RCC_ClockConfig>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ce6:	f000 f8a1 	bl	8000e2c <Error_Handler>
  }
}
 8000cea:	bf00      	nop
 8000cec:	3740      	adds	r7, #64	; 0x40
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000cfa:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <MX_USART1_UART_Init+0x50>)
 8000cfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d18:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1e:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d2c:	f001 fb9c 	bl	8002468 <HAL_UART_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d36:	f000 f879 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200016ec 	.word	0x200016ec
 8000d44:	40013800 	.word	0x40013800

08000d48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <MX_DMA_Init+0x48>)
 8000d50:	695b      	ldr	r3, [r3, #20]
 8000d52:	4a0f      	ldr	r2, [pc, #60]	; (8000d90 <MX_DMA_Init+0x48>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6153      	str	r3, [r2, #20]
 8000d5a:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <MX_DMA_Init+0x48>)
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2100      	movs	r1, #0
 8000d6a:	200e      	movs	r0, #14
 8000d6c:	f000 fb53 	bl	8001416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000d70:	200e      	movs	r0, #14
 8000d72:	f000 fb6c 	bl	800144e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2100      	movs	r1, #0
 8000d7a:	200f      	movs	r0, #15
 8000d7c:	f000 fb4b 	bl	8001416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000d80:	200f      	movs	r0, #15
 8000d82:	f000 fb64 	bl	800144e <HAL_NVIC_EnableIRQ>

}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40021000 	.word	0x40021000

08000d94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b088      	sub	sp, #32
 8000d98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9a:	f107 0310 	add.w	r3, r7, #16
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da8:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <MX_GPIO_Init+0x90>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	4a1d      	ldr	r2, [pc, #116]	; (8000e24 <MX_GPIO_Init+0x90>)
 8000dae:	f043 0310 	orr.w	r3, r3, #16
 8000db2:	6193      	str	r3, [r2, #24]
 8000db4:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <MX_GPIO_Init+0x90>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	f003 0310 	and.w	r3, r3, #16
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc0:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <MX_GPIO_Init+0x90>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	4a17      	ldr	r2, [pc, #92]	; (8000e24 <MX_GPIO_Init+0x90>)
 8000dc6:	f043 0320 	orr.w	r3, r3, #32
 8000dca:	6193      	str	r3, [r2, #24]
 8000dcc:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <MX_GPIO_Init+0x90>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	f003 0320 	and.w	r3, r3, #32
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <MX_GPIO_Init+0x90>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	4a11      	ldr	r2, [pc, #68]	; (8000e24 <MX_GPIO_Init+0x90>)
 8000dde:	f043 0304 	orr.w	r3, r3, #4
 8000de2:	6193      	str	r3, [r2, #24]
 8000de4:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <MX_GPIO_Init+0x90>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f003 0304 	and.w	r3, r3, #4
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000df0:	2200      	movs	r2, #0
 8000df2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000df6:	480c      	ldr	r0, [pc, #48]	; (8000e28 <MX_GPIO_Init+0x94>)
 8000df8:	f000 ff02 	bl	8001c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000dfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0e:	f107 0310 	add.w	r3, r7, #16
 8000e12:	4619      	mov	r1, r3
 8000e14:	4804      	ldr	r0, [pc, #16]	; (8000e28 <MX_GPIO_Init+0x94>)
 8000e16:	f000 fd99 	bl	800194c <HAL_GPIO_Init>

}
 8000e1a:	bf00      	nop
 8000e1c:	3720      	adds	r7, #32
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40021000 	.word	0x40021000
 8000e28:	40011000 	.word	0x40011000

08000e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr

08000e38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <HAL_MspInit+0x5c>)
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	4a14      	ldr	r2, [pc, #80]	; (8000e94 <HAL_MspInit+0x5c>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6193      	str	r3, [r2, #24]
 8000e4a:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <HAL_MspInit+0x5c>)
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e56:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <HAL_MspInit+0x5c>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <HAL_MspInit+0x5c>)
 8000e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e60:	61d3      	str	r3, [r2, #28]
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <HAL_MspInit+0x5c>)
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <HAL_MspInit+0x60>)
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <HAL_MspInit+0x60>)
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	3714      	adds	r7, #20
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40010000 	.word	0x40010000

08000e9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b088      	sub	sp, #32
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 0310 	add.w	r3, r7, #16
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a47      	ldr	r2, [pc, #284]	; (8000fd4 <HAL_UART_MspInit+0x138>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	f040 8086 	bne.w	8000fca <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ebe:	4b46      	ldr	r3, [pc, #280]	; (8000fd8 <HAL_UART_MspInit+0x13c>)
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	4a45      	ldr	r2, [pc, #276]	; (8000fd8 <HAL_UART_MspInit+0x13c>)
 8000ec4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec8:	6193      	str	r3, [r2, #24]
 8000eca:	4b43      	ldr	r3, [pc, #268]	; (8000fd8 <HAL_UART_MspInit+0x13c>)
 8000ecc:	699b      	ldr	r3, [r3, #24]
 8000ece:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed6:	4b40      	ldr	r3, [pc, #256]	; (8000fd8 <HAL_UART_MspInit+0x13c>)
 8000ed8:	699b      	ldr	r3, [r3, #24]
 8000eda:	4a3f      	ldr	r2, [pc, #252]	; (8000fd8 <HAL_UART_MspInit+0x13c>)
 8000edc:	f043 0304 	orr.w	r3, r3, #4
 8000ee0:	6193      	str	r3, [r2, #24]
 8000ee2:	4b3d      	ldr	r3, [pc, #244]	; (8000fd8 <HAL_UART_MspInit+0x13c>)
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	f003 0304 	and.w	r3, r3, #4
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000eee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ef2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efc:	f107 0310 	add.w	r3, r7, #16
 8000f00:	4619      	mov	r1, r3
 8000f02:	4836      	ldr	r0, [pc, #216]	; (8000fdc <HAL_UART_MspInit+0x140>)
 8000f04:	f000 fd22 	bl	800194c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f16:	f107 0310 	add.w	r3, r7, #16
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	482f      	ldr	r0, [pc, #188]	; (8000fdc <HAL_UART_MspInit+0x140>)
 8000f1e:	f000 fd15 	bl	800194c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000f22:	4b2f      	ldr	r3, [pc, #188]	; (8000fe0 <HAL_UART_MspInit+0x144>)
 8000f24:	4a2f      	ldr	r2, [pc, #188]	; (8000fe4 <HAL_UART_MspInit+0x148>)
 8000f26:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f28:	4b2d      	ldr	r3, [pc, #180]	; (8000fe0 <HAL_UART_MspInit+0x144>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f2e:	4b2c      	ldr	r3, [pc, #176]	; (8000fe0 <HAL_UART_MspInit+0x144>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f34:	4b2a      	ldr	r3, [pc, #168]	; (8000fe0 <HAL_UART_MspInit+0x144>)
 8000f36:	2280      	movs	r2, #128	; 0x80
 8000f38:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f3a:	4b29      	ldr	r3, [pc, #164]	; (8000fe0 <HAL_UART_MspInit+0x144>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f40:	4b27      	ldr	r3, [pc, #156]	; (8000fe0 <HAL_UART_MspInit+0x144>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000f46:	4b26      	ldr	r3, [pc, #152]	; (8000fe0 <HAL_UART_MspInit+0x144>)
 8000f48:	2220      	movs	r2, #32
 8000f4a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f4c:	4b24      	ldr	r3, [pc, #144]	; (8000fe0 <HAL_UART_MspInit+0x144>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000f52:	4823      	ldr	r0, [pc, #140]	; (8000fe0 <HAL_UART_MspInit+0x144>)
 8000f54:	f000 fa96 	bl	8001484 <HAL_DMA_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8000f5e:	f7ff ff65 	bl	8000e2c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a1e      	ldr	r2, [pc, #120]	; (8000fe0 <HAL_UART_MspInit+0x144>)
 8000f66:	635a      	str	r2, [r3, #52]	; 0x34
 8000f68:	4a1d      	ldr	r2, [pc, #116]	; (8000fe0 <HAL_UART_MspInit+0x144>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000f6e:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <HAL_UART_MspInit+0x14c>)
 8000f70:	4a1e      	ldr	r2, [pc, #120]	; (8000fec <HAL_UART_MspInit+0x150>)
 8000f72:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f74:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <HAL_UART_MspInit+0x14c>)
 8000f76:	2210      	movs	r2, #16
 8000f78:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f7a:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <HAL_UART_MspInit+0x14c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <HAL_UART_MspInit+0x14c>)
 8000f82:	2280      	movs	r2, #128	; 0x80
 8000f84:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f86:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <HAL_UART_MspInit+0x14c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f8c:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <HAL_UART_MspInit+0x14c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <HAL_UART_MspInit+0x14c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f98:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <HAL_UART_MspInit+0x14c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000f9e:	4812      	ldr	r0, [pc, #72]	; (8000fe8 <HAL_UART_MspInit+0x14c>)
 8000fa0:	f000 fa70 	bl	8001484 <HAL_DMA_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8000faa:	f7ff ff3f 	bl	8000e2c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	; (8000fe8 <HAL_UART_MspInit+0x14c>)
 8000fb2:	631a      	str	r2, [r3, #48]	; 0x30
 8000fb4:	4a0c      	ldr	r2, [pc, #48]	; (8000fe8 <HAL_UART_MspInit+0x14c>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	2025      	movs	r0, #37	; 0x25
 8000fc0:	f000 fa29 	bl	8001416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fc4:	2025      	movs	r0, #37	; 0x25
 8000fc6:	f000 fa42 	bl	800144e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fca:	bf00      	nop
 8000fcc:	3720      	adds	r7, #32
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40013800 	.word	0x40013800
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40010800 	.word	0x40010800
 8000fe0:	200016a8 	.word	0x200016a8
 8000fe4:	40020058 	.word	0x40020058
 8000fe8:	2000127c 	.word	0x2000127c
 8000fec:	40020044 	.word	0x40020044

08000ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr

08000ffc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <HardFault_Handler+0x4>

08001002 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001006:	e7fe      	b.n	8001006 <MemManage_Handler+0x4>

08001008 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800100c:	e7fe      	b.n	800100c <BusFault_Handler+0x4>

0800100e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001012:	e7fe      	b.n	8001012 <UsageFault_Handler+0x4>

08001014 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr

08001020 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr

0800102c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr

08001038 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800103c:	f000 f8f8 	bl	8001230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}

08001044 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <DMA1_Channel4_IRQHandler+0x10>)
 800104a:	f000 fb4b 	bl	80016e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	2000127c 	.word	0x2000127c

08001058 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800105c:	4802      	ldr	r0, [pc, #8]	; (8001068 <DMA1_Channel5_IRQHandler+0x10>)
 800105e:	f000 fb41 	bl	80016e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200016a8 	.word	0x200016a8

0800106c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001070:	4803      	ldr	r0, [pc, #12]	; (8001080 <USART1_IRQHandler+0x14>)
 8001072:	f001 fb33 	bl	80026dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  buffered_serial_update_rx_buffer_data(&huart1);
 8001076:	4802      	ldr	r0, [pc, #8]	; (8001080 <USART1_IRQHandler+0x14>)
 8001078:	f002 fb40 	bl	80036fc <buffered_serial_update_rx_buffer_data>
  /* USER CODE END USART1_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	200016ec 	.word	0x200016ec

08001084 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800108c:	4a14      	ldr	r2, [pc, #80]	; (80010e0 <_sbrk+0x5c>)
 800108e:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <_sbrk+0x60>)
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001098:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <_sbrk+0x64>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d102      	bne.n	80010a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010a0:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <_sbrk+0x64>)
 80010a2:	4a12      	ldr	r2, [pc, #72]	; (80010ec <_sbrk+0x68>)
 80010a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <_sbrk+0x64>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d207      	bcs.n	80010c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010b4:	f002 fb80 	bl	80037b8 <__errno>
 80010b8:	4602      	mov	r2, r0
 80010ba:	230c      	movs	r3, #12
 80010bc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80010be:	f04f 33ff 	mov.w	r3, #4294967295
 80010c2:	e009      	b.n	80010d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <_sbrk+0x64>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ca:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <_sbrk+0x64>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	4a05      	ldr	r2, [pc, #20]	; (80010e8 <_sbrk+0x64>)
 80010d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010d6:	68fb      	ldr	r3, [r7, #12]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20005000 	.word	0x20005000
 80010e4:	00000400 	.word	0x00000400
 80010e8:	200001f8 	.word	0x200001f8
 80010ec:	20001d08 	.word	0x20001d08

080010f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80010f4:	4b15      	ldr	r3, [pc, #84]	; (800114c <SystemInit+0x5c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a14      	ldr	r2, [pc, #80]	; (800114c <SystemInit+0x5c>)
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <SystemInit+0x5c>)
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	4911      	ldr	r1, [pc, #68]	; (800114c <SystemInit+0x5c>)
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <SystemInit+0x60>)
 8001108:	4013      	ands	r3, r2
 800110a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <SystemInit+0x5c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a0e      	ldr	r2, [pc, #56]	; (800114c <SystemInit+0x5c>)
 8001112:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800111a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800111c:	4b0b      	ldr	r3, [pc, #44]	; (800114c <SystemInit+0x5c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a0a      	ldr	r2, [pc, #40]	; (800114c <SystemInit+0x5c>)
 8001122:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001126:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <SystemInit+0x5c>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	4a07      	ldr	r2, [pc, #28]	; (800114c <SystemInit+0x5c>)
 800112e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001132:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <SystemInit+0x5c>)
 8001136:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800113a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <SystemInit+0x64>)
 800113e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001142:	609a      	str	r2, [r3, #8]
#endif 
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr
 800114c:	40021000 	.word	0x40021000
 8001150:	f8ff0000 	.word	0xf8ff0000
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001158:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800115a:	e003      	b.n	8001164 <LoopCopyDataInit>

0800115c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800115e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001160:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001162:	3104      	adds	r1, #4

08001164 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001164:	480a      	ldr	r0, [pc, #40]	; (8001190 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001168:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800116a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800116c:	d3f6      	bcc.n	800115c <CopyDataInit>
  ldr r2, =_sbss
 800116e:	4a0a      	ldr	r2, [pc, #40]	; (8001198 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001170:	e002      	b.n	8001178 <LoopFillZerobss>

08001172 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001174:	f842 3b04 	str.w	r3, [r2], #4

08001178 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800117a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800117c:	d3f9      	bcc.n	8001172 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800117e:	f7ff ffb7 	bl	80010f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001182:	f002 fb1f 	bl	80037c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001186:	f7ff fc7f 	bl	8000a88 <main>
  bx lr
 800118a:	4770      	bx	lr
  ldr r3, =_sidata
 800118c:	08005ea0 	.word	0x08005ea0
  ldr r0, =_sdata
 8001190:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001194:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8001198:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 800119c:	20001d04 	.word	0x20001d04

080011a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011a0:	e7fe      	b.n	80011a0 <ADC1_2_IRQHandler>
	...

080011a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <HAL_Init+0x28>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a07      	ldr	r2, [pc, #28]	; (80011cc <HAL_Init+0x28>)
 80011ae:	f043 0310 	orr.w	r3, r3, #16
 80011b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b4:	2003      	movs	r0, #3
 80011b6:	f000 f923 	bl	8001400 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ba:	2000      	movs	r0, #0
 80011bc:	f000 f808 	bl	80011d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c0:	f7ff fe3a 	bl	8000e38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40022000 	.word	0x40022000

080011d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <HAL_InitTick+0x54>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_InitTick+0x58>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	4619      	mov	r1, r3
 80011e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 f93b 	bl	800146a <HAL_SYSTICK_Config>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e00e      	b.n	800121c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2b0f      	cmp	r3, #15
 8001202:	d80a      	bhi.n	800121a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001204:	2200      	movs	r2, #0
 8001206:	6879      	ldr	r1, [r7, #4]
 8001208:	f04f 30ff 	mov.w	r0, #4294967295
 800120c:	f000 f903 	bl	8001416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001210:	4a06      	ldr	r2, [pc, #24]	; (800122c <HAL_InitTick+0x5c>)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001216:	2300      	movs	r3, #0
 8001218:	e000      	b.n	800121c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
}
 800121c:	4618      	mov	r0, r3
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000000 	.word	0x20000000
 8001228:	20000008 	.word	0x20000008
 800122c:	20000004 	.word	0x20000004

08001230 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <HAL_IncTick+0x1c>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	461a      	mov	r2, r3
 800123a:	4b05      	ldr	r3, [pc, #20]	; (8001250 <HAL_IncTick+0x20>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4413      	add	r3, r2
 8001240:	4a03      	ldr	r2, [pc, #12]	; (8001250 <HAL_IncTick+0x20>)
 8001242:	6013      	str	r3, [r2, #0]
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr
 800124c:	20000008 	.word	0x20000008
 8001250:	20001cfc 	.word	0x20001cfc

08001254 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return uwTick;
 8001258:	4b02      	ldr	r3, [pc, #8]	; (8001264 <HAL_GetTick+0x10>)
 800125a:	681b      	ldr	r3, [r3, #0]
}
 800125c:	4618      	mov	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr
 8001264:	20001cfc 	.word	0x20001cfc

08001268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001284:	4013      	ands	r3, r2
 8001286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001290:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800129a:	4a04      	ldr	r2, [pc, #16]	; (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	60d3      	str	r3, [r2, #12]
}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b4:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <__NVIC_GetPriorityGrouping+0x18>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	0a1b      	lsrs	r3, r3, #8
 80012ba:	f003 0307 	and.w	r3, r3, #7
}
 80012be:	4618      	mov	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	db0b      	blt.n	80012f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	f003 021f 	and.w	r2, r3, #31
 80012e4:	4906      	ldr	r1, [pc, #24]	; (8001300 <__NVIC_EnableIRQ+0x34>)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	095b      	lsrs	r3, r3, #5
 80012ec:	2001      	movs	r0, #1
 80012ee:	fa00 f202 	lsl.w	r2, r0, r2
 80012f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr
 8001300:	e000e100 	.word	0xe000e100

08001304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	6039      	str	r1, [r7, #0]
 800130e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001314:	2b00      	cmp	r3, #0
 8001316:	db0a      	blt.n	800132e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	b2da      	uxtb	r2, r3
 800131c:	490c      	ldr	r1, [pc, #48]	; (8001350 <__NVIC_SetPriority+0x4c>)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	0112      	lsls	r2, r2, #4
 8001324:	b2d2      	uxtb	r2, r2
 8001326:	440b      	add	r3, r1
 8001328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800132c:	e00a      	b.n	8001344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4908      	ldr	r1, [pc, #32]	; (8001354 <__NVIC_SetPriority+0x50>)
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	3b04      	subs	r3, #4
 800133c:	0112      	lsls	r2, r2, #4
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	440b      	add	r3, r1
 8001342:	761a      	strb	r2, [r3, #24]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	e000e100 	.word	0xe000e100
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001358:	b480      	push	{r7}
 800135a:	b089      	sub	sp, #36	; 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f1c3 0307 	rsb	r3, r3, #7
 8001372:	2b04      	cmp	r3, #4
 8001374:	bf28      	it	cs
 8001376:	2304      	movcs	r3, #4
 8001378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3304      	adds	r3, #4
 800137e:	2b06      	cmp	r3, #6
 8001380:	d902      	bls.n	8001388 <NVIC_EncodePriority+0x30>
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3b03      	subs	r3, #3
 8001386:	e000      	b.n	800138a <NVIC_EncodePriority+0x32>
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138c:	f04f 32ff 	mov.w	r2, #4294967295
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43da      	mvns	r2, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	401a      	ands	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a0:	f04f 31ff 	mov.w	r1, #4294967295
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	fa01 f303 	lsl.w	r3, r1, r3
 80013aa:	43d9      	mvns	r1, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	4313      	orrs	r3, r2
         );
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3724      	adds	r7, #36	; 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr

080013bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013cc:	d301      	bcc.n	80013d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ce:	2301      	movs	r3, #1
 80013d0:	e00f      	b.n	80013f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d2:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <SysTick_Config+0x40>)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013da:	210f      	movs	r1, #15
 80013dc:	f04f 30ff 	mov.w	r0, #4294967295
 80013e0:	f7ff ff90 	bl	8001304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <SysTick_Config+0x40>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ea:	4b04      	ldr	r3, [pc, #16]	; (80013fc <SysTick_Config+0x40>)
 80013ec:	2207      	movs	r2, #7
 80013ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	e000e010 	.word	0xe000e010

08001400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ff2d 	bl	8001268 <__NVIC_SetPriorityGrouping>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001416:	b580      	push	{r7, lr}
 8001418:	b086      	sub	sp, #24
 800141a:	af00      	add	r7, sp, #0
 800141c:	4603      	mov	r3, r0
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
 8001422:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001428:	f7ff ff42 	bl	80012b0 <__NVIC_GetPriorityGrouping>
 800142c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	68b9      	ldr	r1, [r7, #8]
 8001432:	6978      	ldr	r0, [r7, #20]
 8001434:	f7ff ff90 	bl	8001358 <NVIC_EncodePriority>
 8001438:	4602      	mov	r2, r0
 800143a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff5f 	bl	8001304 <__NVIC_SetPriority>
}
 8001446:	bf00      	nop
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	4603      	mov	r3, r0
 8001456:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff35 	bl	80012cc <__NVIC_EnableIRQ>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff ffa2 	bl	80013bc <SysTick_Config>
 8001478:	4603      	mov	r3, r0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e043      	b.n	8001522 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	461a      	mov	r2, r3
 80014a0:	4b22      	ldr	r3, [pc, #136]	; (800152c <HAL_DMA_Init+0xa8>)
 80014a2:	4413      	add	r3, r2
 80014a4:	4a22      	ldr	r2, [pc, #136]	; (8001530 <HAL_DMA_Init+0xac>)
 80014a6:	fba2 2303 	umull	r2, r3, r2, r3
 80014aa:	091b      	lsrs	r3, r3, #4
 80014ac:	009a      	lsls	r2, r3, #2
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a1f      	ldr	r2, [pc, #124]	; (8001534 <HAL_DMA_Init+0xb0>)
 80014b6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2202      	movs	r2, #2
 80014bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80014ce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80014d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80014dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	4313      	orrs	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2201      	movs	r2, #1
 8001514:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr
 800152c:	bffdfff8 	.word	0xbffdfff8
 8001530:	cccccccd 	.word	0xcccccccd
 8001534:	40020000 	.word	0x40020000

08001538 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
 8001544:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001546:	2300      	movs	r3, #0
 8001548:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d101      	bne.n	8001558 <HAL_DMA_Start_IT+0x20>
 8001554:	2302      	movs	r3, #2
 8001556:	e04a      	b.n	80015ee <HAL_DMA_Start_IT+0xb6>
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001566:	2b01      	cmp	r3, #1
 8001568:	d13a      	bne.n	80015e0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2202      	movs	r2, #2
 800156e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2200      	movs	r2, #0
 8001576:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 0201 	bic.w	r2, r2, #1
 8001586:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	68b9      	ldr	r1, [r7, #8]
 800158e:	68f8      	ldr	r0, [r7, #12]
 8001590:	f000 f9ae 	bl	80018f0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001598:	2b00      	cmp	r3, #0
 800159a:	d008      	beq.n	80015ae <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f042 020e 	orr.w	r2, r2, #14
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	e00f      	b.n	80015ce <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f022 0204 	bic.w	r2, r2, #4
 80015bc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f042 020a 	orr.w	r2, r2, #10
 80015cc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f042 0201 	orr.w	r2, r2, #1
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	e005      	b.n	80015ec <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80015e8:	2302      	movs	r3, #2
 80015ea:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80015ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001600:	2300      	movs	r3, #0
 8001602:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800160a:	2b02      	cmp	r3, #2
 800160c:	d005      	beq.n	800161a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2204      	movs	r2, #4
 8001612:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	73fb      	strb	r3, [r7, #15]
 8001618:	e051      	b.n	80016be <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 020e 	bic.w	r2, r2, #14
 8001628:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 0201 	bic.w	r2, r2, #1
 8001638:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a22      	ldr	r2, [pc, #136]	; (80016c8 <HAL_DMA_Abort_IT+0xd0>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d029      	beq.n	8001698 <HAL_DMA_Abort_IT+0xa0>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a20      	ldr	r2, [pc, #128]	; (80016cc <HAL_DMA_Abort_IT+0xd4>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d022      	beq.n	8001694 <HAL_DMA_Abort_IT+0x9c>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a1f      	ldr	r2, [pc, #124]	; (80016d0 <HAL_DMA_Abort_IT+0xd8>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d01a      	beq.n	800168e <HAL_DMA_Abort_IT+0x96>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a1d      	ldr	r2, [pc, #116]	; (80016d4 <HAL_DMA_Abort_IT+0xdc>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d012      	beq.n	8001688 <HAL_DMA_Abort_IT+0x90>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a1c      	ldr	r2, [pc, #112]	; (80016d8 <HAL_DMA_Abort_IT+0xe0>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d00a      	beq.n	8001682 <HAL_DMA_Abort_IT+0x8a>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a1a      	ldr	r2, [pc, #104]	; (80016dc <HAL_DMA_Abort_IT+0xe4>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d102      	bne.n	800167c <HAL_DMA_Abort_IT+0x84>
 8001676:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800167a:	e00e      	b.n	800169a <HAL_DMA_Abort_IT+0xa2>
 800167c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001680:	e00b      	b.n	800169a <HAL_DMA_Abort_IT+0xa2>
 8001682:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001686:	e008      	b.n	800169a <HAL_DMA_Abort_IT+0xa2>
 8001688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800168c:	e005      	b.n	800169a <HAL_DMA_Abort_IT+0xa2>
 800168e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001692:	e002      	b.n	800169a <HAL_DMA_Abort_IT+0xa2>
 8001694:	2310      	movs	r3, #16
 8001696:	e000      	b.n	800169a <HAL_DMA_Abort_IT+0xa2>
 8001698:	2301      	movs	r3, #1
 800169a:	4a11      	ldr	r2, [pc, #68]	; (80016e0 <HAL_DMA_Abort_IT+0xe8>)
 800169c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	4798      	blx	r3
    } 
  }
  return status;
 80016be:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40020008 	.word	0x40020008
 80016cc:	4002001c 	.word	0x4002001c
 80016d0:	40020030 	.word	0x40020030
 80016d4:	40020044 	.word	0x40020044
 80016d8:	40020058 	.word	0x40020058
 80016dc:	4002006c 	.word	0x4002006c
 80016e0:	40020000 	.word	0x40020000

080016e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	2204      	movs	r2, #4
 8001702:	409a      	lsls	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	4013      	ands	r3, r2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d04f      	beq.n	80017ac <HAL_DMA_IRQHandler+0xc8>
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	f003 0304 	and.w	r3, r3, #4
 8001712:	2b00      	cmp	r3, #0
 8001714:	d04a      	beq.n	80017ac <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0320 	and.w	r3, r3, #32
 8001720:	2b00      	cmp	r3, #0
 8001722:	d107      	bne.n	8001734 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 0204 	bic.w	r2, r2, #4
 8001732:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a66      	ldr	r2, [pc, #408]	; (80018d4 <HAL_DMA_IRQHandler+0x1f0>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d029      	beq.n	8001792 <HAL_DMA_IRQHandler+0xae>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a65      	ldr	r2, [pc, #404]	; (80018d8 <HAL_DMA_IRQHandler+0x1f4>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d022      	beq.n	800178e <HAL_DMA_IRQHandler+0xaa>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a63      	ldr	r2, [pc, #396]	; (80018dc <HAL_DMA_IRQHandler+0x1f8>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d01a      	beq.n	8001788 <HAL_DMA_IRQHandler+0xa4>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a62      	ldr	r2, [pc, #392]	; (80018e0 <HAL_DMA_IRQHandler+0x1fc>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d012      	beq.n	8001782 <HAL_DMA_IRQHandler+0x9e>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a60      	ldr	r2, [pc, #384]	; (80018e4 <HAL_DMA_IRQHandler+0x200>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d00a      	beq.n	800177c <HAL_DMA_IRQHandler+0x98>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a5f      	ldr	r2, [pc, #380]	; (80018e8 <HAL_DMA_IRQHandler+0x204>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d102      	bne.n	8001776 <HAL_DMA_IRQHandler+0x92>
 8001770:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001774:	e00e      	b.n	8001794 <HAL_DMA_IRQHandler+0xb0>
 8001776:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800177a:	e00b      	b.n	8001794 <HAL_DMA_IRQHandler+0xb0>
 800177c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001780:	e008      	b.n	8001794 <HAL_DMA_IRQHandler+0xb0>
 8001782:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001786:	e005      	b.n	8001794 <HAL_DMA_IRQHandler+0xb0>
 8001788:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800178c:	e002      	b.n	8001794 <HAL_DMA_IRQHandler+0xb0>
 800178e:	2340      	movs	r3, #64	; 0x40
 8001790:	e000      	b.n	8001794 <HAL_DMA_IRQHandler+0xb0>
 8001792:	2304      	movs	r3, #4
 8001794:	4a55      	ldr	r2, [pc, #340]	; (80018ec <HAL_DMA_IRQHandler+0x208>)
 8001796:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179c:	2b00      	cmp	r3, #0
 800179e:	f000 8094 	beq.w	80018ca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80017aa:	e08e      	b.n	80018ca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b0:	2202      	movs	r2, #2
 80017b2:	409a      	lsls	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4013      	ands	r3, r2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d056      	beq.n	800186a <HAL_DMA_IRQHandler+0x186>
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d051      	beq.n	800186a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0320 	and.w	r3, r3, #32
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d10b      	bne.n	80017ec <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 020a 	bic.w	r2, r2, #10
 80017e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a38      	ldr	r2, [pc, #224]	; (80018d4 <HAL_DMA_IRQHandler+0x1f0>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d029      	beq.n	800184a <HAL_DMA_IRQHandler+0x166>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a37      	ldr	r2, [pc, #220]	; (80018d8 <HAL_DMA_IRQHandler+0x1f4>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d022      	beq.n	8001846 <HAL_DMA_IRQHandler+0x162>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a35      	ldr	r2, [pc, #212]	; (80018dc <HAL_DMA_IRQHandler+0x1f8>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d01a      	beq.n	8001840 <HAL_DMA_IRQHandler+0x15c>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a34      	ldr	r2, [pc, #208]	; (80018e0 <HAL_DMA_IRQHandler+0x1fc>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d012      	beq.n	800183a <HAL_DMA_IRQHandler+0x156>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a32      	ldr	r2, [pc, #200]	; (80018e4 <HAL_DMA_IRQHandler+0x200>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d00a      	beq.n	8001834 <HAL_DMA_IRQHandler+0x150>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a31      	ldr	r2, [pc, #196]	; (80018e8 <HAL_DMA_IRQHandler+0x204>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d102      	bne.n	800182e <HAL_DMA_IRQHandler+0x14a>
 8001828:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800182c:	e00e      	b.n	800184c <HAL_DMA_IRQHandler+0x168>
 800182e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001832:	e00b      	b.n	800184c <HAL_DMA_IRQHandler+0x168>
 8001834:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001838:	e008      	b.n	800184c <HAL_DMA_IRQHandler+0x168>
 800183a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800183e:	e005      	b.n	800184c <HAL_DMA_IRQHandler+0x168>
 8001840:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001844:	e002      	b.n	800184c <HAL_DMA_IRQHandler+0x168>
 8001846:	2320      	movs	r3, #32
 8001848:	e000      	b.n	800184c <HAL_DMA_IRQHandler+0x168>
 800184a:	2302      	movs	r3, #2
 800184c:	4a27      	ldr	r2, [pc, #156]	; (80018ec <HAL_DMA_IRQHandler+0x208>)
 800184e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185c:	2b00      	cmp	r3, #0
 800185e:	d034      	beq.n	80018ca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001868:	e02f      	b.n	80018ca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	2208      	movs	r2, #8
 8001870:	409a      	lsls	r2, r3
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	4013      	ands	r3, r2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d028      	beq.n	80018cc <HAL_DMA_IRQHandler+0x1e8>
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	f003 0308 	and.w	r3, r3, #8
 8001880:	2b00      	cmp	r3, #0
 8001882:	d023      	beq.n	80018cc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 020e 	bic.w	r2, r2, #14
 8001892:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800189c:	2101      	movs	r1, #1
 800189e:	fa01 f202 	lsl.w	r2, r1, r2
 80018a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2201      	movs	r2, #1
 80018ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d004      	beq.n	80018cc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	4798      	blx	r3
    }
  }
  return;
 80018ca:	bf00      	nop
 80018cc:	bf00      	nop
}
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40020008 	.word	0x40020008
 80018d8:	4002001c 	.word	0x4002001c
 80018dc:	40020030 	.word	0x40020030
 80018e0:	40020044 	.word	0x40020044
 80018e4:	40020058 	.word	0x40020058
 80018e8:	4002006c 	.word	0x4002006c
 80018ec:	40020000 	.word	0x40020000

080018f0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
 80018fc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001906:	2101      	movs	r1, #1
 8001908:	fa01 f202 	lsl.w	r2, r1, r2
 800190c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b10      	cmp	r3, #16
 800191c:	d108      	bne.n	8001930 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800192e:	e007      	b.n	8001940 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68ba      	ldr	r2, [r7, #8]
 8001936:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	60da      	str	r2, [r3, #12]
}
 8001940:	bf00      	nop
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr
	...

0800194c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800194c:	b480      	push	{r7}
 800194e:	b08b      	sub	sp, #44	; 0x2c
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001956:	2300      	movs	r3, #0
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800195a:	2300      	movs	r3, #0
 800195c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800195e:	e127      	b.n	8001bb0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001960:	2201      	movs	r2, #1
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	69fa      	ldr	r2, [r7, #28]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	429a      	cmp	r2, r3
 800197a:	f040 8116 	bne.w	8001baa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b12      	cmp	r3, #18
 8001984:	d034      	beq.n	80019f0 <HAL_GPIO_Init+0xa4>
 8001986:	2b12      	cmp	r3, #18
 8001988:	d80d      	bhi.n	80019a6 <HAL_GPIO_Init+0x5a>
 800198a:	2b02      	cmp	r3, #2
 800198c:	d02b      	beq.n	80019e6 <HAL_GPIO_Init+0x9a>
 800198e:	2b02      	cmp	r3, #2
 8001990:	d804      	bhi.n	800199c <HAL_GPIO_Init+0x50>
 8001992:	2b00      	cmp	r3, #0
 8001994:	d031      	beq.n	80019fa <HAL_GPIO_Init+0xae>
 8001996:	2b01      	cmp	r3, #1
 8001998:	d01c      	beq.n	80019d4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800199a:	e048      	b.n	8001a2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800199c:	2b03      	cmp	r3, #3
 800199e:	d043      	beq.n	8001a28 <HAL_GPIO_Init+0xdc>
 80019a0:	2b11      	cmp	r3, #17
 80019a2:	d01b      	beq.n	80019dc <HAL_GPIO_Init+0x90>
          break;
 80019a4:	e043      	b.n	8001a2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019a6:	4a89      	ldr	r2, [pc, #548]	; (8001bcc <HAL_GPIO_Init+0x280>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d026      	beq.n	80019fa <HAL_GPIO_Init+0xae>
 80019ac:	4a87      	ldr	r2, [pc, #540]	; (8001bcc <HAL_GPIO_Init+0x280>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d806      	bhi.n	80019c0 <HAL_GPIO_Init+0x74>
 80019b2:	4a87      	ldr	r2, [pc, #540]	; (8001bd0 <HAL_GPIO_Init+0x284>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d020      	beq.n	80019fa <HAL_GPIO_Init+0xae>
 80019b8:	4a86      	ldr	r2, [pc, #536]	; (8001bd4 <HAL_GPIO_Init+0x288>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d01d      	beq.n	80019fa <HAL_GPIO_Init+0xae>
          break;
 80019be:	e036      	b.n	8001a2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019c0:	4a85      	ldr	r2, [pc, #532]	; (8001bd8 <HAL_GPIO_Init+0x28c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d019      	beq.n	80019fa <HAL_GPIO_Init+0xae>
 80019c6:	4a85      	ldr	r2, [pc, #532]	; (8001bdc <HAL_GPIO_Init+0x290>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d016      	beq.n	80019fa <HAL_GPIO_Init+0xae>
 80019cc:	4a84      	ldr	r2, [pc, #528]	; (8001be0 <HAL_GPIO_Init+0x294>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d013      	beq.n	80019fa <HAL_GPIO_Init+0xae>
          break;
 80019d2:	e02c      	b.n	8001a2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	623b      	str	r3, [r7, #32]
          break;
 80019da:	e028      	b.n	8001a2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	3304      	adds	r3, #4
 80019e2:	623b      	str	r3, [r7, #32]
          break;
 80019e4:	e023      	b.n	8001a2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	3308      	adds	r3, #8
 80019ec:	623b      	str	r3, [r7, #32]
          break;
 80019ee:	e01e      	b.n	8001a2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	330c      	adds	r3, #12
 80019f6:	623b      	str	r3, [r7, #32]
          break;
 80019f8:	e019      	b.n	8001a2e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d102      	bne.n	8001a08 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a02:	2304      	movs	r3, #4
 8001a04:	623b      	str	r3, [r7, #32]
          break;
 8001a06:	e012      	b.n	8001a2e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d105      	bne.n	8001a1c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a10:	2308      	movs	r3, #8
 8001a12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	69fa      	ldr	r2, [r7, #28]
 8001a18:	611a      	str	r2, [r3, #16]
          break;
 8001a1a:	e008      	b.n	8001a2e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a1c:	2308      	movs	r3, #8
 8001a1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69fa      	ldr	r2, [r7, #28]
 8001a24:	615a      	str	r2, [r3, #20]
          break;
 8001a26:	e002      	b.n	8001a2e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	623b      	str	r3, [r7, #32]
          break;
 8001a2c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	2bff      	cmp	r3, #255	; 0xff
 8001a32:	d801      	bhi.n	8001a38 <HAL_GPIO_Init+0xec>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	e001      	b.n	8001a3c <HAL_GPIO_Init+0xf0>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3304      	adds	r3, #4
 8001a3c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	2bff      	cmp	r3, #255	; 0xff
 8001a42:	d802      	bhi.n	8001a4a <HAL_GPIO_Init+0xfe>
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	e002      	b.n	8001a50 <HAL_GPIO_Init+0x104>
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	3b08      	subs	r3, #8
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	210f      	movs	r1, #15
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	401a      	ands	r2, r3
 8001a62:	6a39      	ldr	r1, [r7, #32]
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f000 8096 	beq.w	8001baa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a7e:	4b59      	ldr	r3, [pc, #356]	; (8001be4 <HAL_GPIO_Init+0x298>)
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	4a58      	ldr	r2, [pc, #352]	; (8001be4 <HAL_GPIO_Init+0x298>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	6193      	str	r3, [r2, #24]
 8001a8a:	4b56      	ldr	r3, [pc, #344]	; (8001be4 <HAL_GPIO_Init+0x298>)
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a96:	4a54      	ldr	r2, [pc, #336]	; (8001be8 <HAL_GPIO_Init+0x29c>)
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	089b      	lsrs	r3, r3, #2
 8001a9c:	3302      	adds	r3, #2
 8001a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	220f      	movs	r2, #15
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a4b      	ldr	r2, [pc, #300]	; (8001bec <HAL_GPIO_Init+0x2a0>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d013      	beq.n	8001aea <HAL_GPIO_Init+0x19e>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a4a      	ldr	r2, [pc, #296]	; (8001bf0 <HAL_GPIO_Init+0x2a4>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d00d      	beq.n	8001ae6 <HAL_GPIO_Init+0x19a>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a49      	ldr	r2, [pc, #292]	; (8001bf4 <HAL_GPIO_Init+0x2a8>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d007      	beq.n	8001ae2 <HAL_GPIO_Init+0x196>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a48      	ldr	r2, [pc, #288]	; (8001bf8 <HAL_GPIO_Init+0x2ac>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d101      	bne.n	8001ade <HAL_GPIO_Init+0x192>
 8001ada:	2303      	movs	r3, #3
 8001adc:	e006      	b.n	8001aec <HAL_GPIO_Init+0x1a0>
 8001ade:	2304      	movs	r3, #4
 8001ae0:	e004      	b.n	8001aec <HAL_GPIO_Init+0x1a0>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e002      	b.n	8001aec <HAL_GPIO_Init+0x1a0>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <HAL_GPIO_Init+0x1a0>
 8001aea:	2300      	movs	r3, #0
 8001aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aee:	f002 0203 	and.w	r2, r2, #3
 8001af2:	0092      	lsls	r2, r2, #2
 8001af4:	4093      	lsls	r3, r2
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001afc:	493a      	ldr	r1, [pc, #232]	; (8001be8 <HAL_GPIO_Init+0x29c>)
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	089b      	lsrs	r3, r3, #2
 8001b02:	3302      	adds	r3, #2
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d006      	beq.n	8001b24 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b16:	4b39      	ldr	r3, [pc, #228]	; (8001bfc <HAL_GPIO_Init+0x2b0>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	4938      	ldr	r1, [pc, #224]	; (8001bfc <HAL_GPIO_Init+0x2b0>)
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	600b      	str	r3, [r1, #0]
 8001b22:	e006      	b.n	8001b32 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b24:	4b35      	ldr	r3, [pc, #212]	; (8001bfc <HAL_GPIO_Init+0x2b0>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	4933      	ldr	r1, [pc, #204]	; (8001bfc <HAL_GPIO_Init+0x2b0>)
 8001b2e:	4013      	ands	r3, r2
 8001b30:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d006      	beq.n	8001b4c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b3e:	4b2f      	ldr	r3, [pc, #188]	; (8001bfc <HAL_GPIO_Init+0x2b0>)
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	492e      	ldr	r1, [pc, #184]	; (8001bfc <HAL_GPIO_Init+0x2b0>)
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	604b      	str	r3, [r1, #4]
 8001b4a:	e006      	b.n	8001b5a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b4c:	4b2b      	ldr	r3, [pc, #172]	; (8001bfc <HAL_GPIO_Init+0x2b0>)
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	4929      	ldr	r1, [pc, #164]	; (8001bfc <HAL_GPIO_Init+0x2b0>)
 8001b56:	4013      	ands	r3, r2
 8001b58:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d006      	beq.n	8001b74 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b66:	4b25      	ldr	r3, [pc, #148]	; (8001bfc <HAL_GPIO_Init+0x2b0>)
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	4924      	ldr	r1, [pc, #144]	; (8001bfc <HAL_GPIO_Init+0x2b0>)
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	608b      	str	r3, [r1, #8]
 8001b72:	e006      	b.n	8001b82 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b74:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <HAL_GPIO_Init+0x2b0>)
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	491f      	ldr	r1, [pc, #124]	; (8001bfc <HAL_GPIO_Init+0x2b0>)
 8001b7e:	4013      	ands	r3, r2
 8001b80:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d006      	beq.n	8001b9c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b8e:	4b1b      	ldr	r3, [pc, #108]	; (8001bfc <HAL_GPIO_Init+0x2b0>)
 8001b90:	68da      	ldr	r2, [r3, #12]
 8001b92:	491a      	ldr	r1, [pc, #104]	; (8001bfc <HAL_GPIO_Init+0x2b0>)
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	60cb      	str	r3, [r1, #12]
 8001b9a:	e006      	b.n	8001baa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b9c:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <HAL_GPIO_Init+0x2b0>)
 8001b9e:	68da      	ldr	r2, [r3, #12]
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	4915      	ldr	r1, [pc, #84]	; (8001bfc <HAL_GPIO_Init+0x2b0>)
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	3301      	adds	r3, #1
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f47f aed0 	bne.w	8001960 <HAL_GPIO_Init+0x14>
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	372c      	adds	r7, #44	; 0x2c
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	10210000 	.word	0x10210000
 8001bd0:	10110000 	.word	0x10110000
 8001bd4:	10120000 	.word	0x10120000
 8001bd8:	10310000 	.word	0x10310000
 8001bdc:	10320000 	.word	0x10320000
 8001be0:	10220000 	.word	0x10220000
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40010000 	.word	0x40010000
 8001bec:	40010800 	.word	0x40010800
 8001bf0:	40010c00 	.word	0x40010c00
 8001bf4:	40011000 	.word	0x40011000
 8001bf8:	40011400 	.word	0x40011400
 8001bfc:	40010400 	.word	0x40010400

08001c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	807b      	strh	r3, [r7, #2]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c10:	787b      	ldrb	r3, [r7, #1]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c16:	887a      	ldrh	r2, [r7, #2]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c1c:	e003      	b.n	8001c26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c1e:	887b      	ldrh	r3, [r7, #2]
 8001c20:	041a      	lsls	r2, r3, #16
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	611a      	str	r2, [r3, #16]
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr

08001c30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e26c      	b.n	800211c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 8087 	beq.w	8001d5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c50:	4b92      	ldr	r3, [pc, #584]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 030c 	and.w	r3, r3, #12
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	d00c      	beq.n	8001c76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c5c:	4b8f      	ldr	r3, [pc, #572]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 030c 	and.w	r3, r3, #12
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	d112      	bne.n	8001c8e <HAL_RCC_OscConfig+0x5e>
 8001c68:	4b8c      	ldr	r3, [pc, #560]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c74:	d10b      	bne.n	8001c8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c76:	4b89      	ldr	r3, [pc, #548]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d06c      	beq.n	8001d5c <HAL_RCC_OscConfig+0x12c>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d168      	bne.n	8001d5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e246      	b.n	800211c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c96:	d106      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x76>
 8001c98:	4b80      	ldr	r3, [pc, #512]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a7f      	ldr	r2, [pc, #508]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca2:	6013      	str	r3, [r2, #0]
 8001ca4:	e02e      	b.n	8001d04 <HAL_RCC_OscConfig+0xd4>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d10c      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x98>
 8001cae:	4b7b      	ldr	r3, [pc, #492]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a7a      	ldr	r2, [pc, #488]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	4b78      	ldr	r3, [pc, #480]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a77      	ldr	r2, [pc, #476]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	e01d      	b.n	8001d04 <HAL_RCC_OscConfig+0xd4>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cd0:	d10c      	bne.n	8001cec <HAL_RCC_OscConfig+0xbc>
 8001cd2:	4b72      	ldr	r3, [pc, #456]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a71      	ldr	r2, [pc, #452]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	4b6f      	ldr	r3, [pc, #444]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a6e      	ldr	r2, [pc, #440]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	e00b      	b.n	8001d04 <HAL_RCC_OscConfig+0xd4>
 8001cec:	4b6b      	ldr	r3, [pc, #428]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a6a      	ldr	r2, [pc, #424]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	4b68      	ldr	r3, [pc, #416]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a67      	ldr	r2, [pc, #412]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d013      	beq.n	8001d34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0c:	f7ff faa2 	bl	8001254 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d14:	f7ff fa9e 	bl	8001254 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b64      	cmp	r3, #100	; 0x64
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e1fa      	b.n	800211c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d26:	4b5d      	ldr	r3, [pc, #372]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f0      	beq.n	8001d14 <HAL_RCC_OscConfig+0xe4>
 8001d32:	e014      	b.n	8001d5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d34:	f7ff fa8e 	bl	8001254 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d3c:	f7ff fa8a 	bl	8001254 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b64      	cmp	r3, #100	; 0x64
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e1e6      	b.n	800211c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4e:	4b53      	ldr	r3, [pc, #332]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0x10c>
 8001d5a:	e000      	b.n	8001d5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d063      	beq.n	8001e32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d6a:	4b4c      	ldr	r3, [pc, #304]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00b      	beq.n	8001d8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d76:	4b49      	ldr	r3, [pc, #292]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	d11c      	bne.n	8001dbc <HAL_RCC_OscConfig+0x18c>
 8001d82:	4b46      	ldr	r3, [pc, #280]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d116      	bne.n	8001dbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8e:	4b43      	ldr	r3, [pc, #268]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d005      	beq.n	8001da6 <HAL_RCC_OscConfig+0x176>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d001      	beq.n	8001da6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e1ba      	b.n	800211c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da6:	4b3d      	ldr	r3, [pc, #244]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	4939      	ldr	r1, [pc, #228]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dba:	e03a      	b.n	8001e32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d020      	beq.n	8001e06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dc4:	4b36      	ldr	r3, [pc, #216]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dca:	f7ff fa43 	bl	8001254 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dd2:	f7ff fa3f 	bl	8001254 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e19b      	b.n	800211c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de4:	4b2d      	ldr	r3, [pc, #180]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0f0      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df0:	4b2a      	ldr	r3, [pc, #168]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4927      	ldr	r1, [pc, #156]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	600b      	str	r3, [r1, #0]
 8001e04:	e015      	b.n	8001e32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e06:	4b26      	ldr	r3, [pc, #152]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0c:	f7ff fa22 	bl	8001254 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e14:	f7ff fa1e 	bl	8001254 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e17a      	b.n	800211c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e26:	4b1d      	ldr	r3, [pc, #116]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f0      	bne.n	8001e14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d03a      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d019      	beq.n	8001e7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e46:	4b17      	ldr	r3, [pc, #92]	; (8001ea4 <HAL_RCC_OscConfig+0x274>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4c:	f7ff fa02 	bl	8001254 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e54:	f7ff f9fe 	bl	8001254 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e15a      	b.n	800211c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e66:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0f0      	beq.n	8001e54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e72:	2001      	movs	r0, #1
 8001e74:	f000 fada 	bl	800242c <RCC_Delay>
 8001e78:	e01c      	b.n	8001eb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <HAL_RCC_OscConfig+0x274>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e80:	f7ff f9e8 	bl	8001254 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e86:	e00f      	b.n	8001ea8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e88:	f7ff f9e4 	bl	8001254 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d908      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e140      	b.n	800211c <HAL_RCC_OscConfig+0x4ec>
 8001e9a:	bf00      	nop
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	42420000 	.word	0x42420000
 8001ea4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea8:	4b9e      	ldr	r3, [pc, #632]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1e9      	bne.n	8001e88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 80a6 	beq.w	800200e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ec6:	4b97      	ldr	r3, [pc, #604]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10d      	bne.n	8001eee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed2:	4b94      	ldr	r3, [pc, #592]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	4a93      	ldr	r2, [pc, #588]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001edc:	61d3      	str	r3, [r2, #28]
 8001ede:	4b91      	ldr	r3, [pc, #580]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee6:	60bb      	str	r3, [r7, #8]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eea:	2301      	movs	r3, #1
 8001eec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eee:	4b8e      	ldr	r3, [pc, #568]	; (8002128 <HAL_RCC_OscConfig+0x4f8>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d118      	bne.n	8001f2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001efa:	4b8b      	ldr	r3, [pc, #556]	; (8002128 <HAL_RCC_OscConfig+0x4f8>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a8a      	ldr	r2, [pc, #552]	; (8002128 <HAL_RCC_OscConfig+0x4f8>)
 8001f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f06:	f7ff f9a5 	bl	8001254 <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f0e:	f7ff f9a1 	bl	8001254 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b64      	cmp	r3, #100	; 0x64
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e0fd      	b.n	800211c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f20:	4b81      	ldr	r3, [pc, #516]	; (8002128 <HAL_RCC_OscConfig+0x4f8>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0f0      	beq.n	8001f0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d106      	bne.n	8001f42 <HAL_RCC_OscConfig+0x312>
 8001f34:	4b7b      	ldr	r3, [pc, #492]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	4a7a      	ldr	r2, [pc, #488]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	6213      	str	r3, [r2, #32]
 8001f40:	e02d      	b.n	8001f9e <HAL_RCC_OscConfig+0x36e>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10c      	bne.n	8001f64 <HAL_RCC_OscConfig+0x334>
 8001f4a:	4b76      	ldr	r3, [pc, #472]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	4a75      	ldr	r2, [pc, #468]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001f50:	f023 0301 	bic.w	r3, r3, #1
 8001f54:	6213      	str	r3, [r2, #32]
 8001f56:	4b73      	ldr	r3, [pc, #460]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	4a72      	ldr	r2, [pc, #456]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001f5c:	f023 0304 	bic.w	r3, r3, #4
 8001f60:	6213      	str	r3, [r2, #32]
 8001f62:	e01c      	b.n	8001f9e <HAL_RCC_OscConfig+0x36e>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	2b05      	cmp	r3, #5
 8001f6a:	d10c      	bne.n	8001f86 <HAL_RCC_OscConfig+0x356>
 8001f6c:	4b6d      	ldr	r3, [pc, #436]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	4a6c      	ldr	r2, [pc, #432]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001f72:	f043 0304 	orr.w	r3, r3, #4
 8001f76:	6213      	str	r3, [r2, #32]
 8001f78:	4b6a      	ldr	r3, [pc, #424]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	4a69      	ldr	r2, [pc, #420]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	6213      	str	r3, [r2, #32]
 8001f84:	e00b      	b.n	8001f9e <HAL_RCC_OscConfig+0x36e>
 8001f86:	4b67      	ldr	r3, [pc, #412]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	4a66      	ldr	r2, [pc, #408]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001f8c:	f023 0301 	bic.w	r3, r3, #1
 8001f90:	6213      	str	r3, [r2, #32]
 8001f92:	4b64      	ldr	r3, [pc, #400]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	4a63      	ldr	r2, [pc, #396]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001f98:	f023 0304 	bic.w	r3, r3, #4
 8001f9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d015      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa6:	f7ff f955 	bl	8001254 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fac:	e00a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fae:	f7ff f951 	bl	8001254 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e0ab      	b.n	800211c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc4:	4b57      	ldr	r3, [pc, #348]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0ee      	beq.n	8001fae <HAL_RCC_OscConfig+0x37e>
 8001fd0:	e014      	b.n	8001ffc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd2:	f7ff f93f 	bl	8001254 <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd8:	e00a      	b.n	8001ff0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fda:	f7ff f93b 	bl	8001254 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e095      	b.n	800211c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff0:	4b4c      	ldr	r3, [pc, #304]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1ee      	bne.n	8001fda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ffc:	7dfb      	ldrb	r3, [r7, #23]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d105      	bne.n	800200e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002002:	4b48      	ldr	r3, [pc, #288]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	4a47      	ldr	r2, [pc, #284]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8002008:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800200c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 8081 	beq.w	800211a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002018:	4b42      	ldr	r3, [pc, #264]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 030c 	and.w	r3, r3, #12
 8002020:	2b08      	cmp	r3, #8
 8002022:	d061      	beq.n	80020e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	2b02      	cmp	r3, #2
 800202a:	d146      	bne.n	80020ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800202c:	4b3f      	ldr	r3, [pc, #252]	; (800212c <HAL_RCC_OscConfig+0x4fc>)
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002032:	f7ff f90f 	bl	8001254 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203a:	f7ff f90b 	bl	8001254 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e067      	b.n	800211c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800204c:	4b35      	ldr	r3, [pc, #212]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1f0      	bne.n	800203a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002060:	d108      	bne.n	8002074 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002062:	4b30      	ldr	r3, [pc, #192]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	492d      	ldr	r1, [pc, #180]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8002070:	4313      	orrs	r3, r2
 8002072:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002074:	4b2b      	ldr	r3, [pc, #172]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a19      	ldr	r1, [r3, #32]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	430b      	orrs	r3, r1
 8002086:	4927      	ldr	r1, [pc, #156]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8002088:	4313      	orrs	r3, r2
 800208a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800208c:	4b27      	ldr	r3, [pc, #156]	; (800212c <HAL_RCC_OscConfig+0x4fc>)
 800208e:	2201      	movs	r2, #1
 8002090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002092:	f7ff f8df 	bl	8001254 <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800209a:	f7ff f8db 	bl	8001254 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e037      	b.n	800211c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020ac:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0f0      	beq.n	800209a <HAL_RCC_OscConfig+0x46a>
 80020b8:	e02f      	b.n	800211a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ba:	4b1c      	ldr	r3, [pc, #112]	; (800212c <HAL_RCC_OscConfig+0x4fc>)
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c0:	f7ff f8c8 	bl	8001254 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c8:	f7ff f8c4 	bl	8001254 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e020      	b.n	800211c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020da:	4b12      	ldr	r3, [pc, #72]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0x498>
 80020e6:	e018      	b.n	800211a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	69db      	ldr	r3, [r3, #28]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d101      	bne.n	80020f4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e013      	b.n	800211c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020f4:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	429a      	cmp	r2, r3
 8002106:	d106      	bne.n	8002116 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002112:	429a      	cmp	r2, r3
 8002114:	d001      	beq.n	800211a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40021000 	.word	0x40021000
 8002128:	40007000 	.word	0x40007000
 800212c:	42420060 	.word	0x42420060

08002130 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e0d0      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002144:	4b6a      	ldr	r3, [pc, #424]	; (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	429a      	cmp	r2, r3
 8002150:	d910      	bls.n	8002174 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002152:	4b67      	ldr	r3, [pc, #412]	; (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f023 0207 	bic.w	r2, r3, #7
 800215a:	4965      	ldr	r1, [pc, #404]	; (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	4313      	orrs	r3, r2
 8002160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002162:	4b63      	ldr	r3, [pc, #396]	; (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d001      	beq.n	8002174 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e0b8      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d020      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d005      	beq.n	8002198 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800218c:	4b59      	ldr	r3, [pc, #356]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	4a58      	ldr	r2, [pc, #352]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002192:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002196:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0308 	and.w	r3, r3, #8
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021a4:	4b53      	ldr	r3, [pc, #332]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	4a52      	ldr	r2, [pc, #328]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b0:	4b50      	ldr	r3, [pc, #320]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	494d      	ldr	r1, [pc, #308]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d040      	beq.n	8002250 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d107      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d6:	4b47      	ldr	r3, [pc, #284]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d115      	bne.n	800220e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e07f      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d107      	bne.n	80021fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ee:	4b41      	ldr	r3, [pc, #260]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d109      	bne.n	800220e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e073      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fe:	4b3d      	ldr	r3, [pc, #244]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e06b      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800220e:	4b39      	ldr	r3, [pc, #228]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f023 0203 	bic.w	r2, r3, #3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	4936      	ldr	r1, [pc, #216]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	4313      	orrs	r3, r2
 800221e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002220:	f7ff f818 	bl	8001254 <HAL_GetTick>
 8002224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002226:	e00a      	b.n	800223e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002228:	f7ff f814 	bl	8001254 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	f241 3288 	movw	r2, #5000	; 0x1388
 8002236:	4293      	cmp	r3, r2
 8002238:	d901      	bls.n	800223e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e053      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223e:	4b2d      	ldr	r3, [pc, #180]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f003 020c 	and.w	r2, r3, #12
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	429a      	cmp	r2, r3
 800224e:	d1eb      	bne.n	8002228 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002250:	4b27      	ldr	r3, [pc, #156]	; (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	429a      	cmp	r2, r3
 800225c:	d210      	bcs.n	8002280 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225e:	4b24      	ldr	r3, [pc, #144]	; (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f023 0207 	bic.w	r2, r3, #7
 8002266:	4922      	ldr	r1, [pc, #136]	; (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	4313      	orrs	r3, r2
 800226c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800226e:	4b20      	ldr	r3, [pc, #128]	; (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d001      	beq.n	8002280 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e032      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	d008      	beq.n	800229e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800228c:	4b19      	ldr	r3, [pc, #100]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	4916      	ldr	r1, [pc, #88]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 800229a:	4313      	orrs	r3, r2
 800229c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d009      	beq.n	80022be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022aa:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	490e      	ldr	r1, [pc, #56]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022be:	f000 f821 	bl	8002304 <HAL_RCC_GetSysClockFreq>
 80022c2:	4601      	mov	r1, r0
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	091b      	lsrs	r3, r3, #4
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	4a0a      	ldr	r2, [pc, #40]	; (80022f8 <HAL_RCC_ClockConfig+0x1c8>)
 80022d0:	5cd3      	ldrb	r3, [r2, r3]
 80022d2:	fa21 f303 	lsr.w	r3, r1, r3
 80022d6:	4a09      	ldr	r2, [pc, #36]	; (80022fc <HAL_RCC_ClockConfig+0x1cc>)
 80022d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022da:	4b09      	ldr	r3, [pc, #36]	; (8002300 <HAL_RCC_ClockConfig+0x1d0>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe ff76 	bl	80011d0 <HAL_InitTick>

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40022000 	.word	0x40022000
 80022f4:	40021000 	.word	0x40021000
 80022f8:	08005c24 	.word	0x08005c24
 80022fc:	20000000 	.word	0x20000000
 8002300:	20000004 	.word	0x20000004

08002304 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002304:	b490      	push	{r4, r7}
 8002306:	b08a      	sub	sp, #40	; 0x28
 8002308:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800230a:	4b2a      	ldr	r3, [pc, #168]	; (80023b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800230c:	1d3c      	adds	r4, r7, #4
 800230e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002310:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002314:	4b28      	ldr	r3, [pc, #160]	; (80023b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]
 800231e:	2300      	movs	r3, #0
 8002320:	61bb      	str	r3, [r7, #24]
 8002322:	2300      	movs	r3, #0
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800232a:	2300      	movs	r3, #0
 800232c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800232e:	4b23      	ldr	r3, [pc, #140]	; (80023bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	f003 030c 	and.w	r3, r3, #12
 800233a:	2b04      	cmp	r3, #4
 800233c:	d002      	beq.n	8002344 <HAL_RCC_GetSysClockFreq+0x40>
 800233e:	2b08      	cmp	r3, #8
 8002340:	d003      	beq.n	800234a <HAL_RCC_GetSysClockFreq+0x46>
 8002342:	e02d      	b.n	80023a0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002344:	4b1e      	ldr	r3, [pc, #120]	; (80023c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002346:	623b      	str	r3, [r7, #32]
      break;
 8002348:	e02d      	b.n	80023a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	0c9b      	lsrs	r3, r3, #18
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002356:	4413      	add	r3, r2
 8002358:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800235c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d013      	beq.n	8002390 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002368:	4b14      	ldr	r3, [pc, #80]	; (80023bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	0c5b      	lsrs	r3, r3, #17
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002376:	4413      	add	r3, r2
 8002378:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800237c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	4a0f      	ldr	r2, [pc, #60]	; (80023c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002382:	fb02 f203 	mul.w	r2, r2, r3
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	fbb2 f3f3 	udiv	r3, r2, r3
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
 800238e:	e004      	b.n	800239a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	4a0c      	ldr	r2, [pc, #48]	; (80023c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002394:	fb02 f303 	mul.w	r3, r2, r3
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	623b      	str	r3, [r7, #32]
      break;
 800239e:	e002      	b.n	80023a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023a0:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023a2:	623b      	str	r3, [r7, #32]
      break;
 80023a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023a6:	6a3b      	ldr	r3, [r7, #32]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3728      	adds	r7, #40	; 0x28
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc90      	pop	{r4, r7}
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	08005c10 	.word	0x08005c10
 80023b8:	08005c20 	.word	0x08005c20
 80023bc:	40021000 	.word	0x40021000
 80023c0:	007a1200 	.word	0x007a1200
 80023c4:	003d0900 	.word	0x003d0900

080023c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023cc:	4b02      	ldr	r3, [pc, #8]	; (80023d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80023ce:	681b      	ldr	r3, [r3, #0]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr
 80023d8:	20000000 	.word	0x20000000

080023dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023e0:	f7ff fff2 	bl	80023c8 <HAL_RCC_GetHCLKFreq>
 80023e4:	4601      	mov	r1, r0
 80023e6:	4b05      	ldr	r3, [pc, #20]	; (80023fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	0a1b      	lsrs	r3, r3, #8
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	4a03      	ldr	r2, [pc, #12]	; (8002400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023f2:	5cd3      	ldrb	r3, [r2, r3]
 80023f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40021000 	.word	0x40021000
 8002400:	08005c34 	.word	0x08005c34

08002404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002408:	f7ff ffde 	bl	80023c8 <HAL_RCC_GetHCLKFreq>
 800240c:	4601      	mov	r1, r0
 800240e:	4b05      	ldr	r3, [pc, #20]	; (8002424 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	0adb      	lsrs	r3, r3, #11
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	4a03      	ldr	r2, [pc, #12]	; (8002428 <HAL_RCC_GetPCLK2Freq+0x24>)
 800241a:	5cd3      	ldrb	r3, [r2, r3]
 800241c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002420:	4618      	mov	r0, r3
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40021000 	.word	0x40021000
 8002428:	08005c34 	.word	0x08005c34

0800242c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002434:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <RCC_Delay+0x34>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a0a      	ldr	r2, [pc, #40]	; (8002464 <RCC_Delay+0x38>)
 800243a:	fba2 2303 	umull	r2, r3, r2, r3
 800243e:	0a5b      	lsrs	r3, r3, #9
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	fb02 f303 	mul.w	r3, r2, r3
 8002446:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002448:	bf00      	nop
  }
  while (Delay --);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	1e5a      	subs	r2, r3, #1
 800244e:	60fa      	str	r2, [r7, #12]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1f9      	bne.n	8002448 <RCC_Delay+0x1c>
}
 8002454:	bf00      	nop
 8002456:	3714      	adds	r7, #20
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	20000000 	.word	0x20000000
 8002464:	10624dd3 	.word	0x10624dd3

08002468 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e03f      	b.n	80024fa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d106      	bne.n	8002494 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7fe fd04 	bl	8000e9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2224      	movs	r2, #36	; 0x24
 8002498:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 fc2d 	bl	8002d0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	691a      	ldr	r2, [r3, #16]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	695a      	ldr	r2, [r3, #20]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68da      	ldr	r2, [r3, #12]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2220      	movs	r2, #32
 80024ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2220      	movs	r2, #32
 80024f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	4613      	mov	r3, r2
 8002510:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b20      	cmp	r3, #32
 800251c:	d153      	bne.n	80025c6 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d002      	beq.n	800252a <HAL_UART_Transmit_DMA+0x26>
 8002524:	88fb      	ldrh	r3, [r7, #6]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e04c      	b.n	80025c8 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002534:	2b01      	cmp	r3, #1
 8002536:	d101      	bne.n	800253c <HAL_UART_Transmit_DMA+0x38>
 8002538:	2302      	movs	r3, #2
 800253a:	e045      	b.n	80025c8 <HAL_UART_Transmit_DMA+0xc4>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	88fa      	ldrh	r2, [r7, #6]
 800254e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	88fa      	ldrh	r2, [r7, #6]
 8002554:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2221      	movs	r2, #33	; 0x21
 8002560:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002568:	4a19      	ldr	r2, [pc, #100]	; (80025d0 <HAL_UART_Transmit_DMA+0xcc>)
 800256a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002570:	4a18      	ldr	r2, [pc, #96]	; (80025d4 <HAL_UART_Transmit_DMA+0xd0>)
 8002572:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002578:	4a17      	ldr	r2, [pc, #92]	; (80025d8 <HAL_UART_Transmit_DMA+0xd4>)
 800257a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002580:	2200      	movs	r2, #0
 8002582:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8002584:	f107 0308 	add.w	r3, r7, #8
 8002588:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	6819      	ldr	r1, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	3304      	adds	r3, #4
 8002598:	461a      	mov	r2, r3
 800259a:	88fb      	ldrh	r3, [r7, #6]
 800259c:	f7fe ffcc 	bl	8001538 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025a8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	695a      	ldr	r2, [r3, #20]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025c0:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80025c2:	2300      	movs	r3, #0
 80025c4:	e000      	b.n	80025c8 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80025c6:	2302      	movs	r3, #2
  }
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	0800291d 	.word	0x0800291d
 80025d4:	0800296f 	.word	0x0800296f
 80025d8:	08002a0f 	.word	0x08002a0f

080025dc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	4613      	mov	r3, r2
 80025e8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b20      	cmp	r3, #32
 80025f4:	d166      	bne.n	80026c4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <HAL_UART_Receive_DMA+0x26>
 80025fc:	88fb      	ldrh	r3, [r7, #6]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e05f      	b.n	80026c6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800260c:	2b01      	cmp	r3, #1
 800260e:	d101      	bne.n	8002614 <HAL_UART_Receive_DMA+0x38>
 8002610:	2302      	movs	r3, #2
 8002612:	e058      	b.n	80026c6 <HAL_UART_Receive_DMA+0xea>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	88fa      	ldrh	r2, [r7, #6]
 8002626:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2222      	movs	r2, #34	; 0x22
 8002632:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800263a:	4a25      	ldr	r2, [pc, #148]	; (80026d0 <HAL_UART_Receive_DMA+0xf4>)
 800263c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002642:	4a24      	ldr	r2, [pc, #144]	; (80026d4 <HAL_UART_Receive_DMA+0xf8>)
 8002644:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800264a:	4a23      	ldr	r2, [pc, #140]	; (80026d8 <HAL_UART_Receive_DMA+0xfc>)
 800264c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002652:	2200      	movs	r2, #0
 8002654:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8002656:	f107 0308 	add.w	r3, r7, #8
 800265a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	3304      	adds	r3, #4
 8002666:	4619      	mov	r1, r3
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	88fb      	ldrh	r3, [r7, #6]
 800266e:	f7fe ff63 	bl	8001538 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	613b      	str	r3, [r7, #16]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800269e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695a      	ldr	r2, [r3, #20]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 0201 	orr.w	r2, r2, #1
 80026ae:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	695a      	ldr	r2, [r3, #20]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026be:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	e000      	b.n	80026c6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80026c4:	2302      	movs	r3, #2
  }
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	0800298b 	.word	0x0800298b
 80026d4:	080029f3 	.word	0x080029f3
 80026d8:	08002a0f 	.word	0x08002a0f

080026dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b088      	sub	sp, #32
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002700:	2300      	movs	r3, #0
 8002702:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10d      	bne.n	800272e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	f003 0320 	and.w	r3, r3, #32
 8002718:	2b00      	cmp	r3, #0
 800271a:	d008      	beq.n	800272e <HAL_UART_IRQHandler+0x52>
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	f003 0320 	and.w	r3, r3, #32
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 fa6e 	bl	8002c08 <UART_Receive_IT>
      return;
 800272c:	e0cc      	b.n	80028c8 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 80ab 	beq.w	800288c <HAL_UART_IRQHandler+0x1b0>
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b00      	cmp	r3, #0
 800273e:	d105      	bne.n	800274c <HAL_UART_IRQHandler+0x70>
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 80a0 	beq.w	800288c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00a      	beq.n	800276c <HAL_UART_IRQHandler+0x90>
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275c:	2b00      	cmp	r3, #0
 800275e:	d005      	beq.n	800276c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002764:	f043 0201 	orr.w	r2, r3, #1
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f003 0304 	and.w	r3, r3, #4
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00a      	beq.n	800278c <HAL_UART_IRQHandler+0xb0>
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002784:	f043 0202 	orr.w	r2, r3, #2
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00a      	beq.n	80027ac <HAL_UART_IRQHandler+0xd0>
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a4:	f043 0204 	orr.w	r2, r3, #4
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00a      	beq.n	80027cc <HAL_UART_IRQHandler+0xf0>
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c4:	f043 0208 	orr.w	r2, r3, #8
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d078      	beq.n	80028c6 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	f003 0320 	and.w	r3, r3, #32
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d007      	beq.n	80027ee <HAL_UART_IRQHandler+0x112>
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	f003 0320 	and.w	r3, r3, #32
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d002      	beq.n	80027ee <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 fa0d 	bl	8002c08 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	bf14      	ite	ne
 80027fc:	2301      	movne	r3, #1
 80027fe:	2300      	moveq	r3, #0
 8002800:	b2db      	uxtb	r3, r3
 8002802:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	2b00      	cmp	r3, #0
 800280e:	d102      	bne.n	8002816 <HAL_UART_IRQHandler+0x13a>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d031      	beq.n	800287a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f958 	bl	8002acc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002826:	2b00      	cmp	r3, #0
 8002828:	d023      	beq.n	8002872 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695a      	ldr	r2, [r3, #20]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002838:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283e:	2b00      	cmp	r3, #0
 8002840:	d013      	beq.n	800286a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002846:	4a22      	ldr	r2, [pc, #136]	; (80028d0 <HAL_UART_IRQHandler+0x1f4>)
 8002848:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800284e:	4618      	mov	r0, r3
 8002850:	f7fe fed2 	bl	80015f8 <HAL_DMA_Abort_IT>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d016      	beq.n	8002888 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800285e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002864:	4610      	mov	r0, r2
 8002866:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002868:	e00e      	b.n	8002888 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 ff90 	bl	8003790 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002870:	e00a      	b.n	8002888 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 ff8c 	bl	8003790 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002878:	e006      	b.n	8002888 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 ff88 	bl	8003790 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002886:	e01e      	b.n	80028c6 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002888:	bf00      	nop
    return;
 800288a:	e01c      	b.n	80028c6 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002892:	2b00      	cmp	r3, #0
 8002894:	d008      	beq.n	80028a8 <HAL_UART_IRQHandler+0x1cc>
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f944 	bl	8002b2e <UART_Transmit_IT>
    return;
 80028a6:	e00f      	b.n	80028c8 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00a      	beq.n	80028c8 <HAL_UART_IRQHandler+0x1ec>
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d005      	beq.n	80028c8 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 f98b 	bl	8002bd8 <UART_EndTransmit_IT>
    return;
 80028c2:	bf00      	nop
 80028c4:	e000      	b.n	80028c8 <HAL_UART_IRQHandler+0x1ec>
    return;
 80028c6:	bf00      	nop
  }
}
 80028c8:	3720      	adds	r7, #32
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	08002b07 	.word	0x08002b07

080028d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr

080028e6 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr

080028f8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr

0800290a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0320 	and.w	r3, r3, #32
 8002934:	2b00      	cmp	r3, #0
 8002936:	d113      	bne.n	8002960 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695a      	ldr	r2, [r3, #20]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800294c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68da      	ldr	r2, [r3, #12]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800295c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800295e:	e002      	b.n	8002966 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f7ff ffb7 	bl	80028d4 <HAL_UART_TxCpltCallback>
}
 8002966:	bf00      	nop
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b084      	sub	sp, #16
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f7ff ffb2 	bl	80028e6 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002982:	bf00      	nop
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b084      	sub	sp, #16
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0320 	and.w	r3, r3, #32
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d11e      	bne.n	80029e4 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029ba:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	695a      	ldr	r2, [r3, #20]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0201 	bic.w	r2, r2, #1
 80029ca:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	695a      	ldr	r2, [r3, #20]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029da:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2220      	movs	r2, #32
 80029e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f7ff ff87 	bl	80028f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029ea:	bf00      	nop
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b084      	sub	sp, #16
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f7ff ff82 	bl	800290a <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a06:	bf00      	nop
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b084      	sub	sp, #16
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002a16:	2300      	movs	r3, #0
 8002a18:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	bf14      	ite	ne
 8002a2e:	2301      	movne	r3, #1
 8002a30:	2300      	moveq	r3, #0
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b21      	cmp	r3, #33	; 0x21
 8002a40:	d108      	bne.n	8002a54 <UART_DMAError+0x46>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d005      	beq.n	8002a54 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002a4e:	68b8      	ldr	r0, [r7, #8]
 8002a50:	f000 f827 	bl	8002aa2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	bf14      	ite	ne
 8002a62:	2301      	movne	r3, #1
 8002a64:	2300      	moveq	r3, #0
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b22      	cmp	r3, #34	; 0x22
 8002a74:	d108      	bne.n	8002a88 <UART_DMAError+0x7a>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002a82:	68b8      	ldr	r0, [r7, #8]
 8002a84:	f000 f822 	bl	8002acc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8c:	f043 0210 	orr.w	r2, r3, #16
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a94:	68b8      	ldr	r0, [r7, #8]
 8002a96:	f000 fe7b 	bl	8003790 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a9a:	bf00      	nop
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68da      	ldr	r2, [r3, #12]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002ab8:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2220      	movs	r2, #32
 8002abe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr

08002acc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002ae2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695a      	ldr	r2, [r3, #20]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 0201 	bic.w	r2, r2, #1
 8002af2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2220      	movs	r2, #32
 8002af8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bc80      	pop	{r7}
 8002b04:	4770      	bx	lr

08002b06 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 fe35 	bl	8003790 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b26:	bf00      	nop
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b085      	sub	sp, #20
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b21      	cmp	r3, #33	; 0x21
 8002b40:	d144      	bne.n	8002bcc <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b4a:	d11a      	bne.n	8002b82 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	881b      	ldrh	r3, [r3, #0]
 8002b56:	461a      	mov	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b60:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d105      	bne.n	8002b76 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	1c9a      	adds	r2, r3, #2
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	621a      	str	r2, [r3, #32]
 8002b74:	e00e      	b.n	8002b94 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	1c5a      	adds	r2, r3, #1
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	621a      	str	r2, [r3, #32]
 8002b80:	e008      	b.n	8002b94 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	1c59      	adds	r1, r3, #1
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6211      	str	r1, [r2, #32]
 8002b8c:	781a      	ldrb	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10f      	bne.n	8002bc8 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68da      	ldr	r2, [r3, #12]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bb6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bc6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	e000      	b.n	8002bce <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002bcc:	2302      	movs	r3, #2
  }
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68da      	ldr	r2, [r3, #12]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f7ff fe6b 	bl	80028d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b22      	cmp	r3, #34	; 0x22
 8002c1a:	d171      	bne.n	8002d00 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c24:	d123      	bne.n	8002c6e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10e      	bne.n	8002c52 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4a:	1c9a      	adds	r2, r3, #2
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	629a      	str	r2, [r3, #40]	; 0x28
 8002c50:	e029      	b.n	8002ca6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c66:	1c5a      	adds	r2, r3, #1
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	629a      	str	r2, [r3, #40]	; 0x28
 8002c6c:	e01b      	b.n	8002ca6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10a      	bne.n	8002c8c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6858      	ldr	r0, [r3, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c80:	1c59      	adds	r1, r3, #1
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6291      	str	r1, [r2, #40]	; 0x28
 8002c86:	b2c2      	uxtb	r2, r0
 8002c88:	701a      	strb	r2, [r3, #0]
 8002c8a:	e00c      	b.n	8002ca6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c98:	1c58      	adds	r0, r3, #1
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	6288      	str	r0, [r1, #40]	; 0x28
 8002c9e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d120      	bne.n	8002cfc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68da      	ldr	r2, [r3, #12]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 0220 	bic.w	r2, r2, #32
 8002cc8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68da      	ldr	r2, [r3, #12]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cd8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	695a      	ldr	r2, [r3, #20]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 0201 	bic.w	r2, r2, #1
 8002ce8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2220      	movs	r2, #32
 8002cee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7ff fe00 	bl	80028f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	e002      	b.n	8002d02 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	e000      	b.n	8002d02 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002d00:	2302      	movs	r3, #2
  }
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
	...

08002d0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68da      	ldr	r2, [r3, #12]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689a      	ldr	r2, [r3, #8]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002d46:	f023 030c 	bic.w	r3, r3, #12
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6812      	ldr	r2, [r2, #0]
 8002d4e:	68f9      	ldr	r1, [r7, #12]
 8002d50:	430b      	orrs	r3, r1
 8002d52:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699a      	ldr	r2, [r3, #24]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a52      	ldr	r2, [pc, #328]	; (8002eb8 <UART_SetConfig+0x1ac>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d14e      	bne.n	8002e12 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d74:	f7ff fb46 	bl	8002404 <HAL_RCC_GetPCLK2Freq>
 8002d78:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	009a      	lsls	r2, r3, #2
 8002d84:	441a      	add	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d90:	4a4a      	ldr	r2, [pc, #296]	; (8002ebc <UART_SetConfig+0x1b0>)
 8002d92:	fba2 2303 	umull	r2, r3, r2, r3
 8002d96:	095b      	lsrs	r3, r3, #5
 8002d98:	0119      	lsls	r1, r3, #4
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	009a      	lsls	r2, r3, #2
 8002da4:	441a      	add	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	fbb2 f2f3 	udiv	r2, r2, r3
 8002db0:	4b42      	ldr	r3, [pc, #264]	; (8002ebc <UART_SetConfig+0x1b0>)
 8002db2:	fba3 0302 	umull	r0, r3, r3, r2
 8002db6:	095b      	lsrs	r3, r3, #5
 8002db8:	2064      	movs	r0, #100	; 0x64
 8002dba:	fb00 f303 	mul.w	r3, r0, r3
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	011b      	lsls	r3, r3, #4
 8002dc2:	3332      	adds	r3, #50	; 0x32
 8002dc4:	4a3d      	ldr	r2, [pc, #244]	; (8002ebc <UART_SetConfig+0x1b0>)
 8002dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dca:	095b      	lsrs	r3, r3, #5
 8002dcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dd0:	4419      	add	r1, r3
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	009a      	lsls	r2, r3, #2
 8002ddc:	441a      	add	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002de8:	4b34      	ldr	r3, [pc, #208]	; (8002ebc <UART_SetConfig+0x1b0>)
 8002dea:	fba3 0302 	umull	r0, r3, r3, r2
 8002dee:	095b      	lsrs	r3, r3, #5
 8002df0:	2064      	movs	r0, #100	; 0x64
 8002df2:	fb00 f303 	mul.w	r3, r0, r3
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	3332      	adds	r3, #50	; 0x32
 8002dfc:	4a2f      	ldr	r2, [pc, #188]	; (8002ebc <UART_SetConfig+0x1b0>)
 8002dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002e02:	095b      	lsrs	r3, r3, #5
 8002e04:	f003 020f 	and.w	r2, r3, #15
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	440a      	add	r2, r1
 8002e0e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002e10:	e04d      	b.n	8002eae <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e12:	f7ff fae3 	bl	80023dc <HAL_RCC_GetPCLK1Freq>
 8002e16:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e18:	68ba      	ldr	r2, [r7, #8]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	009a      	lsls	r2, r3, #2
 8002e22:	441a      	add	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2e:	4a23      	ldr	r2, [pc, #140]	; (8002ebc <UART_SetConfig+0x1b0>)
 8002e30:	fba2 2303 	umull	r2, r3, r2, r3
 8002e34:	095b      	lsrs	r3, r3, #5
 8002e36:	0119      	lsls	r1, r3, #4
 8002e38:	68ba      	ldr	r2, [r7, #8]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	009a      	lsls	r2, r3, #2
 8002e42:	441a      	add	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e4e:	4b1b      	ldr	r3, [pc, #108]	; (8002ebc <UART_SetConfig+0x1b0>)
 8002e50:	fba3 0302 	umull	r0, r3, r3, r2
 8002e54:	095b      	lsrs	r3, r3, #5
 8002e56:	2064      	movs	r0, #100	; 0x64
 8002e58:	fb00 f303 	mul.w	r3, r0, r3
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	011b      	lsls	r3, r3, #4
 8002e60:	3332      	adds	r3, #50	; 0x32
 8002e62:	4a16      	ldr	r2, [pc, #88]	; (8002ebc <UART_SetConfig+0x1b0>)
 8002e64:	fba2 2303 	umull	r2, r3, r2, r3
 8002e68:	095b      	lsrs	r3, r3, #5
 8002e6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e6e:	4419      	add	r1, r3
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	4613      	mov	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	009a      	lsls	r2, r3, #2
 8002e7a:	441a      	add	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e86:	4b0d      	ldr	r3, [pc, #52]	; (8002ebc <UART_SetConfig+0x1b0>)
 8002e88:	fba3 0302 	umull	r0, r3, r3, r2
 8002e8c:	095b      	lsrs	r3, r3, #5
 8002e8e:	2064      	movs	r0, #100	; 0x64
 8002e90:	fb00 f303 	mul.w	r3, r0, r3
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	011b      	lsls	r3, r3, #4
 8002e98:	3332      	adds	r3, #50	; 0x32
 8002e9a:	4a08      	ldr	r2, [pc, #32]	; (8002ebc <UART_SetConfig+0x1b0>)
 8002e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea0:	095b      	lsrs	r3, r3, #5
 8002ea2:	f003 020f 	and.w	r2, r3, #15
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	440a      	add	r2, r1
 8002eac:	609a      	str	r2, [r3, #8]
}
 8002eae:	bf00      	nop
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40013800 	.word	0x40013800
 8002ebc:	51eb851f 	.word	0x51eb851f

08002ec0 <static_strings_init>:

#include "static_strings.h"

static_strings_string_splitter_parameters static_strings_string_splitter = {NULL,'\0'};

void static_strings_init(){
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	607b      	str	r3, [r7, #4]
 8002eca:	e018      	b.n	8002efe <static_strings_init+0x3e>
		static_strings_very_short_strings_descriptors[i].string = static_strings_very_short_string_memory[i];
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2232      	movs	r2, #50	; 0x32
 8002ed0:	fb02 f303 	mul.w	r3, r2, r3
 8002ed4:	4a4d      	ldr	r2, [pc, #308]	; (800300c <static_strings_init+0x14c>)
 8002ed6:	441a      	add	r2, r3
 8002ed8:	494d      	ldr	r1, [pc, #308]	; (8003010 <static_strings_init+0x150>)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_very_short_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_VERY_SHORT;
 8002ee0:	4a4b      	ldr	r2, [pc, #300]	; (8003010 <static_strings_init+0x150>)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	2200      	movs	r2, #0
 8002eea:	719a      	strb	r2, [r3, #6]
		static_strings_very_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 8002eec:	4a48      	ldr	r2, [pc, #288]	; (8003010 <static_strings_init+0x150>)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3301      	adds	r3, #1
 8002efc:	607b      	str	r3, [r7, #4]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b09      	cmp	r3, #9
 8002f02:	dde3      	ble.n	8002ecc <static_strings_init+0xc>
	}
	for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 8002f04:	2300      	movs	r3, #0
 8002f06:	607b      	str	r3, [r7, #4]
 8002f08:	e018      	b.n	8002f3c <static_strings_init+0x7c>
		static_strings_short_strings_descriptors[i].string = static_strings_short_string_memory[i];
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2264      	movs	r2, #100	; 0x64
 8002f0e:	fb02 f303 	mul.w	r3, r2, r3
 8002f12:	4a40      	ldr	r2, [pc, #256]	; (8003014 <static_strings_init+0x154>)
 8002f14:	441a      	add	r2, r3
 8002f16:	4940      	ldr	r1, [pc, #256]	; (8003018 <static_strings_init+0x158>)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_short_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_SHORT;
 8002f1e:	4a3e      	ldr	r2, [pc, #248]	; (8003018 <static_strings_init+0x158>)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	4413      	add	r3, r2
 8002f26:	2201      	movs	r2, #1
 8002f28:	719a      	strb	r2, [r3, #6]
		static_strings_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 8002f2a:	4a3b      	ldr	r2, [pc, #236]	; (8003018 <static_strings_init+0x158>)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	4413      	add	r3, r2
 8002f32:	2200      	movs	r2, #0
 8002f34:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	607b      	str	r3, [r7, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b05      	cmp	r3, #5
 8002f40:	dde3      	ble.n	8002f0a <static_strings_init+0x4a>
	}
	for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 8002f42:	2300      	movs	r3, #0
 8002f44:	607b      	str	r3, [r7, #4]
 8002f46:	e018      	b.n	8002f7a <static_strings_init+0xba>
		static_strings_medium_strings_descriptors[i].string = static_strings_medium_string_memory[i];
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	22c8      	movs	r2, #200	; 0xc8
 8002f4c:	fb02 f303 	mul.w	r3, r2, r3
 8002f50:	4a32      	ldr	r2, [pc, #200]	; (800301c <static_strings_init+0x15c>)
 8002f52:	441a      	add	r2, r3
 8002f54:	4932      	ldr	r1, [pc, #200]	; (8003020 <static_strings_init+0x160>)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_medium_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_MEDIUM;
 8002f5c:	4a30      	ldr	r2, [pc, #192]	; (8003020 <static_strings_init+0x160>)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	4413      	add	r3, r2
 8002f64:	2202      	movs	r2, #2
 8002f66:	719a      	strb	r2, [r3, #6]
		static_strings_medium_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 8002f68:	4a2d      	ldr	r2, [pc, #180]	; (8003020 <static_strings_init+0x160>)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	4413      	add	r3, r2
 8002f70:	2200      	movs	r2, #0
 8002f72:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3301      	adds	r3, #1
 8002f78:	607b      	str	r3, [r7, #4]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	dde3      	ble.n	8002f48 <static_strings_init+0x88>
	}
	for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 8002f80:	2300      	movs	r3, #0
 8002f82:	607b      	str	r3, [r7, #4]
 8002f84:	e019      	b.n	8002fba <static_strings_init+0xfa>
		static_strings_long_strings_descriptors[i].string = static_strings_long_string_memory[i];
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002f8c:	fb02 f303 	mul.w	r3, r2, r3
 8002f90:	4a24      	ldr	r2, [pc, #144]	; (8003024 <static_strings_init+0x164>)
 8002f92:	441a      	add	r2, r3
 8002f94:	4924      	ldr	r1, [pc, #144]	; (8003028 <static_strings_init+0x168>)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_long_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_LONG;
 8002f9c:	4a22      	ldr	r2, [pc, #136]	; (8003028 <static_strings_init+0x168>)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	4413      	add	r3, r2
 8002fa4:	2203      	movs	r2, #3
 8002fa6:	719a      	strb	r2, [r3, #6]
		static_strings_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 8002fa8:	4a1f      	ldr	r2, [pc, #124]	; (8003028 <static_strings_init+0x168>)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	4413      	add	r3, r2
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	607b      	str	r3, [r7, #4]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	dde2      	ble.n	8002f86 <static_strings_init+0xc6>
	}
	for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	607b      	str	r3, [r7, #4]
 8002fc4:	e019      	b.n	8002ffa <static_strings_init+0x13a>
		static_strings_very_long_strings_descriptors[i].string = static_strings_very_long_string_memory[i];
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002fcc:	fb02 f303 	mul.w	r3, r2, r3
 8002fd0:	4a16      	ldr	r2, [pc, #88]	; (800302c <static_strings_init+0x16c>)
 8002fd2:	441a      	add	r2, r3
 8002fd4:	4916      	ldr	r1, [pc, #88]	; (8003030 <static_strings_init+0x170>)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		static_strings_very_long_strings_descriptors[i].type = STATIC_STRINGS_STRING_TYPE_VERY_LONG;
 8002fdc:	4a14      	ldr	r2, [pc, #80]	; (8003030 <static_strings_init+0x170>)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	2204      	movs	r2, #4
 8002fe6:	719a      	strb	r2, [r3, #6]
		static_strings_very_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 8002fe8:	4a11      	ldr	r2, [pc, #68]	; (8003030 <static_strings_init+0x170>)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	4413      	add	r3, r2
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	71da      	strb	r2, [r3, #7]
	for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	607b      	str	r3, [r7, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	dde2      	ble.n	8002fc6 <static_strings_init+0x106>
	}
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	2000046c 	.word	0x2000046c
 8003010:	2000122c 	.word	0x2000122c
 8003014:	20000214 	.word	0x20000214
 8003018:	20001ca8 	.word	0x20001ca8
 800301c:	20001b18 	.word	0x20001b18
 8003020:	2000121c 	.word	0x2000121c
 8003024:	200012c0 	.word	0x200012c0
 8003028:	20001cd8 	.word	0x20001cd8
 800302c:	20000664 	.word	0x20000664
 8003030:	20000204 	.word	0x20000204

08003034 <static_strings_allocate>:
	memcpy(cloned_string->string,clone_from->string,clone_from->length);
	cloned_string->length = clone_from->length;
	return cloned_string;
}

static_strings_string_descriptor *static_strings_allocate(uint16_t string_size){
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	4603      	mov	r3, r0
 800303c:	80fb      	strh	r3, [r7, #6]
	int i;
	if(string_size <= STATIC_STRINGS_VERY_SHORT_STRING_SIZE){
 800303e:	88fb      	ldrh	r3, [r7, #6]
 8003040:	2b32      	cmp	r3, #50	; 0x32
 8003042:	d829      	bhi.n	8003098 <static_strings_allocate+0x64>
		for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 8003044:	2300      	movs	r3, #0
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	e023      	b.n	8003092 <static_strings_allocate+0x5e>
			if(static_strings_very_short_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 800304a:	4a78      	ldr	r2, [pc, #480]	; (800322c <static_strings_allocate+0x1f8>)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4413      	add	r3, r2
 8003052:	79db      	ldrb	r3, [r3, #7]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d119      	bne.n	800308c <static_strings_allocate+0x58>
				static_strings_very_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 8003058:	4a74      	ldr	r2, [pc, #464]	; (800322c <static_strings_allocate+0x1f8>)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	4413      	add	r3, r2
 8003060:	2201      	movs	r2, #1
 8003062:	71da      	strb	r2, [r3, #7]
				static_strings_very_short_strings_descriptors[i].length = 0;
 8003064:	4a71      	ldr	r2, [pc, #452]	; (800322c <static_strings_allocate+0x1f8>)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	4413      	add	r3, r2
 800306c:	2200      	movs	r2, #0
 800306e:	809a      	strh	r2, [r3, #4]
				memset(static_strings_very_short_strings_descriptors[i].string,0,STATIC_STRINGS_VERY_SHORT_STRING_SIZE);
 8003070:	4a6e      	ldr	r2, [pc, #440]	; (800322c <static_strings_allocate+0x1f8>)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003078:	2232      	movs	r2, #50	; 0x32
 800307a:	2100      	movs	r1, #0
 800307c:	4618      	mov	r0, r3
 800307e:	f000 fbd0 	bl	8003822 <memset>
				return &static_strings_very_short_strings_descriptors[i];
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	4a69      	ldr	r2, [pc, #420]	; (800322c <static_strings_allocate+0x1f8>)
 8003088:	4413      	add	r3, r2
 800308a:	e0cb      	b.n	8003224 <static_strings_allocate+0x1f0>
		for(i = 0; i < STATIC_STRINGS_VERY_SHORT_STRING_QUANTITY;i++){
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	3301      	adds	r3, #1
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2b09      	cmp	r3, #9
 8003096:	ddd8      	ble.n	800304a <static_strings_allocate+0x16>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_SHORT_STRING_SIZE){
 8003098:	88fb      	ldrh	r3, [r7, #6]
 800309a:	2b64      	cmp	r3, #100	; 0x64
 800309c:	d829      	bhi.n	80030f2 <static_strings_allocate+0xbe>
		for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 800309e:	2300      	movs	r3, #0
 80030a0:	60fb      	str	r3, [r7, #12]
 80030a2:	e023      	b.n	80030ec <static_strings_allocate+0xb8>
			if(static_strings_short_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 80030a4:	4a62      	ldr	r2, [pc, #392]	; (8003230 <static_strings_allocate+0x1fc>)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	4413      	add	r3, r2
 80030ac:	79db      	ldrb	r3, [r3, #7]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d119      	bne.n	80030e6 <static_strings_allocate+0xb2>
				static_strings_short_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 80030b2:	4a5f      	ldr	r2, [pc, #380]	; (8003230 <static_strings_allocate+0x1fc>)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	4413      	add	r3, r2
 80030ba:	2201      	movs	r2, #1
 80030bc:	71da      	strb	r2, [r3, #7]
				static_strings_short_strings_descriptors[i].length = 0;
 80030be:	4a5c      	ldr	r2, [pc, #368]	; (8003230 <static_strings_allocate+0x1fc>)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	4413      	add	r3, r2
 80030c6:	2200      	movs	r2, #0
 80030c8:	809a      	strh	r2, [r3, #4]
				memset(static_strings_short_strings_descriptors[i].string,0,STATIC_STRINGS_SHORT_STRING_SIZE);
 80030ca:	4a59      	ldr	r2, [pc, #356]	; (8003230 <static_strings_allocate+0x1fc>)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80030d2:	2264      	movs	r2, #100	; 0x64
 80030d4:	2100      	movs	r1, #0
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 fba3 	bl	8003822 <memset>
				return &static_strings_short_strings_descriptors[i];
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	4a53      	ldr	r2, [pc, #332]	; (8003230 <static_strings_allocate+0x1fc>)
 80030e2:	4413      	add	r3, r2
 80030e4:	e09e      	b.n	8003224 <static_strings_allocate+0x1f0>
		for(i = 0; i < STATIC_STRINGS_SHORT_STRING_QUANTITY;i++){
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	3301      	adds	r3, #1
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2b05      	cmp	r3, #5
 80030f0:	ddd8      	ble.n	80030a4 <static_strings_allocate+0x70>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_MEDIUM_STRING_SIZE){
 80030f2:	88fb      	ldrh	r3, [r7, #6]
 80030f4:	2bc8      	cmp	r3, #200	; 0xc8
 80030f6:	d829      	bhi.n	800314c <static_strings_allocate+0x118>
		for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 80030f8:	2300      	movs	r3, #0
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	e023      	b.n	8003146 <static_strings_allocate+0x112>
			if(static_strings_medium_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 80030fe:	4a4d      	ldr	r2, [pc, #308]	; (8003234 <static_strings_allocate+0x200>)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4413      	add	r3, r2
 8003106:	79db      	ldrb	r3, [r3, #7]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d119      	bne.n	8003140 <static_strings_allocate+0x10c>
				static_strings_medium_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 800310c:	4a49      	ldr	r2, [pc, #292]	; (8003234 <static_strings_allocate+0x200>)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	4413      	add	r3, r2
 8003114:	2201      	movs	r2, #1
 8003116:	71da      	strb	r2, [r3, #7]
				static_strings_medium_strings_descriptors[i].length = 0;
 8003118:	4a46      	ldr	r2, [pc, #280]	; (8003234 <static_strings_allocate+0x200>)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	4413      	add	r3, r2
 8003120:	2200      	movs	r2, #0
 8003122:	809a      	strh	r2, [r3, #4]
				memset(static_strings_medium_strings_descriptors[i].string,0,STATIC_STRINGS_MEDIUM_STRING_SIZE);
 8003124:	4a43      	ldr	r2, [pc, #268]	; (8003234 <static_strings_allocate+0x200>)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800312c:	22c8      	movs	r2, #200	; 0xc8
 800312e:	2100      	movs	r1, #0
 8003130:	4618      	mov	r0, r3
 8003132:	f000 fb76 	bl	8003822 <memset>
				return &static_strings_medium_strings_descriptors[i];
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	4a3e      	ldr	r2, [pc, #248]	; (8003234 <static_strings_allocate+0x200>)
 800313c:	4413      	add	r3, r2
 800313e:	e071      	b.n	8003224 <static_strings_allocate+0x1f0>
		for(i = 0; i < STATIC_STRINGS_MEDIUM_STRING_QUANTITY;i++){
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	3301      	adds	r3, #1
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2b01      	cmp	r3, #1
 800314a:	ddd8      	ble.n	80030fe <static_strings_allocate+0xca>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_LONG_STRING_SIZE){
 800314c:	88fb      	ldrh	r3, [r7, #6]
 800314e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003152:	d82a      	bhi.n	80031aa <static_strings_allocate+0x176>
		for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 8003154:	2300      	movs	r3, #0
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	e024      	b.n	80031a4 <static_strings_allocate+0x170>
			if(static_strings_long_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 800315a:	4a37      	ldr	r2, [pc, #220]	; (8003238 <static_strings_allocate+0x204>)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	4413      	add	r3, r2
 8003162:	79db      	ldrb	r3, [r3, #7]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d11a      	bne.n	800319e <static_strings_allocate+0x16a>
				static_strings_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 8003168:	4a33      	ldr	r2, [pc, #204]	; (8003238 <static_strings_allocate+0x204>)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	4413      	add	r3, r2
 8003170:	2201      	movs	r2, #1
 8003172:	71da      	strb	r2, [r3, #7]
				static_strings_long_strings_descriptors[i].length = 0;
 8003174:	4a30      	ldr	r2, [pc, #192]	; (8003238 <static_strings_allocate+0x204>)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	4413      	add	r3, r2
 800317c:	2200      	movs	r2, #0
 800317e:	809a      	strh	r2, [r3, #4]
				memset(static_strings_long_strings_descriptors[i].string,0,STATIC_STRINGS_LONG_STRING_SIZE);
 8003180:	4a2d      	ldr	r2, [pc, #180]	; (8003238 <static_strings_allocate+0x204>)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003188:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800318c:	2100      	movs	r1, #0
 800318e:	4618      	mov	r0, r3
 8003190:	f000 fb47 	bl	8003822 <memset>
				return &static_strings_long_strings_descriptors[i];
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	4a27      	ldr	r2, [pc, #156]	; (8003238 <static_strings_allocate+0x204>)
 800319a:	4413      	add	r3, r2
 800319c:	e042      	b.n	8003224 <static_strings_allocate+0x1f0>
		for(i = 0; i < STATIC_STRINGS_LONG_STRING_QUANTITY;i++){
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	3301      	adds	r3, #1
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	ddd7      	ble.n	800315a <static_strings_allocate+0x126>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_VERY_LONG_STRING_SIZE){
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d82a      	bhi.n	800320a <static_strings_allocate+0x1d6>
		for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 80031b4:	2300      	movs	r3, #0
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	e024      	b.n	8003204 <static_strings_allocate+0x1d0>
			if(static_strings_very_long_strings_descriptors[i].status == STATIC_STRINGS_STRING_STATUS_DEALLOCATED){
 80031ba:	4a20      	ldr	r2, [pc, #128]	; (800323c <static_strings_allocate+0x208>)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	4413      	add	r3, r2
 80031c2:	79db      	ldrb	r3, [r3, #7]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d11a      	bne.n	80031fe <static_strings_allocate+0x1ca>
				static_strings_very_long_strings_descriptors[i].status = STATIC_STRINGS_STRING_STATUS_ALLOCATED;
 80031c8:	4a1c      	ldr	r2, [pc, #112]	; (800323c <static_strings_allocate+0x208>)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	4413      	add	r3, r2
 80031d0:	2201      	movs	r2, #1
 80031d2:	71da      	strb	r2, [r3, #7]
				static_strings_very_long_strings_descriptors[i].length = 0;
 80031d4:	4a19      	ldr	r2, [pc, #100]	; (800323c <static_strings_allocate+0x208>)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	4413      	add	r3, r2
 80031dc:	2200      	movs	r2, #0
 80031de:	809a      	strh	r2, [r3, #4]
				memset(static_strings_very_long_strings_descriptors[i].string,0,STATIC_STRINGS_VERY_LONG_STRING_SIZE);
 80031e0:	4a16      	ldr	r2, [pc, #88]	; (800323c <static_strings_allocate+0x208>)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80031e8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80031ec:	2100      	movs	r1, #0
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 fb17 	bl	8003822 <memset>
				return &static_strings_very_long_strings_descriptors[i];
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	4a10      	ldr	r2, [pc, #64]	; (800323c <static_strings_allocate+0x208>)
 80031fa:	4413      	add	r3, r2
 80031fc:	e012      	b.n	8003224 <static_strings_allocate+0x1f0>
		for(i = 0; i < STATIC_STRINGS_VERY_LONG_STRING_QUANTITY;i++){
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	3301      	adds	r3, #1
 8003202:	60fb      	str	r3, [r7, #12]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2b01      	cmp	r3, #1
 8003208:	ddd7      	ble.n	80031ba <static_strings_allocate+0x186>
			}
		}
	}
	if(string_size <= STATIC_STRINGS_VERY_LONG_STRING_SIZE){
 800320a:	88fb      	ldrh	r3, [r7, #6]
 800320c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003210:	4293      	cmp	r3, r2
 8003212:	d803      	bhi.n	800321c <static_strings_allocate+0x1e8>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_NO_MEMORY_AVAILABLE;
 8003214:	4b0a      	ldr	r3, [pc, #40]	; (8003240 <static_strings_allocate+0x20c>)
 8003216:	2201      	movs	r2, #1
 8003218:	701a      	strb	r2, [r3, #0]
 800321a:	e002      	b.n	8003222 <static_strings_allocate+0x1ee>
	}
	else{
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_STRING_TOO_LONG;
 800321c:	4b08      	ldr	r3, [pc, #32]	; (8003240 <static_strings_allocate+0x20c>)
 800321e:	2203      	movs	r2, #3
 8003220:	701a      	strb	r2, [r3, #0]
	}
	return (static_strings_string_descriptor *)NULL;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	2000122c 	.word	0x2000122c
 8003230:	20001ca8 	.word	0x20001ca8
 8003234:	2000121c 	.word	0x2000121c
 8003238:	20001cd8 	.word	0x20001cd8
 800323c:	20000204 	.word	0x20000204
 8003240:	20000660 	.word	0x20000660

08003244 <static_strings_save>:

static_strings_string_descriptor *static_strings_save(uint8_t *string){
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
	uint16_t string_length = static_strings_strlen(string);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f831 	bl	80032b4 <static_strings_strlen>
 8003252:	4603      	mov	r3, r0
 8003254:	81fb      	strh	r3, [r7, #14]
	if(string_length == 0){
 8003256:	89fb      	ldrh	r3, [r7, #14]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <static_strings_save+0x1c>
		return (static_strings_string_descriptor *)NULL;
 800325c:	2300      	movs	r3, #0
 800325e:	e014      	b.n	800328a <static_strings_save+0x46>
	}
	static_strings_string_descriptor *descriptor = static_strings_allocate(string_length);
 8003260:	89fb      	ldrh	r3, [r7, #14]
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff fee6 	bl	8003034 <static_strings_allocate>
 8003268:	60b8      	str	r0, [r7, #8]
	if(descriptor == NULL){
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <static_strings_save+0x30>
		return descriptor;
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	e00a      	b.n	800328a <static_strings_save+0x46>
	}
	memcpy(descriptor->string,string,string_length);
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	89fa      	ldrh	r2, [r7, #14]
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	4618      	mov	r0, r3
 800327e:	f000 fac5 	bl	800380c <memcpy>
	descriptor->length = string_length;
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	89fa      	ldrh	r2, [r7, #14]
 8003286:	809a      	strh	r2, [r3, #4]
	return descriptor;
 8003288:	68bb      	ldr	r3, [r7, #8]
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <static_strings_deallocate>:
	string_descriptor->string = string;
	string_descriptor->length = static_strings_strlen(string_descriptor->string);
	return string_descriptor->length;
}

void static_strings_deallocate(static_strings_string_descriptor *string_descriptor){
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
	if(string_descriptor->status != STATIC_STRINGS_STRING_STATUS_CONSTANT){
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	79db      	ldrb	r3, [r3, #7]
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d002      	beq.n	80032a8 <static_strings_deallocate+0x16>
		string_descriptor->status = STATIC_STRINGS_STRING_STATUS_DEALLOCATED;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	71da      	strb	r2, [r3, #7]
	}
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bc80      	pop	{r7}
 80032b0:	4770      	bx	lr
	...

080032b4 <static_strings_strlen>:
		return 1;
	}
	return 0;
}

uint16_t static_strings_strlen(uint8_t *string){
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
	uint16_t length;
	for(length = 0;length < STATIC_STRINGS_VERY_LONG_STRING_SIZE;length++){
 80032bc:	2300      	movs	r3, #0
 80032be:	81fb      	strh	r3, [r7, #14]
 80032c0:	e01e      	b.n	8003300 <static_strings_strlen+0x4c>
		if( *(string + length) == '\r' && length < STATIC_STRINGS_VERY_LONG_STRING_SIZE - 1){
 80032c2:	89fb      	ldrh	r3, [r7, #14]
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	4413      	add	r3, r2
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2b0d      	cmp	r3, #13
 80032cc:	d10f      	bne.n	80032ee <static_strings_strlen+0x3a>
 80032ce:	89fb      	ldrh	r3, [r7, #14]
 80032d0:	f240 52da 	movw	r2, #1498	; 0x5da
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d80a      	bhi.n	80032ee <static_strings_strlen+0x3a>
			if(*(string + length + 1) == '\n'){
 80032d8:	89fb      	ldrh	r3, [r7, #14]
 80032da:	3301      	adds	r3, #1
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	4413      	add	r3, r2
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	2b0a      	cmp	r3, #10
 80032e4:	d103      	bne.n	80032ee <static_strings_strlen+0x3a>
				length += 2;
 80032e6:	89fb      	ldrh	r3, [r7, #14]
 80032e8:	3302      	adds	r3, #2
 80032ea:	81fb      	strh	r3, [r7, #14]
				break;
 80032ec:	e00f      	b.n	800330e <static_strings_strlen+0x5a>
			}
		}
		if( *(string + length) == '\0'){
 80032ee:	89fb      	ldrh	r3, [r7, #14]
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	4413      	add	r3, r2
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d008      	beq.n	800330c <static_strings_strlen+0x58>
	for(length = 0;length < STATIC_STRINGS_VERY_LONG_STRING_SIZE;length++){
 80032fa:	89fb      	ldrh	r3, [r7, #14]
 80032fc:	3301      	adds	r3, #1
 80032fe:	81fb      	strh	r3, [r7, #14]
 8003300:	89fb      	ldrh	r3, [r7, #14]
 8003302:	f240 52db 	movw	r2, #1499	; 0x5db
 8003306:	4293      	cmp	r3, r2
 8003308:	d9db      	bls.n	80032c2 <static_strings_strlen+0xe>
 800330a:	e000      	b.n	800330e <static_strings_strlen+0x5a>
			break;
 800330c:	bf00      	nop
		}
	}
	if(length >= STATIC_STRINGS_VERY_LONG_STRING_SIZE){
 800330e:	89fb      	ldrh	r3, [r7, #14]
 8003310:	f240 52db 	movw	r2, #1499	; 0x5db
 8003314:	4293      	cmp	r3, r2
 8003316:	d904      	bls.n	8003322 <static_strings_strlen+0x6e>
		static_strings_error_code = STATIC_STRINGS_ERROR_CODE_STRING_TOO_LONG;
 8003318:	4b05      	ldr	r3, [pc, #20]	; (8003330 <static_strings_strlen+0x7c>)
 800331a:	2203      	movs	r2, #3
 800331c:	701a      	strb	r2, [r3, #0]
		return 0;
 800331e:	2300      	movs	r3, #0
 8003320:	e000      	b.n	8003324 <static_strings_strlen+0x70>
	}
	else{
		return length;
 8003322:	89fb      	ldrh	r3, [r7, #14]
	}
}
 8003324:	4618      	mov	r0, r3
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	20000660 	.word	0x20000660

08003334 <buffered_serial_init>:
 * \brief Serial communication based on a circular buffer, dma and huart with hal controls and Static Strings.
 */

#include "buffered_serial.h"

void buffered_serial_init(UART_HandleTypeDef **huarts){
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
	static_strings_init();
 800333c:	f7ff fdc0 	bl	8002ec0 <static_strings_init>
	int i;
	for(i = 0;i < BUFFERED_SERIAL_SERIALS_QUANTITY;i++){
 8003340:	2300      	movs	r3, #0
 8003342:	60fb      	str	r3, [r7, #12]
 8003344:	e07b      	b.n	800343e <buffered_serial_init+0x10a>
		buffered_serial_serial_descriptors[i].huart = *(huarts + i);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	4413      	add	r3, r2
 800334e:	6819      	ldr	r1, [r3, #0]
 8003350:	483e      	ldr	r0, [pc, #248]	; (800344c <buffered_serial_init+0x118>)
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	4613      	mov	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4403      	add	r3, r0
 800335e:	6019      	str	r1, [r3, #0]
		buffered_serial_serial_descriptors[i].rx_buffer = buffered_serial_rx_buffers[i];
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003366:	fb02 f303 	mul.w	r3, r2, r3
 800336a:	4a39      	ldr	r2, [pc, #228]	; (8003450 <buffered_serial_init+0x11c>)
 800336c:	1899      	adds	r1, r3, r2
 800336e:	4837      	ldr	r0, [pc, #220]	; (800344c <buffered_serial_init+0x118>)
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	4613      	mov	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4403      	add	r3, r0
 800337c:	3304      	adds	r3, #4
 800337e:	6019      	str	r1, [r3, #0]
		buffered_serial_serial_descriptors[i].rx_buffer_data_start = buffered_serial_rx_buffers[i];
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003386:	fb02 f303 	mul.w	r3, r2, r3
 800338a:	4a31      	ldr	r2, [pc, #196]	; (8003450 <buffered_serial_init+0x11c>)
 800338c:	1899      	adds	r1, r3, r2
 800338e:	482f      	ldr	r0, [pc, #188]	; (800344c <buffered_serial_init+0x118>)
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	4613      	mov	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4403      	add	r3, r0
 800339c:	3308      	adds	r3, #8
 800339e:	6019      	str	r1, [r3, #0]
		buffered_serial_serial_descriptors[i].rx_buffer_data_finish = buffered_serial_rx_buffers[i];
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80033a6:	fb02 f303 	mul.w	r3, r2, r3
 80033aa:	4a29      	ldr	r2, [pc, #164]	; (8003450 <buffered_serial_init+0x11c>)
 80033ac:	1899      	adds	r1, r3, r2
 80033ae:	4827      	ldr	r0, [pc, #156]	; (800344c <buffered_serial_init+0x118>)
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	4613      	mov	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4403      	add	r3, r0
 80033bc:	330c      	adds	r3, #12
 80033be:	6019      	str	r1, [r3, #0]
		buffered_serial_serial_descriptors[i].tx_buffer = buffered_serial_tx_buffers[i];
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80033c6:	fb02 f303 	mul.w	r3, r2, r3
 80033ca:	4a22      	ldr	r2, [pc, #136]	; (8003454 <buffered_serial_init+0x120>)
 80033cc:	1899      	adds	r1, r3, r2
 80033ce:	481f      	ldr	r0, [pc, #124]	; (800344c <buffered_serial_init+0x118>)
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	4613      	mov	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4413      	add	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4403      	add	r3, r0
 80033dc:	3310      	adds	r3, #16
 80033de:	6019      	str	r1, [r3, #0]
		__HAL_UART_ENABLE_IT(buffered_serial_serial_descriptors[i].huart, UART_IT_IDLE);
 80033e0:	491a      	ldr	r1, [pc, #104]	; (800344c <buffered_serial_init+0x118>)
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	4613      	mov	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4413      	add	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68d9      	ldr	r1, [r3, #12]
 80033f4:	4815      	ldr	r0, [pc, #84]	; (800344c <buffered_serial_init+0x118>)
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	4613      	mov	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4403      	add	r3, r0
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f041 0210 	orr.w	r2, r1, #16
 800340a:	60da      	str	r2, [r3, #12]
		HAL_UART_Receive_DMA(buffered_serial_serial_descriptors[i].huart,buffered_serial_serial_descriptors[i].rx_buffer,BUFFERED_SERIAL_BUFFERS_SIZE);
 800340c:	490f      	ldr	r1, [pc, #60]	; (800344c <buffered_serial_init+0x118>)
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	4613      	mov	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	6818      	ldr	r0, [r3, #0]
 800341c:	490b      	ldr	r1, [pc, #44]	; (800344c <buffered_serial_init+0x118>)
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	4613      	mov	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	3304      	adds	r3, #4
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003432:	4619      	mov	r1, r3
 8003434:	f7ff f8d2 	bl	80025dc <HAL_UART_Receive_DMA>
	for(i = 0;i < BUFFERED_SERIAL_SERIALS_QUANTITY;i++){
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	3301      	adds	r3, #1
 800343c:	60fb      	str	r3, [r7, #12]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2b00      	cmp	r3, #0
 8003442:	dd80      	ble.n	8003346 <buffered_serial_init+0x12>
	}
}
 8003444:	bf00      	nop
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	20001ce8 	.word	0x20001ce8
 8003450:	20001920 	.word	0x20001920
 8003454:	2000172c 	.word	0x2000172c

08003458 <buffered_serial_get_huart_serial_descriptor>:

buffered_serial_serial_descriptor *buffered_serial_get_huart_serial_descriptor(UART_HandleTypeDef *huart){
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
	int i;
	for(i = 0; i < BUFFERED_SERIAL_SERIALS_QUANTITY;i++){
 8003460:	2300      	movs	r3, #0
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	e015      	b.n	8003492 <buffered_serial_get_huart_serial_descriptor+0x3a>
		if(buffered_serial_serial_descriptors[i].huart == huart){
 8003466:	490f      	ldr	r1, [pc, #60]	; (80034a4 <buffered_serial_get_huart_serial_descriptor+0x4c>)
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	4613      	mov	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4413      	add	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	440b      	add	r3, r1
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	429a      	cmp	r2, r3
 800347a:	d107      	bne.n	800348c <buffered_serial_get_huart_serial_descriptor+0x34>
			return &buffered_serial_serial_descriptors[i];
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	4613      	mov	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4a07      	ldr	r2, [pc, #28]	; (80034a4 <buffered_serial_get_huart_serial_descriptor+0x4c>)
 8003488:	4413      	add	r3, r2
 800348a:	e006      	b.n	800349a <buffered_serial_get_huart_serial_descriptor+0x42>
	for(i = 0; i < BUFFERED_SERIAL_SERIALS_QUANTITY;i++){
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	3301      	adds	r3, #1
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2b00      	cmp	r3, #0
 8003496:	dde6      	ble.n	8003466 <buffered_serial_get_huart_serial_descriptor+0xe>
		}
	}
	return NULL;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	bc80      	pop	{r7}
 80034a2:	4770      	bx	lr
 80034a4:	20001ce8 	.word	0x20001ce8

080034a8 <buffered_serial_available>:

uint16_t buffered_serial_available(buffered_serial_serial_descriptor *serial){
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
	if(serial->rx_buffer_data_finish >= serial->rx_buffer_data_start){
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68da      	ldr	r2, [r3, #12]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d307      	bcc.n	80034cc <buffered_serial_available+0x24>
		return (uint16_t)(serial->rx_buffer_data_finish - serial->rx_buffer_data_start);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	461a      	mov	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	e011      	b.n	80034f0 <buffered_serial_available+0x48>
	}
	else{
		return ((uint16_t)((serial->rx_buffer + BUFFERED_SERIAL_BUFFERS_SIZE) - serial->rx_buffer_data_start) + (uint16_t)(serial->rx_buffer_data_finish - serial->rx_buffer));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80034d4:	461a      	mov	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	b29a      	uxth	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	4619      	mov	r1, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	1acb      	subs	r3, r1, r3
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	4413      	add	r3, r2
 80034ee:	b29b      	uxth	r3, r3
	}
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bc80      	pop	{r7}
 80034f8:	4770      	bx	lr

080034fa <buffered_serial_print_character>:

void buffered_serial_print_character(buffered_serial_serial_descriptor *serial,uint8_t character){
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b082      	sub	sp, #8
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
 8003502:	460b      	mov	r3, r1
 8003504:	70fb      	strb	r3, [r7, #3]
	while(serial->huart->gState == HAL_UART_STATE_BUSY_TX);
 8003506:	bf00      	nop
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b21      	cmp	r3, #33	; 0x21
 8003514:	d0f8      	beq.n	8003508 <buffered_serial_print_character+0xe>
	HAL_UART_Transmit_DMA(serial->huart,&character,1);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	1cf9      	adds	r1, r7, #3
 800351c:	2201      	movs	r2, #1
 800351e:	4618      	mov	r0, r3
 8003520:	f7fe fff0 	bl	8002504 <HAL_UART_Transmit_DMA>
}
 8003524:	bf00      	nop
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <buffered_serial_print_string>:

void buffered_serial_print_string(buffered_serial_serial_descriptor *serial,static_strings_string_descriptor *string_descriptor){
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
	uint16_t remaining_data_to_send = string_descriptor->length;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	889b      	ldrh	r3, [r3, #4]
 800353a:	81fb      	strh	r3, [r7, #14]
	while(remaining_data_to_send > 0){
 800353c:	e040      	b.n	80035c0 <buffered_serial_print_string+0x94>
		while(serial->huart->gState == HAL_UART_STATE_BUSY_TX);
 800353e:	bf00      	nop
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b21      	cmp	r3, #33	; 0x21
 800354c:	d0f8      	beq.n	8003540 <buffered_serial_print_string+0x14>
		if(remaining_data_to_send < BUFFERED_SERIAL_BUFFERS_SIZE){
 800354e:	89fb      	ldrh	r3, [r7, #14]
 8003550:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003554:	d218      	bcs.n	8003588 <buffered_serial_print_string+0x5c>
			memcpy(serial->tx_buffer,string_descriptor->string + (string_descriptor->length - remaining_data_to_send),remaining_data_to_send);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6918      	ldr	r0, [r3, #16]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	8892      	ldrh	r2, [r2, #4]
 8003562:	4611      	mov	r1, r2
 8003564:	89fa      	ldrh	r2, [r7, #14]
 8003566:	1a8a      	subs	r2, r1, r2
 8003568:	4413      	add	r3, r2
 800356a:	89fa      	ldrh	r2, [r7, #14]
 800356c:	4619      	mov	r1, r3
 800356e:	f000 f94d 	bl	800380c <memcpy>
			HAL_UART_Transmit_DMA(serial->huart,serial->tx_buffer,remaining_data_to_send);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6818      	ldr	r0, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	89fa      	ldrh	r2, [r7, #14]
 800357c:	4619      	mov	r1, r3
 800357e:	f7fe ffc1 	bl	8002504 <HAL_UART_Transmit_DMA>
			remaining_data_to_send = 0;
 8003582:	2300      	movs	r3, #0
 8003584:	81fb      	strh	r3, [r7, #14]
 8003586:	e01b      	b.n	80035c0 <buffered_serial_print_string+0x94>
		}
		else{
			memcpy(serial->tx_buffer,string_descriptor->string + (string_descriptor->length - remaining_data_to_send),BUFFERED_SERIAL_BUFFERS_SIZE);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6918      	ldr	r0, [r3, #16]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	8892      	ldrh	r2, [r2, #4]
 8003594:	4611      	mov	r1, r2
 8003596:	89fa      	ldrh	r2, [r7, #14]
 8003598:	1a8a      	subs	r2, r1, r2
 800359a:	4413      	add	r3, r2
 800359c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80035a0:	4619      	mov	r1, r3
 80035a2:	f000 f933 	bl	800380c <memcpy>
			HAL_UART_Transmit_DMA(serial->huart,serial->tx_buffer,BUFFERED_SERIAL_BUFFERS_SIZE);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6818      	ldr	r0, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80035b2:	4619      	mov	r1, r3
 80035b4:	f7fe ffa6 	bl	8002504 <HAL_UART_Transmit_DMA>
			remaining_data_to_send -= BUFFERED_SERIAL_BUFFERS_SIZE;
 80035b8:	89fb      	ldrh	r3, [r7, #14]
 80035ba:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80035be:	81fb      	strh	r3, [r7, #14]
	while(remaining_data_to_send > 0){
 80035c0:	89fb      	ldrh	r3, [r7, #14]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1bb      	bne.n	800353e <buffered_serial_print_string+0x12>
		}
	}
}
 80035c6:	bf00      	nop
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
	...

080035d0 <buffered_serial_read_line>:

static_strings_string_descriptor *buffered_serial_read_line(buffered_serial_serial_descriptor *serial){
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b088      	sub	sp, #32
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint16_t availaible_data;
	uint8_t *serial_data;
	for(i=0,availaible_data = buffered_serial_available(serial),serial_data = serial->rx_buffer_data_start;i < availaible_data;i++,serial_data++){
 80035d8:	2300      	movs	r3, #0
 80035da:	83fb      	strh	r3, [r7, #30]
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7ff ff63 	bl	80034a8 <buffered_serial_available>
 80035e2:	4603      	mov	r3, r0
 80035e4:	827b      	strh	r3, [r7, #18]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	61bb      	str	r3, [r7, #24]
 80035ec:	e078      	b.n	80036e0 <buffered_serial_read_line+0x110>
		if(serial_data - serial->rx_buffer == BUFFERED_SERIAL_BUFFERS_SIZE){
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6852      	ldr	r2, [r2, #4]
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80035fa:	d102      	bne.n	8003602 <buffered_serial_read_line+0x32>
			serial_data = serial->rx_buffer;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	61bb      	str	r3, [r7, #24]
		}
		if(*serial_data == '\n'){
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	2b0a      	cmp	r3, #10
 8003608:	d164      	bne.n	80036d4 <buffered_serial_read_line+0x104>
			uint8_t *serial_data_previous;
			if(serial_data == serial->rx_buffer){
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	429a      	cmp	r2, r3
 8003612:	d105      	bne.n	8003620 <buffered_serial_read_line+0x50>
				serial_data_previous = serial->rx_buffer + BUFFERED_SERIAL_BUFFERS_SIZE - 1;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800361c:	617b      	str	r3, [r7, #20]
 800361e:	e002      	b.n	8003626 <buffered_serial_read_line+0x56>
			}
			else{
				serial_data_previous = serial_data - 1;
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	3b01      	subs	r3, #1
 8003624:	617b      	str	r3, [r7, #20]
			}
			if(*serial_data_previous == '\r'){
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b0d      	cmp	r3, #13
 800362c:	d152      	bne.n	80036d4 <buffered_serial_read_line+0x104>
				static_strings_string_descriptor *string_descriptor = static_strings_allocate(i + 1);
 800362e:	8bfb      	ldrh	r3, [r7, #30]
 8003630:	3301      	adds	r3, #1
 8003632:	b29b      	uxth	r3, r3
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff fcfd 	bl	8003034 <static_strings_allocate>
 800363a:	60f8      	str	r0, [r7, #12]
				if(string_descriptor == NULL){
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d104      	bne.n	800364c <buffered_serial_read_line+0x7c>
					buffered_serial_error_code = BUFFERED_SERIAL_ERROR_CODE_STATIC_STRINGS_ERROR;
 8003642:	4b2d      	ldr	r3, [pc, #180]	; (80036f8 <buffered_serial_read_line+0x128>)
 8003644:	2200      	movs	r2, #0
 8003646:	701a      	strb	r2, [r3, #0]
					return string_descriptor;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	e051      	b.n	80036f0 <buffered_serial_read_line+0x120>
				}
				string_descriptor->length = i + 1;
 800364c:	8bfb      	ldrh	r3, [r7, #30]
 800364e:	3301      	adds	r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	809a      	strh	r2, [r3, #4]
				if(serial_data >= serial->rx_buffer_data_start){
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	429a      	cmp	r2, r3
 800365e:	d309      	bcc.n	8003674 <buffered_serial_read_line+0xa4>
					memcpy(string_descriptor->string,serial->rx_buffer_data_start, i + 1);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6818      	ldr	r0, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6899      	ldr	r1, [r3, #8]
 8003668:	8bfb      	ldrh	r3, [r7, #30]
 800366a:	3301      	adds	r3, #1
 800366c:	461a      	mov	r2, r3
 800366e:	f000 f8cd 	bl	800380c <memcpy>
 8003672:	e01d      	b.n	80036b0 <buffered_serial_read_line+0xe0>
				}
				else{
					uint16_t data_at_buffer_end = (serial->rx_buffer + BUFFERED_SERIAL_BUFFERS_SIZE) - serial->rx_buffer_data_start;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800367c:	461a      	mov	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	817b      	strh	r3, [r7, #10]
					memcpy(string_descriptor->string,serial->rx_buffer_data_start,data_at_buffer_end);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6818      	ldr	r0, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	897a      	ldrh	r2, [r7, #10]
 8003690:	4619      	mov	r1, r3
 8003692:	f000 f8bb 	bl	800380c <memcpy>
					memcpy(string_descriptor->string + data_at_buffer_end,serial->rx_buffer,i - data_at_buffer_end + 1);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	897b      	ldrh	r3, [r7, #10]
 800369c:	18d0      	adds	r0, r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6859      	ldr	r1, [r3, #4]
 80036a2:	8bfa      	ldrh	r2, [r7, #30]
 80036a4:	897b      	ldrh	r3, [r7, #10]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	3301      	adds	r3, #1
 80036aa:	461a      	mov	r2, r3
 80036ac:	f000 f8ae 	bl	800380c <memcpy>
				}
				if(serial_data == (serial->rx_buffer + BUFFERED_SERIAL_BUFFERS_SIZE) - 1){
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d104      	bne.n	80036c8 <buffered_serial_read_line+0xf8>
					serial->rx_buffer_data_start = serial->rx_buffer;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	609a      	str	r2, [r3, #8]
 80036c6:	e003      	b.n	80036d0 <buffered_serial_read_line+0x100>
				}
				else{
					serial->rx_buffer_data_start = serial_data + 1;
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	1c5a      	adds	r2, r3, #1
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	609a      	str	r2, [r3, #8]
				}
				return string_descriptor;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	e00d      	b.n	80036f0 <buffered_serial_read_line+0x120>
	for(i=0,availaible_data = buffered_serial_available(serial),serial_data = serial->rx_buffer_data_start;i < availaible_data;i++,serial_data++){
 80036d4:	8bfb      	ldrh	r3, [r7, #30]
 80036d6:	3301      	adds	r3, #1
 80036d8:	83fb      	strh	r3, [r7, #30]
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	3301      	adds	r3, #1
 80036de:	61bb      	str	r3, [r7, #24]
 80036e0:	8bfa      	ldrh	r2, [r7, #30]
 80036e2:	8a7b      	ldrh	r3, [r7, #18]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d382      	bcc.n	80035ee <buffered_serial_read_line+0x1e>
			}
		}
	}
	buffered_serial_error_code = BUFFERED_SERIAL_ERROR_CODE_NO_LINE_ENDING_DETECTED;
 80036e8:	4b03      	ldr	r3, [pc, #12]	; (80036f8 <buffered_serial_read_line+0x128>)
 80036ea:	2201      	movs	r2, #1
 80036ec:	701a      	strb	r2, [r3, #0]
	return NULL;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3720      	adds	r7, #32
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	20001b14 	.word	0x20001b14

080036fc <buffered_serial_update_rx_buffer_data>:

void buffered_serial_update_rx_buffer_data(UART_HandleTypeDef *huart){
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
	if(__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) != RESET){
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0310 	and.w	r3, r3, #16
 800370e:	2b10      	cmp	r3, #16
 8003710:	d137      	bne.n	8003782 <buffered_serial_update_rx_buffer_data+0x86>
		__HAL_UART_CLEAR_IDLEFLAG(huart);
 8003712:	2300      	movs	r3, #0
 8003714:	60bb      	str	r3, [r7, #8]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	60bb      	str	r3, [r7, #8]
 8003726:	68bb      	ldr	r3, [r7, #8]
		int i;
		for(i = 0; i < BUFFERED_SERIAL_SERIALS_QUANTITY;i++){
 8003728:	2300      	movs	r3, #0
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	e026      	b.n	800377c <buffered_serial_update_rx_buffer_data+0x80>
			if(buffered_serial_serial_descriptors[i].huart == huart){
 800372e:	4917      	ldr	r1, [pc, #92]	; (800378c <buffered_serial_update_rx_buffer_data+0x90>)
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	4613      	mov	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4413      	add	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	440b      	add	r3, r1
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	429a      	cmp	r2, r3
 8003742:	d118      	bne.n	8003776 <buffered_serial_update_rx_buffer_data+0x7a>
				buffered_serial_serial_descriptors[i].rx_buffer_data_finish = buffered_serial_serial_descriptors[i].rx_buffer + (BUFFERED_SERIAL_BUFFERS_SIZE - __HAL_DMA_GET_COUNTER(huart->hdmarx));
 8003744:	4911      	ldr	r1, [pc, #68]	; (800378c <buffered_serial_update_rx_buffer_data+0x90>)
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	4613      	mov	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	3304      	adds	r3, #4
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 8003762:	18d1      	adds	r1, r2, r3
 8003764:	4809      	ldr	r0, [pc, #36]	; (800378c <buffered_serial_update_rx_buffer_data+0x90>)
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	4613      	mov	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4403      	add	r3, r0
 8003772:	330c      	adds	r3, #12
 8003774:	6019      	str	r1, [r3, #0]
		for(i = 0; i < BUFFERED_SERIAL_SERIALS_QUANTITY;i++){
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	3301      	adds	r3, #1
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2b00      	cmp	r3, #0
 8003780:	ddd5      	ble.n	800372e <buffered_serial_update_rx_buffer_data+0x32>
			}
		}
	}
}
 8003782:	bf00      	nop
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr
 800378c:	20001ce8 	.word	0x20001ce8

08003790 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(huart,buffered_serial_get_huart_serial_descriptor(huart)->rx_buffer,BUFFERED_SERIAL_BUFFERS_SIZE);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f7ff fe5d 	bl	8003458 <buffered_serial_get_huart_serial_descriptor>
 800379e:	4603      	mov	r3, r0
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80037a6:	4619      	mov	r1, r3
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f7fe ff17 	bl	80025dc <HAL_UART_Receive_DMA>
}
 80037ae:	bf00      	nop
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <__errno>:
 80037b8:	4b01      	ldr	r3, [pc, #4]	; (80037c0 <__errno+0x8>)
 80037ba:	6818      	ldr	r0, [r3, #0]
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	2000000c 	.word	0x2000000c

080037c4 <__libc_init_array>:
 80037c4:	b570      	push	{r4, r5, r6, lr}
 80037c6:	2500      	movs	r5, #0
 80037c8:	4e0c      	ldr	r6, [pc, #48]	; (80037fc <__libc_init_array+0x38>)
 80037ca:	4c0d      	ldr	r4, [pc, #52]	; (8003800 <__libc_init_array+0x3c>)
 80037cc:	1ba4      	subs	r4, r4, r6
 80037ce:	10a4      	asrs	r4, r4, #2
 80037d0:	42a5      	cmp	r5, r4
 80037d2:	d109      	bne.n	80037e8 <__libc_init_array+0x24>
 80037d4:	f002 f85e 	bl	8005894 <_init>
 80037d8:	2500      	movs	r5, #0
 80037da:	4e0a      	ldr	r6, [pc, #40]	; (8003804 <__libc_init_array+0x40>)
 80037dc:	4c0a      	ldr	r4, [pc, #40]	; (8003808 <__libc_init_array+0x44>)
 80037de:	1ba4      	subs	r4, r4, r6
 80037e0:	10a4      	asrs	r4, r4, #2
 80037e2:	42a5      	cmp	r5, r4
 80037e4:	d105      	bne.n	80037f2 <__libc_init_array+0x2e>
 80037e6:	bd70      	pop	{r4, r5, r6, pc}
 80037e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037ec:	4798      	blx	r3
 80037ee:	3501      	adds	r5, #1
 80037f0:	e7ee      	b.n	80037d0 <__libc_init_array+0xc>
 80037f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037f6:	4798      	blx	r3
 80037f8:	3501      	adds	r5, #1
 80037fa:	e7f2      	b.n	80037e2 <__libc_init_array+0x1e>
 80037fc:	08005e98 	.word	0x08005e98
 8003800:	08005e98 	.word	0x08005e98
 8003804:	08005e98 	.word	0x08005e98
 8003808:	08005e9c 	.word	0x08005e9c

0800380c <memcpy>:
 800380c:	b510      	push	{r4, lr}
 800380e:	1e43      	subs	r3, r0, #1
 8003810:	440a      	add	r2, r1
 8003812:	4291      	cmp	r1, r2
 8003814:	d100      	bne.n	8003818 <memcpy+0xc>
 8003816:	bd10      	pop	{r4, pc}
 8003818:	f811 4b01 	ldrb.w	r4, [r1], #1
 800381c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003820:	e7f7      	b.n	8003812 <memcpy+0x6>

08003822 <memset>:
 8003822:	4603      	mov	r3, r0
 8003824:	4402      	add	r2, r0
 8003826:	4293      	cmp	r3, r2
 8003828:	d100      	bne.n	800382c <memset+0xa>
 800382a:	4770      	bx	lr
 800382c:	f803 1b01 	strb.w	r1, [r3], #1
 8003830:	e7f9      	b.n	8003826 <memset+0x4>

08003832 <__cvt>:
 8003832:	2b00      	cmp	r3, #0
 8003834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003838:	461e      	mov	r6, r3
 800383a:	bfbb      	ittet	lt
 800383c:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003840:	461e      	movlt	r6, r3
 8003842:	2300      	movge	r3, #0
 8003844:	232d      	movlt	r3, #45	; 0x2d
 8003846:	b088      	sub	sp, #32
 8003848:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800384a:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800384e:	f027 0720 	bic.w	r7, r7, #32
 8003852:	2f46      	cmp	r7, #70	; 0x46
 8003854:	4614      	mov	r4, r2
 8003856:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003858:	700b      	strb	r3, [r1, #0]
 800385a:	d004      	beq.n	8003866 <__cvt+0x34>
 800385c:	2f45      	cmp	r7, #69	; 0x45
 800385e:	d100      	bne.n	8003862 <__cvt+0x30>
 8003860:	3501      	adds	r5, #1
 8003862:	2302      	movs	r3, #2
 8003864:	e000      	b.n	8003868 <__cvt+0x36>
 8003866:	2303      	movs	r3, #3
 8003868:	aa07      	add	r2, sp, #28
 800386a:	9204      	str	r2, [sp, #16]
 800386c:	aa06      	add	r2, sp, #24
 800386e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003872:	e9cd 3500 	strd	r3, r5, [sp]
 8003876:	4622      	mov	r2, r4
 8003878:	4633      	mov	r3, r6
 800387a:	f000 fcd9 	bl	8004230 <_dtoa_r>
 800387e:	2f47      	cmp	r7, #71	; 0x47
 8003880:	4680      	mov	r8, r0
 8003882:	d102      	bne.n	800388a <__cvt+0x58>
 8003884:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003886:	07db      	lsls	r3, r3, #31
 8003888:	d526      	bpl.n	80038d8 <__cvt+0xa6>
 800388a:	2f46      	cmp	r7, #70	; 0x46
 800388c:	eb08 0905 	add.w	r9, r8, r5
 8003890:	d111      	bne.n	80038b6 <__cvt+0x84>
 8003892:	f898 3000 	ldrb.w	r3, [r8]
 8003896:	2b30      	cmp	r3, #48	; 0x30
 8003898:	d10a      	bne.n	80038b0 <__cvt+0x7e>
 800389a:	2200      	movs	r2, #0
 800389c:	2300      	movs	r3, #0
 800389e:	4620      	mov	r0, r4
 80038a0:	4631      	mov	r1, r6
 80038a2:	f7fd f881 	bl	80009a8 <__aeabi_dcmpeq>
 80038a6:	b918      	cbnz	r0, 80038b0 <__cvt+0x7e>
 80038a8:	f1c5 0501 	rsb	r5, r5, #1
 80038ac:	f8ca 5000 	str.w	r5, [sl]
 80038b0:	f8da 3000 	ldr.w	r3, [sl]
 80038b4:	4499      	add	r9, r3
 80038b6:	2200      	movs	r2, #0
 80038b8:	2300      	movs	r3, #0
 80038ba:	4620      	mov	r0, r4
 80038bc:	4631      	mov	r1, r6
 80038be:	f7fd f873 	bl	80009a8 <__aeabi_dcmpeq>
 80038c2:	b938      	cbnz	r0, 80038d4 <__cvt+0xa2>
 80038c4:	2230      	movs	r2, #48	; 0x30
 80038c6:	9b07      	ldr	r3, [sp, #28]
 80038c8:	454b      	cmp	r3, r9
 80038ca:	d205      	bcs.n	80038d8 <__cvt+0xa6>
 80038cc:	1c59      	adds	r1, r3, #1
 80038ce:	9107      	str	r1, [sp, #28]
 80038d0:	701a      	strb	r2, [r3, #0]
 80038d2:	e7f8      	b.n	80038c6 <__cvt+0x94>
 80038d4:	f8cd 901c 	str.w	r9, [sp, #28]
 80038d8:	4640      	mov	r0, r8
 80038da:	9b07      	ldr	r3, [sp, #28]
 80038dc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80038de:	eba3 0308 	sub.w	r3, r3, r8
 80038e2:	6013      	str	r3, [r2, #0]
 80038e4:	b008      	add	sp, #32
 80038e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080038ea <__exponent>:
 80038ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038ec:	2900      	cmp	r1, #0
 80038ee:	bfb4      	ite	lt
 80038f0:	232d      	movlt	r3, #45	; 0x2d
 80038f2:	232b      	movge	r3, #43	; 0x2b
 80038f4:	4604      	mov	r4, r0
 80038f6:	bfb8      	it	lt
 80038f8:	4249      	neglt	r1, r1
 80038fa:	2909      	cmp	r1, #9
 80038fc:	f804 2b02 	strb.w	r2, [r4], #2
 8003900:	7043      	strb	r3, [r0, #1]
 8003902:	dd21      	ble.n	8003948 <__exponent+0x5e>
 8003904:	f10d 0307 	add.w	r3, sp, #7
 8003908:	461f      	mov	r7, r3
 800390a:	260a      	movs	r6, #10
 800390c:	fb91 f5f6 	sdiv	r5, r1, r6
 8003910:	fb06 1115 	mls	r1, r6, r5, r1
 8003914:	2d09      	cmp	r5, #9
 8003916:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800391a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800391e:	f103 32ff 	add.w	r2, r3, #4294967295
 8003922:	4629      	mov	r1, r5
 8003924:	dc09      	bgt.n	800393a <__exponent+0x50>
 8003926:	3130      	adds	r1, #48	; 0x30
 8003928:	3b02      	subs	r3, #2
 800392a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800392e:	42bb      	cmp	r3, r7
 8003930:	4622      	mov	r2, r4
 8003932:	d304      	bcc.n	800393e <__exponent+0x54>
 8003934:	1a10      	subs	r0, r2, r0
 8003936:	b003      	add	sp, #12
 8003938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800393a:	4613      	mov	r3, r2
 800393c:	e7e6      	b.n	800390c <__exponent+0x22>
 800393e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003942:	f804 2b01 	strb.w	r2, [r4], #1
 8003946:	e7f2      	b.n	800392e <__exponent+0x44>
 8003948:	2330      	movs	r3, #48	; 0x30
 800394a:	4419      	add	r1, r3
 800394c:	7083      	strb	r3, [r0, #2]
 800394e:	1d02      	adds	r2, r0, #4
 8003950:	70c1      	strb	r1, [r0, #3]
 8003952:	e7ef      	b.n	8003934 <__exponent+0x4a>

08003954 <_printf_float>:
 8003954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003958:	b091      	sub	sp, #68	; 0x44
 800395a:	460c      	mov	r4, r1
 800395c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800395e:	4693      	mov	fp, r2
 8003960:	461e      	mov	r6, r3
 8003962:	4605      	mov	r5, r0
 8003964:	f001 fa18 	bl	8004d98 <_localeconv_r>
 8003968:	6803      	ldr	r3, [r0, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	9309      	str	r3, [sp, #36]	; 0x24
 800396e:	f7fc fbef 	bl	8000150 <strlen>
 8003972:	2300      	movs	r3, #0
 8003974:	930e      	str	r3, [sp, #56]	; 0x38
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	900a      	str	r0, [sp, #40]	; 0x28
 800397a:	3307      	adds	r3, #7
 800397c:	f023 0307 	bic.w	r3, r3, #7
 8003980:	f103 0208 	add.w	r2, r3, #8
 8003984:	f894 8018 	ldrb.w	r8, [r4, #24]
 8003988:	f8d4 a000 	ldr.w	sl, [r4]
 800398c:	603a      	str	r2, [r7, #0]
 800398e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003992:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003996:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800399a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800399e:	930b      	str	r3, [sp, #44]	; 0x2c
 80039a0:	f04f 32ff 	mov.w	r2, #4294967295
 80039a4:	4ba6      	ldr	r3, [pc, #664]	; (8003c40 <_printf_float+0x2ec>)
 80039a6:	4638      	mov	r0, r7
 80039a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80039aa:	f7fd f82f 	bl	8000a0c <__aeabi_dcmpun>
 80039ae:	bb68      	cbnz	r0, 8003a0c <_printf_float+0xb8>
 80039b0:	f04f 32ff 	mov.w	r2, #4294967295
 80039b4:	4ba2      	ldr	r3, [pc, #648]	; (8003c40 <_printf_float+0x2ec>)
 80039b6:	4638      	mov	r0, r7
 80039b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80039ba:	f7fd f809 	bl	80009d0 <__aeabi_dcmple>
 80039be:	bb28      	cbnz	r0, 8003a0c <_printf_float+0xb8>
 80039c0:	2200      	movs	r2, #0
 80039c2:	2300      	movs	r3, #0
 80039c4:	4638      	mov	r0, r7
 80039c6:	4649      	mov	r1, r9
 80039c8:	f7fc fff8 	bl	80009bc <__aeabi_dcmplt>
 80039cc:	b110      	cbz	r0, 80039d4 <_printf_float+0x80>
 80039ce:	232d      	movs	r3, #45	; 0x2d
 80039d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039d4:	4f9b      	ldr	r7, [pc, #620]	; (8003c44 <_printf_float+0x2f0>)
 80039d6:	4b9c      	ldr	r3, [pc, #624]	; (8003c48 <_printf_float+0x2f4>)
 80039d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80039dc:	bf98      	it	ls
 80039de:	461f      	movls	r7, r3
 80039e0:	2303      	movs	r3, #3
 80039e2:	f04f 0900 	mov.w	r9, #0
 80039e6:	6123      	str	r3, [r4, #16]
 80039e8:	f02a 0304 	bic.w	r3, sl, #4
 80039ec:	6023      	str	r3, [r4, #0]
 80039ee:	9600      	str	r6, [sp, #0]
 80039f0:	465b      	mov	r3, fp
 80039f2:	aa0f      	add	r2, sp, #60	; 0x3c
 80039f4:	4621      	mov	r1, r4
 80039f6:	4628      	mov	r0, r5
 80039f8:	f000 f9e2 	bl	8003dc0 <_printf_common>
 80039fc:	3001      	adds	r0, #1
 80039fe:	f040 8090 	bne.w	8003b22 <_printf_float+0x1ce>
 8003a02:	f04f 30ff 	mov.w	r0, #4294967295
 8003a06:	b011      	add	sp, #68	; 0x44
 8003a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a0c:	463a      	mov	r2, r7
 8003a0e:	464b      	mov	r3, r9
 8003a10:	4638      	mov	r0, r7
 8003a12:	4649      	mov	r1, r9
 8003a14:	f7fc fffa 	bl	8000a0c <__aeabi_dcmpun>
 8003a18:	b110      	cbz	r0, 8003a20 <_printf_float+0xcc>
 8003a1a:	4f8c      	ldr	r7, [pc, #560]	; (8003c4c <_printf_float+0x2f8>)
 8003a1c:	4b8c      	ldr	r3, [pc, #560]	; (8003c50 <_printf_float+0x2fc>)
 8003a1e:	e7db      	b.n	80039d8 <_printf_float+0x84>
 8003a20:	6863      	ldr	r3, [r4, #4]
 8003a22:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8003a26:	1c59      	adds	r1, r3, #1
 8003a28:	a80d      	add	r0, sp, #52	; 0x34
 8003a2a:	a90e      	add	r1, sp, #56	; 0x38
 8003a2c:	d140      	bne.n	8003ab0 <_printf_float+0x15c>
 8003a2e:	2306      	movs	r3, #6
 8003a30:	6063      	str	r3, [r4, #4]
 8003a32:	f04f 0c00 	mov.w	ip, #0
 8003a36:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8003a3a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8003a3e:	6863      	ldr	r3, [r4, #4]
 8003a40:	6022      	str	r2, [r4, #0]
 8003a42:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	463a      	mov	r2, r7
 8003a4a:	464b      	mov	r3, r9
 8003a4c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003a50:	4628      	mov	r0, r5
 8003a52:	f7ff feee 	bl	8003832 <__cvt>
 8003a56:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8003a5a:	2b47      	cmp	r3, #71	; 0x47
 8003a5c:	4607      	mov	r7, r0
 8003a5e:	d109      	bne.n	8003a74 <_printf_float+0x120>
 8003a60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a62:	1cd8      	adds	r0, r3, #3
 8003a64:	db02      	blt.n	8003a6c <_printf_float+0x118>
 8003a66:	6862      	ldr	r2, [r4, #4]
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	dd47      	ble.n	8003afc <_printf_float+0x1a8>
 8003a6c:	f1a8 0802 	sub.w	r8, r8, #2
 8003a70:	fa5f f888 	uxtb.w	r8, r8
 8003a74:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003a78:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003a7a:	d824      	bhi.n	8003ac6 <_printf_float+0x172>
 8003a7c:	3901      	subs	r1, #1
 8003a7e:	4642      	mov	r2, r8
 8003a80:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003a84:	910d      	str	r1, [sp, #52]	; 0x34
 8003a86:	f7ff ff30 	bl	80038ea <__exponent>
 8003a8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003a8c:	4681      	mov	r9, r0
 8003a8e:	1813      	adds	r3, r2, r0
 8003a90:	2a01      	cmp	r2, #1
 8003a92:	6123      	str	r3, [r4, #16]
 8003a94:	dc02      	bgt.n	8003a9c <_printf_float+0x148>
 8003a96:	6822      	ldr	r2, [r4, #0]
 8003a98:	07d1      	lsls	r1, r2, #31
 8003a9a:	d501      	bpl.n	8003aa0 <_printf_float+0x14c>
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	6123      	str	r3, [r4, #16]
 8003aa0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0a2      	beq.n	80039ee <_printf_float+0x9a>
 8003aa8:	232d      	movs	r3, #45	; 0x2d
 8003aaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003aae:	e79e      	b.n	80039ee <_printf_float+0x9a>
 8003ab0:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8003ab4:	f000 816e 	beq.w	8003d94 <_printf_float+0x440>
 8003ab8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003abc:	d1b9      	bne.n	8003a32 <_printf_float+0xde>
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1b7      	bne.n	8003a32 <_printf_float+0xde>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e7b4      	b.n	8003a30 <_printf_float+0xdc>
 8003ac6:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8003aca:	d119      	bne.n	8003b00 <_printf_float+0x1ac>
 8003acc:	2900      	cmp	r1, #0
 8003ace:	6863      	ldr	r3, [r4, #4]
 8003ad0:	dd0c      	ble.n	8003aec <_printf_float+0x198>
 8003ad2:	6121      	str	r1, [r4, #16]
 8003ad4:	b913      	cbnz	r3, 8003adc <_printf_float+0x188>
 8003ad6:	6822      	ldr	r2, [r4, #0]
 8003ad8:	07d2      	lsls	r2, r2, #31
 8003ada:	d502      	bpl.n	8003ae2 <_printf_float+0x18e>
 8003adc:	3301      	adds	r3, #1
 8003ade:	440b      	add	r3, r1
 8003ae0:	6123      	str	r3, [r4, #16]
 8003ae2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ae4:	f04f 0900 	mov.w	r9, #0
 8003ae8:	65a3      	str	r3, [r4, #88]	; 0x58
 8003aea:	e7d9      	b.n	8003aa0 <_printf_float+0x14c>
 8003aec:	b913      	cbnz	r3, 8003af4 <_printf_float+0x1a0>
 8003aee:	6822      	ldr	r2, [r4, #0]
 8003af0:	07d0      	lsls	r0, r2, #31
 8003af2:	d501      	bpl.n	8003af8 <_printf_float+0x1a4>
 8003af4:	3302      	adds	r3, #2
 8003af6:	e7f3      	b.n	8003ae0 <_printf_float+0x18c>
 8003af8:	2301      	movs	r3, #1
 8003afa:	e7f1      	b.n	8003ae0 <_printf_float+0x18c>
 8003afc:	f04f 0867 	mov.w	r8, #103	; 0x67
 8003b00:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003b04:	4293      	cmp	r3, r2
 8003b06:	db05      	blt.n	8003b14 <_printf_float+0x1c0>
 8003b08:	6822      	ldr	r2, [r4, #0]
 8003b0a:	6123      	str	r3, [r4, #16]
 8003b0c:	07d1      	lsls	r1, r2, #31
 8003b0e:	d5e8      	bpl.n	8003ae2 <_printf_float+0x18e>
 8003b10:	3301      	adds	r3, #1
 8003b12:	e7e5      	b.n	8003ae0 <_printf_float+0x18c>
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	bfcc      	ite	gt
 8003b18:	2301      	movgt	r3, #1
 8003b1a:	f1c3 0302 	rsble	r3, r3, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	e7de      	b.n	8003ae0 <_printf_float+0x18c>
 8003b22:	6823      	ldr	r3, [r4, #0]
 8003b24:	055a      	lsls	r2, r3, #21
 8003b26:	d407      	bmi.n	8003b38 <_printf_float+0x1e4>
 8003b28:	6923      	ldr	r3, [r4, #16]
 8003b2a:	463a      	mov	r2, r7
 8003b2c:	4659      	mov	r1, fp
 8003b2e:	4628      	mov	r0, r5
 8003b30:	47b0      	blx	r6
 8003b32:	3001      	adds	r0, #1
 8003b34:	d129      	bne.n	8003b8a <_printf_float+0x236>
 8003b36:	e764      	b.n	8003a02 <_printf_float+0xae>
 8003b38:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003b3c:	f240 80d7 	bls.w	8003cee <_printf_float+0x39a>
 8003b40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003b44:	2200      	movs	r2, #0
 8003b46:	2300      	movs	r3, #0
 8003b48:	f7fc ff2e 	bl	80009a8 <__aeabi_dcmpeq>
 8003b4c:	b388      	cbz	r0, 8003bb2 <_printf_float+0x25e>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	4a40      	ldr	r2, [pc, #256]	; (8003c54 <_printf_float+0x300>)
 8003b52:	4659      	mov	r1, fp
 8003b54:	4628      	mov	r0, r5
 8003b56:	47b0      	blx	r6
 8003b58:	3001      	adds	r0, #1
 8003b5a:	f43f af52 	beq.w	8003a02 <_printf_float+0xae>
 8003b5e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003b62:	429a      	cmp	r2, r3
 8003b64:	db02      	blt.n	8003b6c <_printf_float+0x218>
 8003b66:	6823      	ldr	r3, [r4, #0]
 8003b68:	07d8      	lsls	r0, r3, #31
 8003b6a:	d50e      	bpl.n	8003b8a <_printf_float+0x236>
 8003b6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b70:	4659      	mov	r1, fp
 8003b72:	4628      	mov	r0, r5
 8003b74:	47b0      	blx	r6
 8003b76:	3001      	adds	r0, #1
 8003b78:	f43f af43 	beq.w	8003a02 <_printf_float+0xae>
 8003b7c:	2700      	movs	r7, #0
 8003b7e:	f104 081a 	add.w	r8, r4, #26
 8003b82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b84:	3b01      	subs	r3, #1
 8003b86:	42bb      	cmp	r3, r7
 8003b88:	dc09      	bgt.n	8003b9e <_printf_float+0x24a>
 8003b8a:	6823      	ldr	r3, [r4, #0]
 8003b8c:	079f      	lsls	r7, r3, #30
 8003b8e:	f100 80fd 	bmi.w	8003d8c <_printf_float+0x438>
 8003b92:	68e0      	ldr	r0, [r4, #12]
 8003b94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003b96:	4298      	cmp	r0, r3
 8003b98:	bfb8      	it	lt
 8003b9a:	4618      	movlt	r0, r3
 8003b9c:	e733      	b.n	8003a06 <_printf_float+0xb2>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	4642      	mov	r2, r8
 8003ba2:	4659      	mov	r1, fp
 8003ba4:	4628      	mov	r0, r5
 8003ba6:	47b0      	blx	r6
 8003ba8:	3001      	adds	r0, #1
 8003baa:	f43f af2a 	beq.w	8003a02 <_printf_float+0xae>
 8003bae:	3701      	adds	r7, #1
 8003bb0:	e7e7      	b.n	8003b82 <_printf_float+0x22e>
 8003bb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	dc2b      	bgt.n	8003c10 <_printf_float+0x2bc>
 8003bb8:	2301      	movs	r3, #1
 8003bba:	4a26      	ldr	r2, [pc, #152]	; (8003c54 <_printf_float+0x300>)
 8003bbc:	4659      	mov	r1, fp
 8003bbe:	4628      	mov	r0, r5
 8003bc0:	47b0      	blx	r6
 8003bc2:	3001      	adds	r0, #1
 8003bc4:	f43f af1d 	beq.w	8003a02 <_printf_float+0xae>
 8003bc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003bca:	b923      	cbnz	r3, 8003bd6 <_printf_float+0x282>
 8003bcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003bce:	b913      	cbnz	r3, 8003bd6 <_printf_float+0x282>
 8003bd0:	6823      	ldr	r3, [r4, #0]
 8003bd2:	07d9      	lsls	r1, r3, #31
 8003bd4:	d5d9      	bpl.n	8003b8a <_printf_float+0x236>
 8003bd6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003bda:	4659      	mov	r1, fp
 8003bdc:	4628      	mov	r0, r5
 8003bde:	47b0      	blx	r6
 8003be0:	3001      	adds	r0, #1
 8003be2:	f43f af0e 	beq.w	8003a02 <_printf_float+0xae>
 8003be6:	f04f 0800 	mov.w	r8, #0
 8003bea:	f104 091a 	add.w	r9, r4, #26
 8003bee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003bf0:	425b      	negs	r3, r3
 8003bf2:	4543      	cmp	r3, r8
 8003bf4:	dc01      	bgt.n	8003bfa <_printf_float+0x2a6>
 8003bf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003bf8:	e797      	b.n	8003b2a <_printf_float+0x1d6>
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	464a      	mov	r2, r9
 8003bfe:	4659      	mov	r1, fp
 8003c00:	4628      	mov	r0, r5
 8003c02:	47b0      	blx	r6
 8003c04:	3001      	adds	r0, #1
 8003c06:	f43f aefc 	beq.w	8003a02 <_printf_float+0xae>
 8003c0a:	f108 0801 	add.w	r8, r8, #1
 8003c0e:	e7ee      	b.n	8003bee <_printf_float+0x29a>
 8003c10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c14:	429a      	cmp	r2, r3
 8003c16:	bfa8      	it	ge
 8003c18:	461a      	movge	r2, r3
 8003c1a:	2a00      	cmp	r2, #0
 8003c1c:	4690      	mov	r8, r2
 8003c1e:	dd07      	ble.n	8003c30 <_printf_float+0x2dc>
 8003c20:	4613      	mov	r3, r2
 8003c22:	4659      	mov	r1, fp
 8003c24:	463a      	mov	r2, r7
 8003c26:	4628      	mov	r0, r5
 8003c28:	47b0      	blx	r6
 8003c2a:	3001      	adds	r0, #1
 8003c2c:	f43f aee9 	beq.w	8003a02 <_printf_float+0xae>
 8003c30:	f104 031a 	add.w	r3, r4, #26
 8003c34:	f04f 0a00 	mov.w	sl, #0
 8003c38:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8003c3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c3e:	e015      	b.n	8003c6c <_printf_float+0x318>
 8003c40:	7fefffff 	.word	0x7fefffff
 8003c44:	08005c40 	.word	0x08005c40
 8003c48:	08005c3c 	.word	0x08005c3c
 8003c4c:	08005c48 	.word	0x08005c48
 8003c50:	08005c44 	.word	0x08005c44
 8003c54:	08005c4c 	.word	0x08005c4c
 8003c58:	2301      	movs	r3, #1
 8003c5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003c5c:	4659      	mov	r1, fp
 8003c5e:	4628      	mov	r0, r5
 8003c60:	47b0      	blx	r6
 8003c62:	3001      	adds	r0, #1
 8003c64:	f43f aecd 	beq.w	8003a02 <_printf_float+0xae>
 8003c68:	f10a 0a01 	add.w	sl, sl, #1
 8003c6c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8003c70:	eba9 0308 	sub.w	r3, r9, r8
 8003c74:	4553      	cmp	r3, sl
 8003c76:	dcef      	bgt.n	8003c58 <_printf_float+0x304>
 8003c78:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	444f      	add	r7, r9
 8003c80:	db14      	blt.n	8003cac <_printf_float+0x358>
 8003c82:	6823      	ldr	r3, [r4, #0]
 8003c84:	07da      	lsls	r2, r3, #31
 8003c86:	d411      	bmi.n	8003cac <_printf_float+0x358>
 8003c88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c8a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003c8c:	eba3 0209 	sub.w	r2, r3, r9
 8003c90:	eba3 0901 	sub.w	r9, r3, r1
 8003c94:	4591      	cmp	r9, r2
 8003c96:	bfa8      	it	ge
 8003c98:	4691      	movge	r9, r2
 8003c9a:	f1b9 0f00 	cmp.w	r9, #0
 8003c9e:	dc0d      	bgt.n	8003cbc <_printf_float+0x368>
 8003ca0:	2700      	movs	r7, #0
 8003ca2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ca6:	f104 081a 	add.w	r8, r4, #26
 8003caa:	e018      	b.n	8003cde <_printf_float+0x38a>
 8003cac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003cb0:	4659      	mov	r1, fp
 8003cb2:	4628      	mov	r0, r5
 8003cb4:	47b0      	blx	r6
 8003cb6:	3001      	adds	r0, #1
 8003cb8:	d1e6      	bne.n	8003c88 <_printf_float+0x334>
 8003cba:	e6a2      	b.n	8003a02 <_printf_float+0xae>
 8003cbc:	464b      	mov	r3, r9
 8003cbe:	463a      	mov	r2, r7
 8003cc0:	4659      	mov	r1, fp
 8003cc2:	4628      	mov	r0, r5
 8003cc4:	47b0      	blx	r6
 8003cc6:	3001      	adds	r0, #1
 8003cc8:	d1ea      	bne.n	8003ca0 <_printf_float+0x34c>
 8003cca:	e69a      	b.n	8003a02 <_printf_float+0xae>
 8003ccc:	2301      	movs	r3, #1
 8003cce:	4642      	mov	r2, r8
 8003cd0:	4659      	mov	r1, fp
 8003cd2:	4628      	mov	r0, r5
 8003cd4:	47b0      	blx	r6
 8003cd6:	3001      	adds	r0, #1
 8003cd8:	f43f ae93 	beq.w	8003a02 <_printf_float+0xae>
 8003cdc:	3701      	adds	r7, #1
 8003cde:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003ce2:	1a9b      	subs	r3, r3, r2
 8003ce4:	eba3 0309 	sub.w	r3, r3, r9
 8003ce8:	42bb      	cmp	r3, r7
 8003cea:	dcef      	bgt.n	8003ccc <_printf_float+0x378>
 8003cec:	e74d      	b.n	8003b8a <_printf_float+0x236>
 8003cee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003cf0:	2a01      	cmp	r2, #1
 8003cf2:	dc01      	bgt.n	8003cf8 <_printf_float+0x3a4>
 8003cf4:	07db      	lsls	r3, r3, #31
 8003cf6:	d538      	bpl.n	8003d6a <_printf_float+0x416>
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	463a      	mov	r2, r7
 8003cfc:	4659      	mov	r1, fp
 8003cfe:	4628      	mov	r0, r5
 8003d00:	47b0      	blx	r6
 8003d02:	3001      	adds	r0, #1
 8003d04:	f43f ae7d 	beq.w	8003a02 <_printf_float+0xae>
 8003d08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d0c:	4659      	mov	r1, fp
 8003d0e:	4628      	mov	r0, r5
 8003d10:	47b0      	blx	r6
 8003d12:	3001      	adds	r0, #1
 8003d14:	f107 0701 	add.w	r7, r7, #1
 8003d18:	f43f ae73 	beq.w	8003a02 <_printf_float+0xae>
 8003d1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003d20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d22:	2200      	movs	r2, #0
 8003d24:	f103 38ff 	add.w	r8, r3, #4294967295
 8003d28:	2300      	movs	r3, #0
 8003d2a:	f7fc fe3d 	bl	80009a8 <__aeabi_dcmpeq>
 8003d2e:	b9c0      	cbnz	r0, 8003d62 <_printf_float+0x40e>
 8003d30:	4643      	mov	r3, r8
 8003d32:	463a      	mov	r2, r7
 8003d34:	4659      	mov	r1, fp
 8003d36:	4628      	mov	r0, r5
 8003d38:	47b0      	blx	r6
 8003d3a:	3001      	adds	r0, #1
 8003d3c:	d10d      	bne.n	8003d5a <_printf_float+0x406>
 8003d3e:	e660      	b.n	8003a02 <_printf_float+0xae>
 8003d40:	2301      	movs	r3, #1
 8003d42:	4642      	mov	r2, r8
 8003d44:	4659      	mov	r1, fp
 8003d46:	4628      	mov	r0, r5
 8003d48:	47b0      	blx	r6
 8003d4a:	3001      	adds	r0, #1
 8003d4c:	f43f ae59 	beq.w	8003a02 <_printf_float+0xae>
 8003d50:	3701      	adds	r7, #1
 8003d52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d54:	3b01      	subs	r3, #1
 8003d56:	42bb      	cmp	r3, r7
 8003d58:	dcf2      	bgt.n	8003d40 <_printf_float+0x3ec>
 8003d5a:	464b      	mov	r3, r9
 8003d5c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003d60:	e6e4      	b.n	8003b2c <_printf_float+0x1d8>
 8003d62:	2700      	movs	r7, #0
 8003d64:	f104 081a 	add.w	r8, r4, #26
 8003d68:	e7f3      	b.n	8003d52 <_printf_float+0x3fe>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e7e1      	b.n	8003d32 <_printf_float+0x3de>
 8003d6e:	2301      	movs	r3, #1
 8003d70:	4642      	mov	r2, r8
 8003d72:	4659      	mov	r1, fp
 8003d74:	4628      	mov	r0, r5
 8003d76:	47b0      	blx	r6
 8003d78:	3001      	adds	r0, #1
 8003d7a:	f43f ae42 	beq.w	8003a02 <_printf_float+0xae>
 8003d7e:	3701      	adds	r7, #1
 8003d80:	68e3      	ldr	r3, [r4, #12]
 8003d82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003d84:	1a9b      	subs	r3, r3, r2
 8003d86:	42bb      	cmp	r3, r7
 8003d88:	dcf1      	bgt.n	8003d6e <_printf_float+0x41a>
 8003d8a:	e702      	b.n	8003b92 <_printf_float+0x23e>
 8003d8c:	2700      	movs	r7, #0
 8003d8e:	f104 0819 	add.w	r8, r4, #25
 8003d92:	e7f5      	b.n	8003d80 <_printf_float+0x42c>
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f43f ae94 	beq.w	8003ac2 <_printf_float+0x16e>
 8003d9a:	f04f 0c00 	mov.w	ip, #0
 8003d9e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003da2:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8003da6:	6022      	str	r2, [r4, #0]
 8003da8:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003dac:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	463a      	mov	r2, r7
 8003db4:	464b      	mov	r3, r9
 8003db6:	4628      	mov	r0, r5
 8003db8:	f7ff fd3b 	bl	8003832 <__cvt>
 8003dbc:	4607      	mov	r7, r0
 8003dbe:	e64f      	b.n	8003a60 <_printf_float+0x10c>

08003dc0 <_printf_common>:
 8003dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dc4:	4691      	mov	r9, r2
 8003dc6:	461f      	mov	r7, r3
 8003dc8:	688a      	ldr	r2, [r1, #8]
 8003dca:	690b      	ldr	r3, [r1, #16]
 8003dcc:	4606      	mov	r6, r0
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	bfb8      	it	lt
 8003dd2:	4613      	movlt	r3, r2
 8003dd4:	f8c9 3000 	str.w	r3, [r9]
 8003dd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ddc:	460c      	mov	r4, r1
 8003dde:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003de2:	b112      	cbz	r2, 8003dea <_printf_common+0x2a>
 8003de4:	3301      	adds	r3, #1
 8003de6:	f8c9 3000 	str.w	r3, [r9]
 8003dea:	6823      	ldr	r3, [r4, #0]
 8003dec:	0699      	lsls	r1, r3, #26
 8003dee:	bf42      	ittt	mi
 8003df0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003df4:	3302      	addmi	r3, #2
 8003df6:	f8c9 3000 	strmi.w	r3, [r9]
 8003dfa:	6825      	ldr	r5, [r4, #0]
 8003dfc:	f015 0506 	ands.w	r5, r5, #6
 8003e00:	d107      	bne.n	8003e12 <_printf_common+0x52>
 8003e02:	f104 0a19 	add.w	sl, r4, #25
 8003e06:	68e3      	ldr	r3, [r4, #12]
 8003e08:	f8d9 2000 	ldr.w	r2, [r9]
 8003e0c:	1a9b      	subs	r3, r3, r2
 8003e0e:	42ab      	cmp	r3, r5
 8003e10:	dc29      	bgt.n	8003e66 <_printf_common+0xa6>
 8003e12:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003e16:	6822      	ldr	r2, [r4, #0]
 8003e18:	3300      	adds	r3, #0
 8003e1a:	bf18      	it	ne
 8003e1c:	2301      	movne	r3, #1
 8003e1e:	0692      	lsls	r2, r2, #26
 8003e20:	d42e      	bmi.n	8003e80 <_printf_common+0xc0>
 8003e22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e26:	4639      	mov	r1, r7
 8003e28:	4630      	mov	r0, r6
 8003e2a:	47c0      	blx	r8
 8003e2c:	3001      	adds	r0, #1
 8003e2e:	d021      	beq.n	8003e74 <_printf_common+0xb4>
 8003e30:	6823      	ldr	r3, [r4, #0]
 8003e32:	68e5      	ldr	r5, [r4, #12]
 8003e34:	f003 0306 	and.w	r3, r3, #6
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	bf18      	it	ne
 8003e3c:	2500      	movne	r5, #0
 8003e3e:	f8d9 2000 	ldr.w	r2, [r9]
 8003e42:	f04f 0900 	mov.w	r9, #0
 8003e46:	bf08      	it	eq
 8003e48:	1aad      	subeq	r5, r5, r2
 8003e4a:	68a3      	ldr	r3, [r4, #8]
 8003e4c:	6922      	ldr	r2, [r4, #16]
 8003e4e:	bf08      	it	eq
 8003e50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e54:	4293      	cmp	r3, r2
 8003e56:	bfc4      	itt	gt
 8003e58:	1a9b      	subgt	r3, r3, r2
 8003e5a:	18ed      	addgt	r5, r5, r3
 8003e5c:	341a      	adds	r4, #26
 8003e5e:	454d      	cmp	r5, r9
 8003e60:	d11a      	bne.n	8003e98 <_printf_common+0xd8>
 8003e62:	2000      	movs	r0, #0
 8003e64:	e008      	b.n	8003e78 <_printf_common+0xb8>
 8003e66:	2301      	movs	r3, #1
 8003e68:	4652      	mov	r2, sl
 8003e6a:	4639      	mov	r1, r7
 8003e6c:	4630      	mov	r0, r6
 8003e6e:	47c0      	blx	r8
 8003e70:	3001      	adds	r0, #1
 8003e72:	d103      	bne.n	8003e7c <_printf_common+0xbc>
 8003e74:	f04f 30ff 	mov.w	r0, #4294967295
 8003e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e7c:	3501      	adds	r5, #1
 8003e7e:	e7c2      	b.n	8003e06 <_printf_common+0x46>
 8003e80:	2030      	movs	r0, #48	; 0x30
 8003e82:	18e1      	adds	r1, r4, r3
 8003e84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e88:	1c5a      	adds	r2, r3, #1
 8003e8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e8e:	4422      	add	r2, r4
 8003e90:	3302      	adds	r3, #2
 8003e92:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e96:	e7c4      	b.n	8003e22 <_printf_common+0x62>
 8003e98:	2301      	movs	r3, #1
 8003e9a:	4622      	mov	r2, r4
 8003e9c:	4639      	mov	r1, r7
 8003e9e:	4630      	mov	r0, r6
 8003ea0:	47c0      	blx	r8
 8003ea2:	3001      	adds	r0, #1
 8003ea4:	d0e6      	beq.n	8003e74 <_printf_common+0xb4>
 8003ea6:	f109 0901 	add.w	r9, r9, #1
 8003eaa:	e7d8      	b.n	8003e5e <_printf_common+0x9e>

08003eac <_printf_i>:
 8003eac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003eb0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003eb4:	460c      	mov	r4, r1
 8003eb6:	7e09      	ldrb	r1, [r1, #24]
 8003eb8:	b085      	sub	sp, #20
 8003eba:	296e      	cmp	r1, #110	; 0x6e
 8003ebc:	4617      	mov	r7, r2
 8003ebe:	4606      	mov	r6, r0
 8003ec0:	4698      	mov	r8, r3
 8003ec2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003ec4:	f000 80b3 	beq.w	800402e <_printf_i+0x182>
 8003ec8:	d822      	bhi.n	8003f10 <_printf_i+0x64>
 8003eca:	2963      	cmp	r1, #99	; 0x63
 8003ecc:	d036      	beq.n	8003f3c <_printf_i+0x90>
 8003ece:	d80a      	bhi.n	8003ee6 <_printf_i+0x3a>
 8003ed0:	2900      	cmp	r1, #0
 8003ed2:	f000 80b9 	beq.w	8004048 <_printf_i+0x19c>
 8003ed6:	2958      	cmp	r1, #88	; 0x58
 8003ed8:	f000 8083 	beq.w	8003fe2 <_printf_i+0x136>
 8003edc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ee0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003ee4:	e032      	b.n	8003f4c <_printf_i+0xa0>
 8003ee6:	2964      	cmp	r1, #100	; 0x64
 8003ee8:	d001      	beq.n	8003eee <_printf_i+0x42>
 8003eea:	2969      	cmp	r1, #105	; 0x69
 8003eec:	d1f6      	bne.n	8003edc <_printf_i+0x30>
 8003eee:	6820      	ldr	r0, [r4, #0]
 8003ef0:	6813      	ldr	r3, [r2, #0]
 8003ef2:	0605      	lsls	r5, r0, #24
 8003ef4:	f103 0104 	add.w	r1, r3, #4
 8003ef8:	d52a      	bpl.n	8003f50 <_printf_i+0xa4>
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6011      	str	r1, [r2, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	da03      	bge.n	8003f0a <_printf_i+0x5e>
 8003f02:	222d      	movs	r2, #45	; 0x2d
 8003f04:	425b      	negs	r3, r3
 8003f06:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003f0a:	486f      	ldr	r0, [pc, #444]	; (80040c8 <_printf_i+0x21c>)
 8003f0c:	220a      	movs	r2, #10
 8003f0e:	e039      	b.n	8003f84 <_printf_i+0xd8>
 8003f10:	2973      	cmp	r1, #115	; 0x73
 8003f12:	f000 809d 	beq.w	8004050 <_printf_i+0x1a4>
 8003f16:	d808      	bhi.n	8003f2a <_printf_i+0x7e>
 8003f18:	296f      	cmp	r1, #111	; 0x6f
 8003f1a:	d020      	beq.n	8003f5e <_printf_i+0xb2>
 8003f1c:	2970      	cmp	r1, #112	; 0x70
 8003f1e:	d1dd      	bne.n	8003edc <_printf_i+0x30>
 8003f20:	6823      	ldr	r3, [r4, #0]
 8003f22:	f043 0320 	orr.w	r3, r3, #32
 8003f26:	6023      	str	r3, [r4, #0]
 8003f28:	e003      	b.n	8003f32 <_printf_i+0x86>
 8003f2a:	2975      	cmp	r1, #117	; 0x75
 8003f2c:	d017      	beq.n	8003f5e <_printf_i+0xb2>
 8003f2e:	2978      	cmp	r1, #120	; 0x78
 8003f30:	d1d4      	bne.n	8003edc <_printf_i+0x30>
 8003f32:	2378      	movs	r3, #120	; 0x78
 8003f34:	4865      	ldr	r0, [pc, #404]	; (80040cc <_printf_i+0x220>)
 8003f36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f3a:	e055      	b.n	8003fe8 <_printf_i+0x13c>
 8003f3c:	6813      	ldr	r3, [r2, #0]
 8003f3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f42:	1d19      	adds	r1, r3, #4
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6011      	str	r1, [r2, #0]
 8003f48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e08c      	b.n	800406a <_printf_i+0x1be>
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f56:	6011      	str	r1, [r2, #0]
 8003f58:	bf18      	it	ne
 8003f5a:	b21b      	sxthne	r3, r3
 8003f5c:	e7cf      	b.n	8003efe <_printf_i+0x52>
 8003f5e:	6813      	ldr	r3, [r2, #0]
 8003f60:	6825      	ldr	r5, [r4, #0]
 8003f62:	1d18      	adds	r0, r3, #4
 8003f64:	6010      	str	r0, [r2, #0]
 8003f66:	0628      	lsls	r0, r5, #24
 8003f68:	d501      	bpl.n	8003f6e <_printf_i+0xc2>
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	e002      	b.n	8003f74 <_printf_i+0xc8>
 8003f6e:	0668      	lsls	r0, r5, #25
 8003f70:	d5fb      	bpl.n	8003f6a <_printf_i+0xbe>
 8003f72:	881b      	ldrh	r3, [r3, #0]
 8003f74:	296f      	cmp	r1, #111	; 0x6f
 8003f76:	bf14      	ite	ne
 8003f78:	220a      	movne	r2, #10
 8003f7a:	2208      	moveq	r2, #8
 8003f7c:	4852      	ldr	r0, [pc, #328]	; (80040c8 <_printf_i+0x21c>)
 8003f7e:	2100      	movs	r1, #0
 8003f80:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f84:	6865      	ldr	r5, [r4, #4]
 8003f86:	2d00      	cmp	r5, #0
 8003f88:	60a5      	str	r5, [r4, #8]
 8003f8a:	f2c0 8095 	blt.w	80040b8 <_printf_i+0x20c>
 8003f8e:	6821      	ldr	r1, [r4, #0]
 8003f90:	f021 0104 	bic.w	r1, r1, #4
 8003f94:	6021      	str	r1, [r4, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d13d      	bne.n	8004016 <_printf_i+0x16a>
 8003f9a:	2d00      	cmp	r5, #0
 8003f9c:	f040 808e 	bne.w	80040bc <_printf_i+0x210>
 8003fa0:	4665      	mov	r5, ip
 8003fa2:	2a08      	cmp	r2, #8
 8003fa4:	d10b      	bne.n	8003fbe <_printf_i+0x112>
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	07db      	lsls	r3, r3, #31
 8003faa:	d508      	bpl.n	8003fbe <_printf_i+0x112>
 8003fac:	6923      	ldr	r3, [r4, #16]
 8003fae:	6862      	ldr	r2, [r4, #4]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	bfde      	ittt	le
 8003fb4:	2330      	movle	r3, #48	; 0x30
 8003fb6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003fba:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003fbe:	ebac 0305 	sub.w	r3, ip, r5
 8003fc2:	6123      	str	r3, [r4, #16]
 8003fc4:	f8cd 8000 	str.w	r8, [sp]
 8003fc8:	463b      	mov	r3, r7
 8003fca:	aa03      	add	r2, sp, #12
 8003fcc:	4621      	mov	r1, r4
 8003fce:	4630      	mov	r0, r6
 8003fd0:	f7ff fef6 	bl	8003dc0 <_printf_common>
 8003fd4:	3001      	adds	r0, #1
 8003fd6:	d14d      	bne.n	8004074 <_printf_i+0x1c8>
 8003fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fdc:	b005      	add	sp, #20
 8003fde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003fe2:	4839      	ldr	r0, [pc, #228]	; (80040c8 <_printf_i+0x21c>)
 8003fe4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003fe8:	6813      	ldr	r3, [r2, #0]
 8003fea:	6821      	ldr	r1, [r4, #0]
 8003fec:	1d1d      	adds	r5, r3, #4
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6015      	str	r5, [r2, #0]
 8003ff2:	060a      	lsls	r2, r1, #24
 8003ff4:	d50b      	bpl.n	800400e <_printf_i+0x162>
 8003ff6:	07ca      	lsls	r2, r1, #31
 8003ff8:	bf44      	itt	mi
 8003ffa:	f041 0120 	orrmi.w	r1, r1, #32
 8003ffe:	6021      	strmi	r1, [r4, #0]
 8004000:	b91b      	cbnz	r3, 800400a <_printf_i+0x15e>
 8004002:	6822      	ldr	r2, [r4, #0]
 8004004:	f022 0220 	bic.w	r2, r2, #32
 8004008:	6022      	str	r2, [r4, #0]
 800400a:	2210      	movs	r2, #16
 800400c:	e7b7      	b.n	8003f7e <_printf_i+0xd2>
 800400e:	064d      	lsls	r5, r1, #25
 8004010:	bf48      	it	mi
 8004012:	b29b      	uxthmi	r3, r3
 8004014:	e7ef      	b.n	8003ff6 <_printf_i+0x14a>
 8004016:	4665      	mov	r5, ip
 8004018:	fbb3 f1f2 	udiv	r1, r3, r2
 800401c:	fb02 3311 	mls	r3, r2, r1, r3
 8004020:	5cc3      	ldrb	r3, [r0, r3]
 8004022:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004026:	460b      	mov	r3, r1
 8004028:	2900      	cmp	r1, #0
 800402a:	d1f5      	bne.n	8004018 <_printf_i+0x16c>
 800402c:	e7b9      	b.n	8003fa2 <_printf_i+0xf6>
 800402e:	6813      	ldr	r3, [r2, #0]
 8004030:	6825      	ldr	r5, [r4, #0]
 8004032:	1d18      	adds	r0, r3, #4
 8004034:	6961      	ldr	r1, [r4, #20]
 8004036:	6010      	str	r0, [r2, #0]
 8004038:	0628      	lsls	r0, r5, #24
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	d501      	bpl.n	8004042 <_printf_i+0x196>
 800403e:	6019      	str	r1, [r3, #0]
 8004040:	e002      	b.n	8004048 <_printf_i+0x19c>
 8004042:	066a      	lsls	r2, r5, #25
 8004044:	d5fb      	bpl.n	800403e <_printf_i+0x192>
 8004046:	8019      	strh	r1, [r3, #0]
 8004048:	2300      	movs	r3, #0
 800404a:	4665      	mov	r5, ip
 800404c:	6123      	str	r3, [r4, #16]
 800404e:	e7b9      	b.n	8003fc4 <_printf_i+0x118>
 8004050:	6813      	ldr	r3, [r2, #0]
 8004052:	1d19      	adds	r1, r3, #4
 8004054:	6011      	str	r1, [r2, #0]
 8004056:	681d      	ldr	r5, [r3, #0]
 8004058:	6862      	ldr	r2, [r4, #4]
 800405a:	2100      	movs	r1, #0
 800405c:	4628      	mov	r0, r5
 800405e:	f000 feb1 	bl	8004dc4 <memchr>
 8004062:	b108      	cbz	r0, 8004068 <_printf_i+0x1bc>
 8004064:	1b40      	subs	r0, r0, r5
 8004066:	6060      	str	r0, [r4, #4]
 8004068:	6863      	ldr	r3, [r4, #4]
 800406a:	6123      	str	r3, [r4, #16]
 800406c:	2300      	movs	r3, #0
 800406e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004072:	e7a7      	b.n	8003fc4 <_printf_i+0x118>
 8004074:	6923      	ldr	r3, [r4, #16]
 8004076:	462a      	mov	r2, r5
 8004078:	4639      	mov	r1, r7
 800407a:	4630      	mov	r0, r6
 800407c:	47c0      	blx	r8
 800407e:	3001      	adds	r0, #1
 8004080:	d0aa      	beq.n	8003fd8 <_printf_i+0x12c>
 8004082:	6823      	ldr	r3, [r4, #0]
 8004084:	079b      	lsls	r3, r3, #30
 8004086:	d413      	bmi.n	80040b0 <_printf_i+0x204>
 8004088:	68e0      	ldr	r0, [r4, #12]
 800408a:	9b03      	ldr	r3, [sp, #12]
 800408c:	4298      	cmp	r0, r3
 800408e:	bfb8      	it	lt
 8004090:	4618      	movlt	r0, r3
 8004092:	e7a3      	b.n	8003fdc <_printf_i+0x130>
 8004094:	2301      	movs	r3, #1
 8004096:	464a      	mov	r2, r9
 8004098:	4639      	mov	r1, r7
 800409a:	4630      	mov	r0, r6
 800409c:	47c0      	blx	r8
 800409e:	3001      	adds	r0, #1
 80040a0:	d09a      	beq.n	8003fd8 <_printf_i+0x12c>
 80040a2:	3501      	adds	r5, #1
 80040a4:	68e3      	ldr	r3, [r4, #12]
 80040a6:	9a03      	ldr	r2, [sp, #12]
 80040a8:	1a9b      	subs	r3, r3, r2
 80040aa:	42ab      	cmp	r3, r5
 80040ac:	dcf2      	bgt.n	8004094 <_printf_i+0x1e8>
 80040ae:	e7eb      	b.n	8004088 <_printf_i+0x1dc>
 80040b0:	2500      	movs	r5, #0
 80040b2:	f104 0919 	add.w	r9, r4, #25
 80040b6:	e7f5      	b.n	80040a4 <_printf_i+0x1f8>
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1ac      	bne.n	8004016 <_printf_i+0x16a>
 80040bc:	7803      	ldrb	r3, [r0, #0]
 80040be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040c6:	e76c      	b.n	8003fa2 <_printf_i+0xf6>
 80040c8:	08005c4e 	.word	0x08005c4e
 80040cc:	08005c5f 	.word	0x08005c5f

080040d0 <siprintf>:
 80040d0:	b40e      	push	{r1, r2, r3}
 80040d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80040d6:	b500      	push	{lr}
 80040d8:	b09c      	sub	sp, #112	; 0x70
 80040da:	ab1d      	add	r3, sp, #116	; 0x74
 80040dc:	9002      	str	r0, [sp, #8]
 80040de:	9006      	str	r0, [sp, #24]
 80040e0:	9107      	str	r1, [sp, #28]
 80040e2:	9104      	str	r1, [sp, #16]
 80040e4:	4808      	ldr	r0, [pc, #32]	; (8004108 <siprintf+0x38>)
 80040e6:	4909      	ldr	r1, [pc, #36]	; (800410c <siprintf+0x3c>)
 80040e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80040ec:	9105      	str	r1, [sp, #20]
 80040ee:	6800      	ldr	r0, [r0, #0]
 80040f0:	a902      	add	r1, sp, #8
 80040f2:	9301      	str	r3, [sp, #4]
 80040f4:	f001 fa5e 	bl	80055b4 <_svfiprintf_r>
 80040f8:	2200      	movs	r2, #0
 80040fa:	9b02      	ldr	r3, [sp, #8]
 80040fc:	701a      	strb	r2, [r3, #0]
 80040fe:	b01c      	add	sp, #112	; 0x70
 8004100:	f85d eb04 	ldr.w	lr, [sp], #4
 8004104:	b003      	add	sp, #12
 8004106:	4770      	bx	lr
 8004108:	2000000c 	.word	0x2000000c
 800410c:	ffff0208 	.word	0xffff0208

08004110 <quorem>:
 8004110:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004114:	6903      	ldr	r3, [r0, #16]
 8004116:	690c      	ldr	r4, [r1, #16]
 8004118:	4680      	mov	r8, r0
 800411a:	42a3      	cmp	r3, r4
 800411c:	f2c0 8084 	blt.w	8004228 <quorem+0x118>
 8004120:	3c01      	subs	r4, #1
 8004122:	f101 0714 	add.w	r7, r1, #20
 8004126:	f100 0614 	add.w	r6, r0, #20
 800412a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800412e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004132:	3501      	adds	r5, #1
 8004134:	fbb0 f5f5 	udiv	r5, r0, r5
 8004138:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800413c:	eb06 030c 	add.w	r3, r6, ip
 8004140:	eb07 090c 	add.w	r9, r7, ip
 8004144:	9301      	str	r3, [sp, #4]
 8004146:	b39d      	cbz	r5, 80041b0 <quorem+0xa0>
 8004148:	f04f 0a00 	mov.w	sl, #0
 800414c:	4638      	mov	r0, r7
 800414e:	46b6      	mov	lr, r6
 8004150:	46d3      	mov	fp, sl
 8004152:	f850 2b04 	ldr.w	r2, [r0], #4
 8004156:	b293      	uxth	r3, r2
 8004158:	fb05 a303 	mla	r3, r5, r3, sl
 800415c:	0c12      	lsrs	r2, r2, #16
 800415e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004162:	fb05 a202 	mla	r2, r5, r2, sl
 8004166:	b29b      	uxth	r3, r3
 8004168:	ebab 0303 	sub.w	r3, fp, r3
 800416c:	f8de b000 	ldr.w	fp, [lr]
 8004170:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004174:	fa1f fb8b 	uxth.w	fp, fp
 8004178:	445b      	add	r3, fp
 800417a:	fa1f fb82 	uxth.w	fp, r2
 800417e:	f8de 2000 	ldr.w	r2, [lr]
 8004182:	4581      	cmp	r9, r0
 8004184:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004188:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800418c:	b29b      	uxth	r3, r3
 800418e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004192:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004196:	f84e 3b04 	str.w	r3, [lr], #4
 800419a:	d2da      	bcs.n	8004152 <quorem+0x42>
 800419c:	f856 300c 	ldr.w	r3, [r6, ip]
 80041a0:	b933      	cbnz	r3, 80041b0 <quorem+0xa0>
 80041a2:	9b01      	ldr	r3, [sp, #4]
 80041a4:	3b04      	subs	r3, #4
 80041a6:	429e      	cmp	r6, r3
 80041a8:	461a      	mov	r2, r3
 80041aa:	d331      	bcc.n	8004210 <quorem+0x100>
 80041ac:	f8c8 4010 	str.w	r4, [r8, #16]
 80041b0:	4640      	mov	r0, r8
 80041b2:	f001 f829 	bl	8005208 <__mcmp>
 80041b6:	2800      	cmp	r0, #0
 80041b8:	db26      	blt.n	8004208 <quorem+0xf8>
 80041ba:	4630      	mov	r0, r6
 80041bc:	f04f 0c00 	mov.w	ip, #0
 80041c0:	3501      	adds	r5, #1
 80041c2:	f857 1b04 	ldr.w	r1, [r7], #4
 80041c6:	f8d0 e000 	ldr.w	lr, [r0]
 80041ca:	b28b      	uxth	r3, r1
 80041cc:	ebac 0303 	sub.w	r3, ip, r3
 80041d0:	fa1f f28e 	uxth.w	r2, lr
 80041d4:	4413      	add	r3, r2
 80041d6:	0c0a      	lsrs	r2, r1, #16
 80041d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80041dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80041e6:	45b9      	cmp	r9, r7
 80041e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80041ec:	f840 3b04 	str.w	r3, [r0], #4
 80041f0:	d2e7      	bcs.n	80041c2 <quorem+0xb2>
 80041f2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80041f6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80041fa:	b92a      	cbnz	r2, 8004208 <quorem+0xf8>
 80041fc:	3b04      	subs	r3, #4
 80041fe:	429e      	cmp	r6, r3
 8004200:	461a      	mov	r2, r3
 8004202:	d30b      	bcc.n	800421c <quorem+0x10c>
 8004204:	f8c8 4010 	str.w	r4, [r8, #16]
 8004208:	4628      	mov	r0, r5
 800420a:	b003      	add	sp, #12
 800420c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004210:	6812      	ldr	r2, [r2, #0]
 8004212:	3b04      	subs	r3, #4
 8004214:	2a00      	cmp	r2, #0
 8004216:	d1c9      	bne.n	80041ac <quorem+0x9c>
 8004218:	3c01      	subs	r4, #1
 800421a:	e7c4      	b.n	80041a6 <quorem+0x96>
 800421c:	6812      	ldr	r2, [r2, #0]
 800421e:	3b04      	subs	r3, #4
 8004220:	2a00      	cmp	r2, #0
 8004222:	d1ef      	bne.n	8004204 <quorem+0xf4>
 8004224:	3c01      	subs	r4, #1
 8004226:	e7ea      	b.n	80041fe <quorem+0xee>
 8004228:	2000      	movs	r0, #0
 800422a:	e7ee      	b.n	800420a <quorem+0xfa>
 800422c:	0000      	movs	r0, r0
	...

08004230 <_dtoa_r>:
 8004230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004234:	4616      	mov	r6, r2
 8004236:	461f      	mov	r7, r3
 8004238:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800423a:	b095      	sub	sp, #84	; 0x54
 800423c:	4604      	mov	r4, r0
 800423e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8004242:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004246:	b93d      	cbnz	r5, 8004258 <_dtoa_r+0x28>
 8004248:	2010      	movs	r0, #16
 800424a:	f000 fdb3 	bl	8004db4 <malloc>
 800424e:	6260      	str	r0, [r4, #36]	; 0x24
 8004250:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004254:	6005      	str	r5, [r0, #0]
 8004256:	60c5      	str	r5, [r0, #12]
 8004258:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800425a:	6819      	ldr	r1, [r3, #0]
 800425c:	b151      	cbz	r1, 8004274 <_dtoa_r+0x44>
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	2301      	movs	r3, #1
 8004262:	4093      	lsls	r3, r2
 8004264:	604a      	str	r2, [r1, #4]
 8004266:	608b      	str	r3, [r1, #8]
 8004268:	4620      	mov	r0, r4
 800426a:	f000 fded 	bl	8004e48 <_Bfree>
 800426e:	2200      	movs	r2, #0
 8004270:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	1e3b      	subs	r3, r7, #0
 8004276:	bfaf      	iteee	ge
 8004278:	2300      	movge	r3, #0
 800427a:	2201      	movlt	r2, #1
 800427c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004280:	9303      	strlt	r3, [sp, #12]
 8004282:	bfac      	ite	ge
 8004284:	f8c8 3000 	strge.w	r3, [r8]
 8004288:	f8c8 2000 	strlt.w	r2, [r8]
 800428c:	4bae      	ldr	r3, [pc, #696]	; (8004548 <_dtoa_r+0x318>)
 800428e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004292:	ea33 0308 	bics.w	r3, r3, r8
 8004296:	d11b      	bne.n	80042d0 <_dtoa_r+0xa0>
 8004298:	f242 730f 	movw	r3, #9999	; 0x270f
 800429c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800429e:	6013      	str	r3, [r2, #0]
 80042a0:	9b02      	ldr	r3, [sp, #8]
 80042a2:	b923      	cbnz	r3, 80042ae <_dtoa_r+0x7e>
 80042a4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80042a8:	2800      	cmp	r0, #0
 80042aa:	f000 8545 	beq.w	8004d38 <_dtoa_r+0xb08>
 80042ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80042b0:	b953      	cbnz	r3, 80042c8 <_dtoa_r+0x98>
 80042b2:	4ba6      	ldr	r3, [pc, #664]	; (800454c <_dtoa_r+0x31c>)
 80042b4:	e021      	b.n	80042fa <_dtoa_r+0xca>
 80042b6:	4ba6      	ldr	r3, [pc, #664]	; (8004550 <_dtoa_r+0x320>)
 80042b8:	9306      	str	r3, [sp, #24]
 80042ba:	3308      	adds	r3, #8
 80042bc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80042be:	6013      	str	r3, [r2, #0]
 80042c0:	9806      	ldr	r0, [sp, #24]
 80042c2:	b015      	add	sp, #84	; 0x54
 80042c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042c8:	4ba0      	ldr	r3, [pc, #640]	; (800454c <_dtoa_r+0x31c>)
 80042ca:	9306      	str	r3, [sp, #24]
 80042cc:	3303      	adds	r3, #3
 80042ce:	e7f5      	b.n	80042bc <_dtoa_r+0x8c>
 80042d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80042d4:	2200      	movs	r2, #0
 80042d6:	2300      	movs	r3, #0
 80042d8:	4630      	mov	r0, r6
 80042da:	4639      	mov	r1, r7
 80042dc:	f7fc fb64 	bl	80009a8 <__aeabi_dcmpeq>
 80042e0:	4682      	mov	sl, r0
 80042e2:	b160      	cbz	r0, 80042fe <_dtoa_r+0xce>
 80042e4:	2301      	movs	r3, #1
 80042e6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80042e8:	6013      	str	r3, [r2, #0]
 80042ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 8520 	beq.w	8004d32 <_dtoa_r+0xb02>
 80042f2:	4b98      	ldr	r3, [pc, #608]	; (8004554 <_dtoa_r+0x324>)
 80042f4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80042f6:	6013      	str	r3, [r2, #0]
 80042f8:	3b01      	subs	r3, #1
 80042fa:	9306      	str	r3, [sp, #24]
 80042fc:	e7e0      	b.n	80042c0 <_dtoa_r+0x90>
 80042fe:	ab12      	add	r3, sp, #72	; 0x48
 8004300:	9301      	str	r3, [sp, #4]
 8004302:	ab13      	add	r3, sp, #76	; 0x4c
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	4632      	mov	r2, r6
 8004308:	463b      	mov	r3, r7
 800430a:	4620      	mov	r0, r4
 800430c:	f000 fff4 	bl	80052f8 <__d2b>
 8004310:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004314:	4683      	mov	fp, r0
 8004316:	2d00      	cmp	r5, #0
 8004318:	d07d      	beq.n	8004416 <_dtoa_r+0x1e6>
 800431a:	46b0      	mov	r8, r6
 800431c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004320:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8004324:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8004328:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800432c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8004330:	2200      	movs	r2, #0
 8004332:	4b89      	ldr	r3, [pc, #548]	; (8004558 <_dtoa_r+0x328>)
 8004334:	4640      	mov	r0, r8
 8004336:	4649      	mov	r1, r9
 8004338:	f7fb ff16 	bl	8000168 <__aeabi_dsub>
 800433c:	a37c      	add	r3, pc, #496	; (adr r3, 8004530 <_dtoa_r+0x300>)
 800433e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004342:	f7fc f8c9 	bl	80004d8 <__aeabi_dmul>
 8004346:	a37c      	add	r3, pc, #496	; (adr r3, 8004538 <_dtoa_r+0x308>)
 8004348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434c:	f7fb ff0e 	bl	800016c <__adddf3>
 8004350:	4606      	mov	r6, r0
 8004352:	4628      	mov	r0, r5
 8004354:	460f      	mov	r7, r1
 8004356:	f7fc f855 	bl	8000404 <__aeabi_i2d>
 800435a:	a379      	add	r3, pc, #484	; (adr r3, 8004540 <_dtoa_r+0x310>)
 800435c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004360:	f7fc f8ba 	bl	80004d8 <__aeabi_dmul>
 8004364:	4602      	mov	r2, r0
 8004366:	460b      	mov	r3, r1
 8004368:	4630      	mov	r0, r6
 800436a:	4639      	mov	r1, r7
 800436c:	f7fb fefe 	bl	800016c <__adddf3>
 8004370:	4606      	mov	r6, r0
 8004372:	460f      	mov	r7, r1
 8004374:	f7fc fb60 	bl	8000a38 <__aeabi_d2iz>
 8004378:	2200      	movs	r2, #0
 800437a:	4682      	mov	sl, r0
 800437c:	2300      	movs	r3, #0
 800437e:	4630      	mov	r0, r6
 8004380:	4639      	mov	r1, r7
 8004382:	f7fc fb1b 	bl	80009bc <__aeabi_dcmplt>
 8004386:	b148      	cbz	r0, 800439c <_dtoa_r+0x16c>
 8004388:	4650      	mov	r0, sl
 800438a:	f7fc f83b 	bl	8000404 <__aeabi_i2d>
 800438e:	4632      	mov	r2, r6
 8004390:	463b      	mov	r3, r7
 8004392:	f7fc fb09 	bl	80009a8 <__aeabi_dcmpeq>
 8004396:	b908      	cbnz	r0, 800439c <_dtoa_r+0x16c>
 8004398:	f10a 3aff 	add.w	sl, sl, #4294967295
 800439c:	f1ba 0f16 	cmp.w	sl, #22
 80043a0:	d85a      	bhi.n	8004458 <_dtoa_r+0x228>
 80043a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80043a6:	496d      	ldr	r1, [pc, #436]	; (800455c <_dtoa_r+0x32c>)
 80043a8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80043ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043b0:	f7fc fb22 	bl	80009f8 <__aeabi_dcmpgt>
 80043b4:	2800      	cmp	r0, #0
 80043b6:	d051      	beq.n	800445c <_dtoa_r+0x22c>
 80043b8:	2300      	movs	r3, #0
 80043ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80043be:	930d      	str	r3, [sp, #52]	; 0x34
 80043c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80043c2:	1b5d      	subs	r5, r3, r5
 80043c4:	1e6b      	subs	r3, r5, #1
 80043c6:	9307      	str	r3, [sp, #28]
 80043c8:	bf43      	ittte	mi
 80043ca:	2300      	movmi	r3, #0
 80043cc:	f1c5 0901 	rsbmi	r9, r5, #1
 80043d0:	9307      	strmi	r3, [sp, #28]
 80043d2:	f04f 0900 	movpl.w	r9, #0
 80043d6:	f1ba 0f00 	cmp.w	sl, #0
 80043da:	db41      	blt.n	8004460 <_dtoa_r+0x230>
 80043dc:	9b07      	ldr	r3, [sp, #28]
 80043de:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80043e2:	4453      	add	r3, sl
 80043e4:	9307      	str	r3, [sp, #28]
 80043e6:	2300      	movs	r3, #0
 80043e8:	9308      	str	r3, [sp, #32]
 80043ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80043ec:	2b09      	cmp	r3, #9
 80043ee:	f200 808f 	bhi.w	8004510 <_dtoa_r+0x2e0>
 80043f2:	2b05      	cmp	r3, #5
 80043f4:	bfc4      	itt	gt
 80043f6:	3b04      	subgt	r3, #4
 80043f8:	931e      	strgt	r3, [sp, #120]	; 0x78
 80043fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80043fc:	bfc8      	it	gt
 80043fe:	2500      	movgt	r5, #0
 8004400:	f1a3 0302 	sub.w	r3, r3, #2
 8004404:	bfd8      	it	le
 8004406:	2501      	movle	r5, #1
 8004408:	2b03      	cmp	r3, #3
 800440a:	f200 808d 	bhi.w	8004528 <_dtoa_r+0x2f8>
 800440e:	e8df f003 	tbb	[pc, r3]
 8004412:	7d7b      	.short	0x7d7b
 8004414:	6f2f      	.short	0x6f2f
 8004416:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800441a:	441d      	add	r5, r3
 800441c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004420:	2820      	cmp	r0, #32
 8004422:	dd13      	ble.n	800444c <_dtoa_r+0x21c>
 8004424:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004428:	9b02      	ldr	r3, [sp, #8]
 800442a:	fa08 f800 	lsl.w	r8, r8, r0
 800442e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004432:	fa23 f000 	lsr.w	r0, r3, r0
 8004436:	ea48 0000 	orr.w	r0, r8, r0
 800443a:	f7fb ffd3 	bl	80003e4 <__aeabi_ui2d>
 800443e:	2301      	movs	r3, #1
 8004440:	4680      	mov	r8, r0
 8004442:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8004446:	3d01      	subs	r5, #1
 8004448:	9310      	str	r3, [sp, #64]	; 0x40
 800444a:	e771      	b.n	8004330 <_dtoa_r+0x100>
 800444c:	9b02      	ldr	r3, [sp, #8]
 800444e:	f1c0 0020 	rsb	r0, r0, #32
 8004452:	fa03 f000 	lsl.w	r0, r3, r0
 8004456:	e7f0      	b.n	800443a <_dtoa_r+0x20a>
 8004458:	2301      	movs	r3, #1
 800445a:	e7b0      	b.n	80043be <_dtoa_r+0x18e>
 800445c:	900d      	str	r0, [sp, #52]	; 0x34
 800445e:	e7af      	b.n	80043c0 <_dtoa_r+0x190>
 8004460:	f1ca 0300 	rsb	r3, sl, #0
 8004464:	9308      	str	r3, [sp, #32]
 8004466:	2300      	movs	r3, #0
 8004468:	eba9 090a 	sub.w	r9, r9, sl
 800446c:	930c      	str	r3, [sp, #48]	; 0x30
 800446e:	e7bc      	b.n	80043ea <_dtoa_r+0x1ba>
 8004470:	2301      	movs	r3, #1
 8004472:	9309      	str	r3, [sp, #36]	; 0x24
 8004474:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004476:	2b00      	cmp	r3, #0
 8004478:	dd74      	ble.n	8004564 <_dtoa_r+0x334>
 800447a:	4698      	mov	r8, r3
 800447c:	9304      	str	r3, [sp, #16]
 800447e:	2200      	movs	r2, #0
 8004480:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004482:	6072      	str	r2, [r6, #4]
 8004484:	2204      	movs	r2, #4
 8004486:	f102 0014 	add.w	r0, r2, #20
 800448a:	4298      	cmp	r0, r3
 800448c:	6871      	ldr	r1, [r6, #4]
 800448e:	d96e      	bls.n	800456e <_dtoa_r+0x33e>
 8004490:	4620      	mov	r0, r4
 8004492:	f000 fca5 	bl	8004de0 <_Balloc>
 8004496:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004498:	6030      	str	r0, [r6, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f1b8 0f0e 	cmp.w	r8, #14
 80044a0:	9306      	str	r3, [sp, #24]
 80044a2:	f200 80ed 	bhi.w	8004680 <_dtoa_r+0x450>
 80044a6:	2d00      	cmp	r5, #0
 80044a8:	f000 80ea 	beq.w	8004680 <_dtoa_r+0x450>
 80044ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80044b0:	f1ba 0f00 	cmp.w	sl, #0
 80044b4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80044b8:	dd77      	ble.n	80045aa <_dtoa_r+0x37a>
 80044ba:	4a28      	ldr	r2, [pc, #160]	; (800455c <_dtoa_r+0x32c>)
 80044bc:	f00a 030f 	and.w	r3, sl, #15
 80044c0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80044c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80044c8:	06f0      	lsls	r0, r6, #27
 80044ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ce:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80044d2:	d568      	bpl.n	80045a6 <_dtoa_r+0x376>
 80044d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80044d8:	4b21      	ldr	r3, [pc, #132]	; (8004560 <_dtoa_r+0x330>)
 80044da:	2503      	movs	r5, #3
 80044dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80044e0:	f7fc f924 	bl	800072c <__aeabi_ddiv>
 80044e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80044e8:	f006 060f 	and.w	r6, r6, #15
 80044ec:	4f1c      	ldr	r7, [pc, #112]	; (8004560 <_dtoa_r+0x330>)
 80044ee:	e04f      	b.n	8004590 <_dtoa_r+0x360>
 80044f0:	2301      	movs	r3, #1
 80044f2:	9309      	str	r3, [sp, #36]	; 0x24
 80044f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80044f6:	4453      	add	r3, sl
 80044f8:	f103 0801 	add.w	r8, r3, #1
 80044fc:	9304      	str	r3, [sp, #16]
 80044fe:	4643      	mov	r3, r8
 8004500:	2b01      	cmp	r3, #1
 8004502:	bfb8      	it	lt
 8004504:	2301      	movlt	r3, #1
 8004506:	e7ba      	b.n	800447e <_dtoa_r+0x24e>
 8004508:	2300      	movs	r3, #0
 800450a:	e7b2      	b.n	8004472 <_dtoa_r+0x242>
 800450c:	2300      	movs	r3, #0
 800450e:	e7f0      	b.n	80044f2 <_dtoa_r+0x2c2>
 8004510:	2501      	movs	r5, #1
 8004512:	2300      	movs	r3, #0
 8004514:	9509      	str	r5, [sp, #36]	; 0x24
 8004516:	931e      	str	r3, [sp, #120]	; 0x78
 8004518:	f04f 33ff 	mov.w	r3, #4294967295
 800451c:	2200      	movs	r2, #0
 800451e:	9304      	str	r3, [sp, #16]
 8004520:	4698      	mov	r8, r3
 8004522:	2312      	movs	r3, #18
 8004524:	921f      	str	r2, [sp, #124]	; 0x7c
 8004526:	e7aa      	b.n	800447e <_dtoa_r+0x24e>
 8004528:	2301      	movs	r3, #1
 800452a:	9309      	str	r3, [sp, #36]	; 0x24
 800452c:	e7f4      	b.n	8004518 <_dtoa_r+0x2e8>
 800452e:	bf00      	nop
 8004530:	636f4361 	.word	0x636f4361
 8004534:	3fd287a7 	.word	0x3fd287a7
 8004538:	8b60c8b3 	.word	0x8b60c8b3
 800453c:	3fc68a28 	.word	0x3fc68a28
 8004540:	509f79fb 	.word	0x509f79fb
 8004544:	3fd34413 	.word	0x3fd34413
 8004548:	7ff00000 	.word	0x7ff00000
 800454c:	08005c79 	.word	0x08005c79
 8004550:	08005c70 	.word	0x08005c70
 8004554:	08005c4d 	.word	0x08005c4d
 8004558:	3ff80000 	.word	0x3ff80000
 800455c:	08005ca8 	.word	0x08005ca8
 8004560:	08005c80 	.word	0x08005c80
 8004564:	2301      	movs	r3, #1
 8004566:	9304      	str	r3, [sp, #16]
 8004568:	4698      	mov	r8, r3
 800456a:	461a      	mov	r2, r3
 800456c:	e7da      	b.n	8004524 <_dtoa_r+0x2f4>
 800456e:	3101      	adds	r1, #1
 8004570:	6071      	str	r1, [r6, #4]
 8004572:	0052      	lsls	r2, r2, #1
 8004574:	e787      	b.n	8004486 <_dtoa_r+0x256>
 8004576:	07f1      	lsls	r1, r6, #31
 8004578:	d508      	bpl.n	800458c <_dtoa_r+0x35c>
 800457a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800457e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004582:	f7fb ffa9 	bl	80004d8 <__aeabi_dmul>
 8004586:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800458a:	3501      	adds	r5, #1
 800458c:	1076      	asrs	r6, r6, #1
 800458e:	3708      	adds	r7, #8
 8004590:	2e00      	cmp	r6, #0
 8004592:	d1f0      	bne.n	8004576 <_dtoa_r+0x346>
 8004594:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004598:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800459c:	f7fc f8c6 	bl	800072c <__aeabi_ddiv>
 80045a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045a4:	e01b      	b.n	80045de <_dtoa_r+0x3ae>
 80045a6:	2502      	movs	r5, #2
 80045a8:	e7a0      	b.n	80044ec <_dtoa_r+0x2bc>
 80045aa:	f000 80a4 	beq.w	80046f6 <_dtoa_r+0x4c6>
 80045ae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80045b2:	f1ca 0600 	rsb	r6, sl, #0
 80045b6:	4ba0      	ldr	r3, [pc, #640]	; (8004838 <_dtoa_r+0x608>)
 80045b8:	f006 020f 	and.w	r2, r6, #15
 80045bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80045c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c4:	f7fb ff88 	bl	80004d8 <__aeabi_dmul>
 80045c8:	2502      	movs	r5, #2
 80045ca:	2300      	movs	r3, #0
 80045cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045d0:	4f9a      	ldr	r7, [pc, #616]	; (800483c <_dtoa_r+0x60c>)
 80045d2:	1136      	asrs	r6, r6, #4
 80045d4:	2e00      	cmp	r6, #0
 80045d6:	f040 8083 	bne.w	80046e0 <_dtoa_r+0x4b0>
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1e0      	bne.n	80045a0 <_dtoa_r+0x370>
 80045de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 808a 	beq.w	80046fa <_dtoa_r+0x4ca>
 80045e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80045ea:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80045ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80045f2:	2200      	movs	r2, #0
 80045f4:	4b92      	ldr	r3, [pc, #584]	; (8004840 <_dtoa_r+0x610>)
 80045f6:	f7fc f9e1 	bl	80009bc <__aeabi_dcmplt>
 80045fa:	2800      	cmp	r0, #0
 80045fc:	d07d      	beq.n	80046fa <_dtoa_r+0x4ca>
 80045fe:	f1b8 0f00 	cmp.w	r8, #0
 8004602:	d07a      	beq.n	80046fa <_dtoa_r+0x4ca>
 8004604:	9b04      	ldr	r3, [sp, #16]
 8004606:	2b00      	cmp	r3, #0
 8004608:	dd36      	ble.n	8004678 <_dtoa_r+0x448>
 800460a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800460e:	2200      	movs	r2, #0
 8004610:	4b8c      	ldr	r3, [pc, #560]	; (8004844 <_dtoa_r+0x614>)
 8004612:	f7fb ff61 	bl	80004d8 <__aeabi_dmul>
 8004616:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800461a:	9e04      	ldr	r6, [sp, #16]
 800461c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8004620:	3501      	adds	r5, #1
 8004622:	4628      	mov	r0, r5
 8004624:	f7fb feee 	bl	8000404 <__aeabi_i2d>
 8004628:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800462c:	f7fb ff54 	bl	80004d8 <__aeabi_dmul>
 8004630:	2200      	movs	r2, #0
 8004632:	4b85      	ldr	r3, [pc, #532]	; (8004848 <_dtoa_r+0x618>)
 8004634:	f7fb fd9a 	bl	800016c <__adddf3>
 8004638:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800463c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004640:	950b      	str	r5, [sp, #44]	; 0x2c
 8004642:	2e00      	cmp	r6, #0
 8004644:	d15c      	bne.n	8004700 <_dtoa_r+0x4d0>
 8004646:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800464a:	2200      	movs	r2, #0
 800464c:	4b7f      	ldr	r3, [pc, #508]	; (800484c <_dtoa_r+0x61c>)
 800464e:	f7fb fd8b 	bl	8000168 <__aeabi_dsub>
 8004652:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004654:	462b      	mov	r3, r5
 8004656:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800465a:	f7fc f9cd 	bl	80009f8 <__aeabi_dcmpgt>
 800465e:	2800      	cmp	r0, #0
 8004660:	f040 8281 	bne.w	8004b66 <_dtoa_r+0x936>
 8004664:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004668:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800466a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800466e:	f7fc f9a5 	bl	80009bc <__aeabi_dcmplt>
 8004672:	2800      	cmp	r0, #0
 8004674:	f040 8275 	bne.w	8004b62 <_dtoa_r+0x932>
 8004678:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800467c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004680:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004682:	2b00      	cmp	r3, #0
 8004684:	f2c0 814b 	blt.w	800491e <_dtoa_r+0x6ee>
 8004688:	f1ba 0f0e 	cmp.w	sl, #14
 800468c:	f300 8147 	bgt.w	800491e <_dtoa_r+0x6ee>
 8004690:	4b69      	ldr	r3, [pc, #420]	; (8004838 <_dtoa_r+0x608>)
 8004692:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800469e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f280 80d7 	bge.w	8004854 <_dtoa_r+0x624>
 80046a6:	f1b8 0f00 	cmp.w	r8, #0
 80046aa:	f300 80d3 	bgt.w	8004854 <_dtoa_r+0x624>
 80046ae:	f040 8257 	bne.w	8004b60 <_dtoa_r+0x930>
 80046b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80046b6:	2200      	movs	r2, #0
 80046b8:	4b64      	ldr	r3, [pc, #400]	; (800484c <_dtoa_r+0x61c>)
 80046ba:	f7fb ff0d 	bl	80004d8 <__aeabi_dmul>
 80046be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80046c2:	f7fc f98f 	bl	80009e4 <__aeabi_dcmpge>
 80046c6:	4646      	mov	r6, r8
 80046c8:	4647      	mov	r7, r8
 80046ca:	2800      	cmp	r0, #0
 80046cc:	f040 822d 	bne.w	8004b2a <_dtoa_r+0x8fa>
 80046d0:	9b06      	ldr	r3, [sp, #24]
 80046d2:	9a06      	ldr	r2, [sp, #24]
 80046d4:	1c5d      	adds	r5, r3, #1
 80046d6:	2331      	movs	r3, #49	; 0x31
 80046d8:	f10a 0a01 	add.w	sl, sl, #1
 80046dc:	7013      	strb	r3, [r2, #0]
 80046de:	e228      	b.n	8004b32 <_dtoa_r+0x902>
 80046e0:	07f2      	lsls	r2, r6, #31
 80046e2:	d505      	bpl.n	80046f0 <_dtoa_r+0x4c0>
 80046e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046e8:	f7fb fef6 	bl	80004d8 <__aeabi_dmul>
 80046ec:	2301      	movs	r3, #1
 80046ee:	3501      	adds	r5, #1
 80046f0:	1076      	asrs	r6, r6, #1
 80046f2:	3708      	adds	r7, #8
 80046f4:	e76e      	b.n	80045d4 <_dtoa_r+0x3a4>
 80046f6:	2502      	movs	r5, #2
 80046f8:	e771      	b.n	80045de <_dtoa_r+0x3ae>
 80046fa:	4657      	mov	r7, sl
 80046fc:	4646      	mov	r6, r8
 80046fe:	e790      	b.n	8004622 <_dtoa_r+0x3f2>
 8004700:	4b4d      	ldr	r3, [pc, #308]	; (8004838 <_dtoa_r+0x608>)
 8004702:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004706:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800470a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800470c:	2b00      	cmp	r3, #0
 800470e:	d048      	beq.n	80047a2 <_dtoa_r+0x572>
 8004710:	4602      	mov	r2, r0
 8004712:	460b      	mov	r3, r1
 8004714:	2000      	movs	r0, #0
 8004716:	494e      	ldr	r1, [pc, #312]	; (8004850 <_dtoa_r+0x620>)
 8004718:	f7fc f808 	bl	800072c <__aeabi_ddiv>
 800471c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004720:	f7fb fd22 	bl	8000168 <__aeabi_dsub>
 8004724:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004728:	9d06      	ldr	r5, [sp, #24]
 800472a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800472e:	f7fc f983 	bl	8000a38 <__aeabi_d2iz>
 8004732:	9011      	str	r0, [sp, #68]	; 0x44
 8004734:	f7fb fe66 	bl	8000404 <__aeabi_i2d>
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004740:	f7fb fd12 	bl	8000168 <__aeabi_dsub>
 8004744:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004746:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800474a:	3330      	adds	r3, #48	; 0x30
 800474c:	f805 3b01 	strb.w	r3, [r5], #1
 8004750:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004754:	f7fc f932 	bl	80009bc <__aeabi_dcmplt>
 8004758:	2800      	cmp	r0, #0
 800475a:	d163      	bne.n	8004824 <_dtoa_r+0x5f4>
 800475c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004760:	2000      	movs	r0, #0
 8004762:	4937      	ldr	r1, [pc, #220]	; (8004840 <_dtoa_r+0x610>)
 8004764:	f7fb fd00 	bl	8000168 <__aeabi_dsub>
 8004768:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800476c:	f7fc f926 	bl	80009bc <__aeabi_dcmplt>
 8004770:	2800      	cmp	r0, #0
 8004772:	f040 80b5 	bne.w	80048e0 <_dtoa_r+0x6b0>
 8004776:	9b06      	ldr	r3, [sp, #24]
 8004778:	1aeb      	subs	r3, r5, r3
 800477a:	429e      	cmp	r6, r3
 800477c:	f77f af7c 	ble.w	8004678 <_dtoa_r+0x448>
 8004780:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004784:	2200      	movs	r2, #0
 8004786:	4b2f      	ldr	r3, [pc, #188]	; (8004844 <_dtoa_r+0x614>)
 8004788:	f7fb fea6 	bl	80004d8 <__aeabi_dmul>
 800478c:	2200      	movs	r2, #0
 800478e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004792:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004796:	4b2b      	ldr	r3, [pc, #172]	; (8004844 <_dtoa_r+0x614>)
 8004798:	f7fb fe9e 	bl	80004d8 <__aeabi_dmul>
 800479c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047a0:	e7c3      	b.n	800472a <_dtoa_r+0x4fa>
 80047a2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80047a6:	f7fb fe97 	bl	80004d8 <__aeabi_dmul>
 80047aa:	9b06      	ldr	r3, [sp, #24]
 80047ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80047b0:	199d      	adds	r5, r3, r6
 80047b2:	461e      	mov	r6, r3
 80047b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047b8:	f7fc f93e 	bl	8000a38 <__aeabi_d2iz>
 80047bc:	9011      	str	r0, [sp, #68]	; 0x44
 80047be:	f7fb fe21 	bl	8000404 <__aeabi_i2d>
 80047c2:	4602      	mov	r2, r0
 80047c4:	460b      	mov	r3, r1
 80047c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047ca:	f7fb fccd 	bl	8000168 <__aeabi_dsub>
 80047ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80047d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047d4:	3330      	adds	r3, #48	; 0x30
 80047d6:	f806 3b01 	strb.w	r3, [r6], #1
 80047da:	42ae      	cmp	r6, r5
 80047dc:	f04f 0200 	mov.w	r2, #0
 80047e0:	d124      	bne.n	800482c <_dtoa_r+0x5fc>
 80047e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80047e6:	4b1a      	ldr	r3, [pc, #104]	; (8004850 <_dtoa_r+0x620>)
 80047e8:	f7fb fcc0 	bl	800016c <__adddf3>
 80047ec:	4602      	mov	r2, r0
 80047ee:	460b      	mov	r3, r1
 80047f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047f4:	f7fc f900 	bl	80009f8 <__aeabi_dcmpgt>
 80047f8:	2800      	cmp	r0, #0
 80047fa:	d171      	bne.n	80048e0 <_dtoa_r+0x6b0>
 80047fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004800:	2000      	movs	r0, #0
 8004802:	4913      	ldr	r1, [pc, #76]	; (8004850 <_dtoa_r+0x620>)
 8004804:	f7fb fcb0 	bl	8000168 <__aeabi_dsub>
 8004808:	4602      	mov	r2, r0
 800480a:	460b      	mov	r3, r1
 800480c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004810:	f7fc f8d4 	bl	80009bc <__aeabi_dcmplt>
 8004814:	2800      	cmp	r0, #0
 8004816:	f43f af2f 	beq.w	8004678 <_dtoa_r+0x448>
 800481a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800481e:	1e6a      	subs	r2, r5, #1
 8004820:	2b30      	cmp	r3, #48	; 0x30
 8004822:	d001      	beq.n	8004828 <_dtoa_r+0x5f8>
 8004824:	46ba      	mov	sl, r7
 8004826:	e04a      	b.n	80048be <_dtoa_r+0x68e>
 8004828:	4615      	mov	r5, r2
 800482a:	e7f6      	b.n	800481a <_dtoa_r+0x5ea>
 800482c:	4b05      	ldr	r3, [pc, #20]	; (8004844 <_dtoa_r+0x614>)
 800482e:	f7fb fe53 	bl	80004d8 <__aeabi_dmul>
 8004832:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004836:	e7bd      	b.n	80047b4 <_dtoa_r+0x584>
 8004838:	08005ca8 	.word	0x08005ca8
 800483c:	08005c80 	.word	0x08005c80
 8004840:	3ff00000 	.word	0x3ff00000
 8004844:	40240000 	.word	0x40240000
 8004848:	401c0000 	.word	0x401c0000
 800484c:	40140000 	.word	0x40140000
 8004850:	3fe00000 	.word	0x3fe00000
 8004854:	9d06      	ldr	r5, [sp, #24]
 8004856:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800485a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800485e:	4630      	mov	r0, r6
 8004860:	4639      	mov	r1, r7
 8004862:	f7fb ff63 	bl	800072c <__aeabi_ddiv>
 8004866:	f7fc f8e7 	bl	8000a38 <__aeabi_d2iz>
 800486a:	4681      	mov	r9, r0
 800486c:	f7fb fdca 	bl	8000404 <__aeabi_i2d>
 8004870:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004874:	f7fb fe30 	bl	80004d8 <__aeabi_dmul>
 8004878:	4602      	mov	r2, r0
 800487a:	460b      	mov	r3, r1
 800487c:	4630      	mov	r0, r6
 800487e:	4639      	mov	r1, r7
 8004880:	f7fb fc72 	bl	8000168 <__aeabi_dsub>
 8004884:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8004888:	f805 6b01 	strb.w	r6, [r5], #1
 800488c:	9e06      	ldr	r6, [sp, #24]
 800488e:	4602      	mov	r2, r0
 8004890:	1bae      	subs	r6, r5, r6
 8004892:	45b0      	cmp	r8, r6
 8004894:	460b      	mov	r3, r1
 8004896:	d135      	bne.n	8004904 <_dtoa_r+0x6d4>
 8004898:	f7fb fc68 	bl	800016c <__adddf3>
 800489c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048a0:	4606      	mov	r6, r0
 80048a2:	460f      	mov	r7, r1
 80048a4:	f7fc f8a8 	bl	80009f8 <__aeabi_dcmpgt>
 80048a8:	b9c8      	cbnz	r0, 80048de <_dtoa_r+0x6ae>
 80048aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048ae:	4630      	mov	r0, r6
 80048b0:	4639      	mov	r1, r7
 80048b2:	f7fc f879 	bl	80009a8 <__aeabi_dcmpeq>
 80048b6:	b110      	cbz	r0, 80048be <_dtoa_r+0x68e>
 80048b8:	f019 0f01 	tst.w	r9, #1
 80048bc:	d10f      	bne.n	80048de <_dtoa_r+0x6ae>
 80048be:	4659      	mov	r1, fp
 80048c0:	4620      	mov	r0, r4
 80048c2:	f000 fac1 	bl	8004e48 <_Bfree>
 80048c6:	2300      	movs	r3, #0
 80048c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80048ca:	702b      	strb	r3, [r5, #0]
 80048cc:	f10a 0301 	add.w	r3, sl, #1
 80048d0:	6013      	str	r3, [r2, #0]
 80048d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f43f acf3 	beq.w	80042c0 <_dtoa_r+0x90>
 80048da:	601d      	str	r5, [r3, #0]
 80048dc:	e4f0      	b.n	80042c0 <_dtoa_r+0x90>
 80048de:	4657      	mov	r7, sl
 80048e0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80048e4:	1e6b      	subs	r3, r5, #1
 80048e6:	2a39      	cmp	r2, #57	; 0x39
 80048e8:	d106      	bne.n	80048f8 <_dtoa_r+0x6c8>
 80048ea:	9a06      	ldr	r2, [sp, #24]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d107      	bne.n	8004900 <_dtoa_r+0x6d0>
 80048f0:	2330      	movs	r3, #48	; 0x30
 80048f2:	7013      	strb	r3, [r2, #0]
 80048f4:	4613      	mov	r3, r2
 80048f6:	3701      	adds	r7, #1
 80048f8:	781a      	ldrb	r2, [r3, #0]
 80048fa:	3201      	adds	r2, #1
 80048fc:	701a      	strb	r2, [r3, #0]
 80048fe:	e791      	b.n	8004824 <_dtoa_r+0x5f4>
 8004900:	461d      	mov	r5, r3
 8004902:	e7ed      	b.n	80048e0 <_dtoa_r+0x6b0>
 8004904:	2200      	movs	r2, #0
 8004906:	4b99      	ldr	r3, [pc, #612]	; (8004b6c <_dtoa_r+0x93c>)
 8004908:	f7fb fde6 	bl	80004d8 <__aeabi_dmul>
 800490c:	2200      	movs	r2, #0
 800490e:	2300      	movs	r3, #0
 8004910:	4606      	mov	r6, r0
 8004912:	460f      	mov	r7, r1
 8004914:	f7fc f848 	bl	80009a8 <__aeabi_dcmpeq>
 8004918:	2800      	cmp	r0, #0
 800491a:	d09e      	beq.n	800485a <_dtoa_r+0x62a>
 800491c:	e7cf      	b.n	80048be <_dtoa_r+0x68e>
 800491e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004920:	2a00      	cmp	r2, #0
 8004922:	f000 8088 	beq.w	8004a36 <_dtoa_r+0x806>
 8004926:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004928:	2a01      	cmp	r2, #1
 800492a:	dc6d      	bgt.n	8004a08 <_dtoa_r+0x7d8>
 800492c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800492e:	2a00      	cmp	r2, #0
 8004930:	d066      	beq.n	8004a00 <_dtoa_r+0x7d0>
 8004932:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004936:	464d      	mov	r5, r9
 8004938:	9e08      	ldr	r6, [sp, #32]
 800493a:	9a07      	ldr	r2, [sp, #28]
 800493c:	2101      	movs	r1, #1
 800493e:	441a      	add	r2, r3
 8004940:	4620      	mov	r0, r4
 8004942:	4499      	add	r9, r3
 8004944:	9207      	str	r2, [sp, #28]
 8004946:	f000 fb1f 	bl	8004f88 <__i2b>
 800494a:	4607      	mov	r7, r0
 800494c:	2d00      	cmp	r5, #0
 800494e:	dd0b      	ble.n	8004968 <_dtoa_r+0x738>
 8004950:	9b07      	ldr	r3, [sp, #28]
 8004952:	2b00      	cmp	r3, #0
 8004954:	dd08      	ble.n	8004968 <_dtoa_r+0x738>
 8004956:	42ab      	cmp	r3, r5
 8004958:	bfa8      	it	ge
 800495a:	462b      	movge	r3, r5
 800495c:	9a07      	ldr	r2, [sp, #28]
 800495e:	eba9 0903 	sub.w	r9, r9, r3
 8004962:	1aed      	subs	r5, r5, r3
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	9307      	str	r3, [sp, #28]
 8004968:	9b08      	ldr	r3, [sp, #32]
 800496a:	b1eb      	cbz	r3, 80049a8 <_dtoa_r+0x778>
 800496c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800496e:	2b00      	cmp	r3, #0
 8004970:	d065      	beq.n	8004a3e <_dtoa_r+0x80e>
 8004972:	b18e      	cbz	r6, 8004998 <_dtoa_r+0x768>
 8004974:	4639      	mov	r1, r7
 8004976:	4632      	mov	r2, r6
 8004978:	4620      	mov	r0, r4
 800497a:	f000 fba3 	bl	80050c4 <__pow5mult>
 800497e:	465a      	mov	r2, fp
 8004980:	4601      	mov	r1, r0
 8004982:	4607      	mov	r7, r0
 8004984:	4620      	mov	r0, r4
 8004986:	f000 fb08 	bl	8004f9a <__multiply>
 800498a:	4659      	mov	r1, fp
 800498c:	900a      	str	r0, [sp, #40]	; 0x28
 800498e:	4620      	mov	r0, r4
 8004990:	f000 fa5a 	bl	8004e48 <_Bfree>
 8004994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004996:	469b      	mov	fp, r3
 8004998:	9b08      	ldr	r3, [sp, #32]
 800499a:	1b9a      	subs	r2, r3, r6
 800499c:	d004      	beq.n	80049a8 <_dtoa_r+0x778>
 800499e:	4659      	mov	r1, fp
 80049a0:	4620      	mov	r0, r4
 80049a2:	f000 fb8f 	bl	80050c4 <__pow5mult>
 80049a6:	4683      	mov	fp, r0
 80049a8:	2101      	movs	r1, #1
 80049aa:	4620      	mov	r0, r4
 80049ac:	f000 faec 	bl	8004f88 <__i2b>
 80049b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80049b2:	4606      	mov	r6, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 81c6 	beq.w	8004d46 <_dtoa_r+0xb16>
 80049ba:	461a      	mov	r2, r3
 80049bc:	4601      	mov	r1, r0
 80049be:	4620      	mov	r0, r4
 80049c0:	f000 fb80 	bl	80050c4 <__pow5mult>
 80049c4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80049c6:	4606      	mov	r6, r0
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	dc3e      	bgt.n	8004a4a <_dtoa_r+0x81a>
 80049cc:	9b02      	ldr	r3, [sp, #8]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d137      	bne.n	8004a42 <_dtoa_r+0x812>
 80049d2:	9b03      	ldr	r3, [sp, #12]
 80049d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d134      	bne.n	8004a46 <_dtoa_r+0x816>
 80049dc:	9b03      	ldr	r3, [sp, #12]
 80049de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80049e2:	0d1b      	lsrs	r3, r3, #20
 80049e4:	051b      	lsls	r3, r3, #20
 80049e6:	b12b      	cbz	r3, 80049f4 <_dtoa_r+0x7c4>
 80049e8:	9b07      	ldr	r3, [sp, #28]
 80049ea:	f109 0901 	add.w	r9, r9, #1
 80049ee:	3301      	adds	r3, #1
 80049f0:	9307      	str	r3, [sp, #28]
 80049f2:	2301      	movs	r3, #1
 80049f4:	9308      	str	r3, [sp, #32]
 80049f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d128      	bne.n	8004a4e <_dtoa_r+0x81e>
 80049fc:	2001      	movs	r0, #1
 80049fe:	e02e      	b.n	8004a5e <_dtoa_r+0x82e>
 8004a00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004a02:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004a06:	e796      	b.n	8004936 <_dtoa_r+0x706>
 8004a08:	9b08      	ldr	r3, [sp, #32]
 8004a0a:	f108 36ff 	add.w	r6, r8, #4294967295
 8004a0e:	42b3      	cmp	r3, r6
 8004a10:	bfb7      	itett	lt
 8004a12:	9b08      	ldrlt	r3, [sp, #32]
 8004a14:	1b9e      	subge	r6, r3, r6
 8004a16:	1af2      	sublt	r2, r6, r3
 8004a18:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8004a1a:	bfbf      	itttt	lt
 8004a1c:	9608      	strlt	r6, [sp, #32]
 8004a1e:	189b      	addlt	r3, r3, r2
 8004a20:	930c      	strlt	r3, [sp, #48]	; 0x30
 8004a22:	2600      	movlt	r6, #0
 8004a24:	f1b8 0f00 	cmp.w	r8, #0
 8004a28:	bfb9      	ittee	lt
 8004a2a:	eba9 0508 	sublt.w	r5, r9, r8
 8004a2e:	2300      	movlt	r3, #0
 8004a30:	464d      	movge	r5, r9
 8004a32:	4643      	movge	r3, r8
 8004a34:	e781      	b.n	800493a <_dtoa_r+0x70a>
 8004a36:	9e08      	ldr	r6, [sp, #32]
 8004a38:	464d      	mov	r5, r9
 8004a3a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004a3c:	e786      	b.n	800494c <_dtoa_r+0x71c>
 8004a3e:	9a08      	ldr	r2, [sp, #32]
 8004a40:	e7ad      	b.n	800499e <_dtoa_r+0x76e>
 8004a42:	2300      	movs	r3, #0
 8004a44:	e7d6      	b.n	80049f4 <_dtoa_r+0x7c4>
 8004a46:	9b02      	ldr	r3, [sp, #8]
 8004a48:	e7d4      	b.n	80049f4 <_dtoa_r+0x7c4>
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	9308      	str	r3, [sp, #32]
 8004a4e:	6933      	ldr	r3, [r6, #16]
 8004a50:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004a54:	6918      	ldr	r0, [r3, #16]
 8004a56:	f000 fa49 	bl	8004eec <__hi0bits>
 8004a5a:	f1c0 0020 	rsb	r0, r0, #32
 8004a5e:	9b07      	ldr	r3, [sp, #28]
 8004a60:	4418      	add	r0, r3
 8004a62:	f010 001f 	ands.w	r0, r0, #31
 8004a66:	d047      	beq.n	8004af8 <_dtoa_r+0x8c8>
 8004a68:	f1c0 0320 	rsb	r3, r0, #32
 8004a6c:	2b04      	cmp	r3, #4
 8004a6e:	dd3b      	ble.n	8004ae8 <_dtoa_r+0x8b8>
 8004a70:	9b07      	ldr	r3, [sp, #28]
 8004a72:	f1c0 001c 	rsb	r0, r0, #28
 8004a76:	4481      	add	r9, r0
 8004a78:	4405      	add	r5, r0
 8004a7a:	4403      	add	r3, r0
 8004a7c:	9307      	str	r3, [sp, #28]
 8004a7e:	f1b9 0f00 	cmp.w	r9, #0
 8004a82:	dd05      	ble.n	8004a90 <_dtoa_r+0x860>
 8004a84:	4659      	mov	r1, fp
 8004a86:	464a      	mov	r2, r9
 8004a88:	4620      	mov	r0, r4
 8004a8a:	f000 fb69 	bl	8005160 <__lshift>
 8004a8e:	4683      	mov	fp, r0
 8004a90:	9b07      	ldr	r3, [sp, #28]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	dd05      	ble.n	8004aa2 <_dtoa_r+0x872>
 8004a96:	4631      	mov	r1, r6
 8004a98:	461a      	mov	r2, r3
 8004a9a:	4620      	mov	r0, r4
 8004a9c:	f000 fb60 	bl	8005160 <__lshift>
 8004aa0:	4606      	mov	r6, r0
 8004aa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004aa4:	b353      	cbz	r3, 8004afc <_dtoa_r+0x8cc>
 8004aa6:	4631      	mov	r1, r6
 8004aa8:	4658      	mov	r0, fp
 8004aaa:	f000 fbad 	bl	8005208 <__mcmp>
 8004aae:	2800      	cmp	r0, #0
 8004ab0:	da24      	bge.n	8004afc <_dtoa_r+0x8cc>
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	4659      	mov	r1, fp
 8004ab6:	220a      	movs	r2, #10
 8004ab8:	4620      	mov	r0, r4
 8004aba:	f000 f9dc 	bl	8004e76 <__multadd>
 8004abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ac0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ac4:	4683      	mov	fp, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f000 8144 	beq.w	8004d54 <_dtoa_r+0xb24>
 8004acc:	2300      	movs	r3, #0
 8004ace:	4639      	mov	r1, r7
 8004ad0:	220a      	movs	r2, #10
 8004ad2:	4620      	mov	r0, r4
 8004ad4:	f000 f9cf 	bl	8004e76 <__multadd>
 8004ad8:	9b04      	ldr	r3, [sp, #16]
 8004ada:	4607      	mov	r7, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	dc4d      	bgt.n	8004b7c <_dtoa_r+0x94c>
 8004ae0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	dd4a      	ble.n	8004b7c <_dtoa_r+0x94c>
 8004ae6:	e011      	b.n	8004b0c <_dtoa_r+0x8dc>
 8004ae8:	d0c9      	beq.n	8004a7e <_dtoa_r+0x84e>
 8004aea:	9a07      	ldr	r2, [sp, #28]
 8004aec:	331c      	adds	r3, #28
 8004aee:	441a      	add	r2, r3
 8004af0:	4499      	add	r9, r3
 8004af2:	441d      	add	r5, r3
 8004af4:	4613      	mov	r3, r2
 8004af6:	e7c1      	b.n	8004a7c <_dtoa_r+0x84c>
 8004af8:	4603      	mov	r3, r0
 8004afa:	e7f6      	b.n	8004aea <_dtoa_r+0x8ba>
 8004afc:	f1b8 0f00 	cmp.w	r8, #0
 8004b00:	dc36      	bgt.n	8004b70 <_dtoa_r+0x940>
 8004b02:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	dd33      	ble.n	8004b70 <_dtoa_r+0x940>
 8004b08:	f8cd 8010 	str.w	r8, [sp, #16]
 8004b0c:	9b04      	ldr	r3, [sp, #16]
 8004b0e:	b963      	cbnz	r3, 8004b2a <_dtoa_r+0x8fa>
 8004b10:	4631      	mov	r1, r6
 8004b12:	2205      	movs	r2, #5
 8004b14:	4620      	mov	r0, r4
 8004b16:	f000 f9ae 	bl	8004e76 <__multadd>
 8004b1a:	4601      	mov	r1, r0
 8004b1c:	4606      	mov	r6, r0
 8004b1e:	4658      	mov	r0, fp
 8004b20:	f000 fb72 	bl	8005208 <__mcmp>
 8004b24:	2800      	cmp	r0, #0
 8004b26:	f73f add3 	bgt.w	80046d0 <_dtoa_r+0x4a0>
 8004b2a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004b2c:	9d06      	ldr	r5, [sp, #24]
 8004b2e:	ea6f 0a03 	mvn.w	sl, r3
 8004b32:	f04f 0900 	mov.w	r9, #0
 8004b36:	4631      	mov	r1, r6
 8004b38:	4620      	mov	r0, r4
 8004b3a:	f000 f985 	bl	8004e48 <_Bfree>
 8004b3e:	2f00      	cmp	r7, #0
 8004b40:	f43f aebd 	beq.w	80048be <_dtoa_r+0x68e>
 8004b44:	f1b9 0f00 	cmp.w	r9, #0
 8004b48:	d005      	beq.n	8004b56 <_dtoa_r+0x926>
 8004b4a:	45b9      	cmp	r9, r7
 8004b4c:	d003      	beq.n	8004b56 <_dtoa_r+0x926>
 8004b4e:	4649      	mov	r1, r9
 8004b50:	4620      	mov	r0, r4
 8004b52:	f000 f979 	bl	8004e48 <_Bfree>
 8004b56:	4639      	mov	r1, r7
 8004b58:	4620      	mov	r0, r4
 8004b5a:	f000 f975 	bl	8004e48 <_Bfree>
 8004b5e:	e6ae      	b.n	80048be <_dtoa_r+0x68e>
 8004b60:	2600      	movs	r6, #0
 8004b62:	4637      	mov	r7, r6
 8004b64:	e7e1      	b.n	8004b2a <_dtoa_r+0x8fa>
 8004b66:	46ba      	mov	sl, r7
 8004b68:	4637      	mov	r7, r6
 8004b6a:	e5b1      	b.n	80046d0 <_dtoa_r+0x4a0>
 8004b6c:	40240000 	.word	0x40240000
 8004b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b72:	f8cd 8010 	str.w	r8, [sp, #16]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	f000 80f3 	beq.w	8004d62 <_dtoa_r+0xb32>
 8004b7c:	2d00      	cmp	r5, #0
 8004b7e:	dd05      	ble.n	8004b8c <_dtoa_r+0x95c>
 8004b80:	4639      	mov	r1, r7
 8004b82:	462a      	mov	r2, r5
 8004b84:	4620      	mov	r0, r4
 8004b86:	f000 faeb 	bl	8005160 <__lshift>
 8004b8a:	4607      	mov	r7, r0
 8004b8c:	9b08      	ldr	r3, [sp, #32]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d04c      	beq.n	8004c2c <_dtoa_r+0x9fc>
 8004b92:	6879      	ldr	r1, [r7, #4]
 8004b94:	4620      	mov	r0, r4
 8004b96:	f000 f923 	bl	8004de0 <_Balloc>
 8004b9a:	4605      	mov	r5, r0
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	f107 010c 	add.w	r1, r7, #12
 8004ba2:	3202      	adds	r2, #2
 8004ba4:	0092      	lsls	r2, r2, #2
 8004ba6:	300c      	adds	r0, #12
 8004ba8:	f7fe fe30 	bl	800380c <memcpy>
 8004bac:	2201      	movs	r2, #1
 8004bae:	4629      	mov	r1, r5
 8004bb0:	4620      	mov	r0, r4
 8004bb2:	f000 fad5 	bl	8005160 <__lshift>
 8004bb6:	46b9      	mov	r9, r7
 8004bb8:	4607      	mov	r7, r0
 8004bba:	9b06      	ldr	r3, [sp, #24]
 8004bbc:	9307      	str	r3, [sp, #28]
 8004bbe:	9b02      	ldr	r3, [sp, #8]
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	9308      	str	r3, [sp, #32]
 8004bc6:	4631      	mov	r1, r6
 8004bc8:	4658      	mov	r0, fp
 8004bca:	f7ff faa1 	bl	8004110 <quorem>
 8004bce:	4649      	mov	r1, r9
 8004bd0:	4605      	mov	r5, r0
 8004bd2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004bd6:	4658      	mov	r0, fp
 8004bd8:	f000 fb16 	bl	8005208 <__mcmp>
 8004bdc:	463a      	mov	r2, r7
 8004bde:	9002      	str	r0, [sp, #8]
 8004be0:	4631      	mov	r1, r6
 8004be2:	4620      	mov	r0, r4
 8004be4:	f000 fb2a 	bl	800523c <__mdiff>
 8004be8:	68c3      	ldr	r3, [r0, #12]
 8004bea:	4602      	mov	r2, r0
 8004bec:	bb03      	cbnz	r3, 8004c30 <_dtoa_r+0xa00>
 8004bee:	4601      	mov	r1, r0
 8004bf0:	9009      	str	r0, [sp, #36]	; 0x24
 8004bf2:	4658      	mov	r0, fp
 8004bf4:	f000 fb08 	bl	8005208 <__mcmp>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bfc:	4611      	mov	r1, r2
 8004bfe:	4620      	mov	r0, r4
 8004c00:	9309      	str	r3, [sp, #36]	; 0x24
 8004c02:	f000 f921 	bl	8004e48 <_Bfree>
 8004c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c08:	b9a3      	cbnz	r3, 8004c34 <_dtoa_r+0xa04>
 8004c0a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004c0c:	b992      	cbnz	r2, 8004c34 <_dtoa_r+0xa04>
 8004c0e:	9a08      	ldr	r2, [sp, #32]
 8004c10:	b982      	cbnz	r2, 8004c34 <_dtoa_r+0xa04>
 8004c12:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004c16:	d029      	beq.n	8004c6c <_dtoa_r+0xa3c>
 8004c18:	9b02      	ldr	r3, [sp, #8]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	dd01      	ble.n	8004c22 <_dtoa_r+0x9f2>
 8004c1e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8004c22:	9b07      	ldr	r3, [sp, #28]
 8004c24:	1c5d      	adds	r5, r3, #1
 8004c26:	f883 8000 	strb.w	r8, [r3]
 8004c2a:	e784      	b.n	8004b36 <_dtoa_r+0x906>
 8004c2c:	4638      	mov	r0, r7
 8004c2e:	e7c2      	b.n	8004bb6 <_dtoa_r+0x986>
 8004c30:	2301      	movs	r3, #1
 8004c32:	e7e3      	b.n	8004bfc <_dtoa_r+0x9cc>
 8004c34:	9a02      	ldr	r2, [sp, #8]
 8004c36:	2a00      	cmp	r2, #0
 8004c38:	db04      	blt.n	8004c44 <_dtoa_r+0xa14>
 8004c3a:	d123      	bne.n	8004c84 <_dtoa_r+0xa54>
 8004c3c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004c3e:	bb0a      	cbnz	r2, 8004c84 <_dtoa_r+0xa54>
 8004c40:	9a08      	ldr	r2, [sp, #32]
 8004c42:	b9fa      	cbnz	r2, 8004c84 <_dtoa_r+0xa54>
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	ddec      	ble.n	8004c22 <_dtoa_r+0x9f2>
 8004c48:	4659      	mov	r1, fp
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	4620      	mov	r0, r4
 8004c4e:	f000 fa87 	bl	8005160 <__lshift>
 8004c52:	4631      	mov	r1, r6
 8004c54:	4683      	mov	fp, r0
 8004c56:	f000 fad7 	bl	8005208 <__mcmp>
 8004c5a:	2800      	cmp	r0, #0
 8004c5c:	dc03      	bgt.n	8004c66 <_dtoa_r+0xa36>
 8004c5e:	d1e0      	bne.n	8004c22 <_dtoa_r+0x9f2>
 8004c60:	f018 0f01 	tst.w	r8, #1
 8004c64:	d0dd      	beq.n	8004c22 <_dtoa_r+0x9f2>
 8004c66:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004c6a:	d1d8      	bne.n	8004c1e <_dtoa_r+0x9ee>
 8004c6c:	9b07      	ldr	r3, [sp, #28]
 8004c6e:	9a07      	ldr	r2, [sp, #28]
 8004c70:	1c5d      	adds	r5, r3, #1
 8004c72:	2339      	movs	r3, #57	; 0x39
 8004c74:	7013      	strb	r3, [r2, #0]
 8004c76:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004c7a:	1e6a      	subs	r2, r5, #1
 8004c7c:	2b39      	cmp	r3, #57	; 0x39
 8004c7e:	d04d      	beq.n	8004d1c <_dtoa_r+0xaec>
 8004c80:	3301      	adds	r3, #1
 8004c82:	e052      	b.n	8004d2a <_dtoa_r+0xafa>
 8004c84:	9a07      	ldr	r2, [sp, #28]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f102 0501 	add.w	r5, r2, #1
 8004c8c:	dd06      	ble.n	8004c9c <_dtoa_r+0xa6c>
 8004c8e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004c92:	d0eb      	beq.n	8004c6c <_dtoa_r+0xa3c>
 8004c94:	f108 0801 	add.w	r8, r8, #1
 8004c98:	9b07      	ldr	r3, [sp, #28]
 8004c9a:	e7c4      	b.n	8004c26 <_dtoa_r+0x9f6>
 8004c9c:	9b06      	ldr	r3, [sp, #24]
 8004c9e:	9a04      	ldr	r2, [sp, #16]
 8004ca0:	1aeb      	subs	r3, r5, r3
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	f805 8c01 	strb.w	r8, [r5, #-1]
 8004ca8:	d021      	beq.n	8004cee <_dtoa_r+0xabe>
 8004caa:	4659      	mov	r1, fp
 8004cac:	2300      	movs	r3, #0
 8004cae:	220a      	movs	r2, #10
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	f000 f8e0 	bl	8004e76 <__multadd>
 8004cb6:	45b9      	cmp	r9, r7
 8004cb8:	4683      	mov	fp, r0
 8004cba:	f04f 0300 	mov.w	r3, #0
 8004cbe:	f04f 020a 	mov.w	r2, #10
 8004cc2:	4649      	mov	r1, r9
 8004cc4:	4620      	mov	r0, r4
 8004cc6:	d105      	bne.n	8004cd4 <_dtoa_r+0xaa4>
 8004cc8:	f000 f8d5 	bl	8004e76 <__multadd>
 8004ccc:	4681      	mov	r9, r0
 8004cce:	4607      	mov	r7, r0
 8004cd0:	9507      	str	r5, [sp, #28]
 8004cd2:	e778      	b.n	8004bc6 <_dtoa_r+0x996>
 8004cd4:	f000 f8cf 	bl	8004e76 <__multadd>
 8004cd8:	4639      	mov	r1, r7
 8004cda:	4681      	mov	r9, r0
 8004cdc:	2300      	movs	r3, #0
 8004cde:	220a      	movs	r2, #10
 8004ce0:	4620      	mov	r0, r4
 8004ce2:	f000 f8c8 	bl	8004e76 <__multadd>
 8004ce6:	4607      	mov	r7, r0
 8004ce8:	e7f2      	b.n	8004cd0 <_dtoa_r+0xaa0>
 8004cea:	f04f 0900 	mov.w	r9, #0
 8004cee:	4659      	mov	r1, fp
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	4620      	mov	r0, r4
 8004cf4:	f000 fa34 	bl	8005160 <__lshift>
 8004cf8:	4631      	mov	r1, r6
 8004cfa:	4683      	mov	fp, r0
 8004cfc:	f000 fa84 	bl	8005208 <__mcmp>
 8004d00:	2800      	cmp	r0, #0
 8004d02:	dcb8      	bgt.n	8004c76 <_dtoa_r+0xa46>
 8004d04:	d102      	bne.n	8004d0c <_dtoa_r+0xadc>
 8004d06:	f018 0f01 	tst.w	r8, #1
 8004d0a:	d1b4      	bne.n	8004c76 <_dtoa_r+0xa46>
 8004d0c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004d10:	1e6a      	subs	r2, r5, #1
 8004d12:	2b30      	cmp	r3, #48	; 0x30
 8004d14:	f47f af0f 	bne.w	8004b36 <_dtoa_r+0x906>
 8004d18:	4615      	mov	r5, r2
 8004d1a:	e7f7      	b.n	8004d0c <_dtoa_r+0xadc>
 8004d1c:	9b06      	ldr	r3, [sp, #24]
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d105      	bne.n	8004d2e <_dtoa_r+0xafe>
 8004d22:	2331      	movs	r3, #49	; 0x31
 8004d24:	9a06      	ldr	r2, [sp, #24]
 8004d26:	f10a 0a01 	add.w	sl, sl, #1
 8004d2a:	7013      	strb	r3, [r2, #0]
 8004d2c:	e703      	b.n	8004b36 <_dtoa_r+0x906>
 8004d2e:	4615      	mov	r5, r2
 8004d30:	e7a1      	b.n	8004c76 <_dtoa_r+0xa46>
 8004d32:	4b17      	ldr	r3, [pc, #92]	; (8004d90 <_dtoa_r+0xb60>)
 8004d34:	f7ff bae1 	b.w	80042fa <_dtoa_r+0xca>
 8004d38:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f47f aabb 	bne.w	80042b6 <_dtoa_r+0x86>
 8004d40:	4b14      	ldr	r3, [pc, #80]	; (8004d94 <_dtoa_r+0xb64>)
 8004d42:	f7ff bada 	b.w	80042fa <_dtoa_r+0xca>
 8004d46:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	f77f ae3f 	ble.w	80049cc <_dtoa_r+0x79c>
 8004d4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004d50:	9308      	str	r3, [sp, #32]
 8004d52:	e653      	b.n	80049fc <_dtoa_r+0x7cc>
 8004d54:	9b04      	ldr	r3, [sp, #16]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	dc03      	bgt.n	8004d62 <_dtoa_r+0xb32>
 8004d5a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	f73f aed5 	bgt.w	8004b0c <_dtoa_r+0x8dc>
 8004d62:	9d06      	ldr	r5, [sp, #24]
 8004d64:	4631      	mov	r1, r6
 8004d66:	4658      	mov	r0, fp
 8004d68:	f7ff f9d2 	bl	8004110 <quorem>
 8004d6c:	9b06      	ldr	r3, [sp, #24]
 8004d6e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004d72:	f805 8b01 	strb.w	r8, [r5], #1
 8004d76:	9a04      	ldr	r2, [sp, #16]
 8004d78:	1aeb      	subs	r3, r5, r3
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	ddb5      	ble.n	8004cea <_dtoa_r+0xaba>
 8004d7e:	4659      	mov	r1, fp
 8004d80:	2300      	movs	r3, #0
 8004d82:	220a      	movs	r2, #10
 8004d84:	4620      	mov	r0, r4
 8004d86:	f000 f876 	bl	8004e76 <__multadd>
 8004d8a:	4683      	mov	fp, r0
 8004d8c:	e7ea      	b.n	8004d64 <_dtoa_r+0xb34>
 8004d8e:	bf00      	nop
 8004d90:	08005c4c 	.word	0x08005c4c
 8004d94:	08005c70 	.word	0x08005c70

08004d98 <_localeconv_r>:
 8004d98:	4b04      	ldr	r3, [pc, #16]	; (8004dac <_localeconv_r+0x14>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6a18      	ldr	r0, [r3, #32]
 8004d9e:	4b04      	ldr	r3, [pc, #16]	; (8004db0 <_localeconv_r+0x18>)
 8004da0:	2800      	cmp	r0, #0
 8004da2:	bf08      	it	eq
 8004da4:	4618      	moveq	r0, r3
 8004da6:	30f0      	adds	r0, #240	; 0xf0
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	2000000c 	.word	0x2000000c
 8004db0:	20000070 	.word	0x20000070

08004db4 <malloc>:
 8004db4:	4b02      	ldr	r3, [pc, #8]	; (8004dc0 <malloc+0xc>)
 8004db6:	4601      	mov	r1, r0
 8004db8:	6818      	ldr	r0, [r3, #0]
 8004dba:	f000 bb47 	b.w	800544c <_malloc_r>
 8004dbe:	bf00      	nop
 8004dc0:	2000000c 	.word	0x2000000c

08004dc4 <memchr>:
 8004dc4:	b510      	push	{r4, lr}
 8004dc6:	b2c9      	uxtb	r1, r1
 8004dc8:	4402      	add	r2, r0
 8004dca:	4290      	cmp	r0, r2
 8004dcc:	4603      	mov	r3, r0
 8004dce:	d101      	bne.n	8004dd4 <memchr+0x10>
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	e003      	b.n	8004ddc <memchr+0x18>
 8004dd4:	781c      	ldrb	r4, [r3, #0]
 8004dd6:	3001      	adds	r0, #1
 8004dd8:	428c      	cmp	r4, r1
 8004dda:	d1f6      	bne.n	8004dca <memchr+0x6>
 8004ddc:	4618      	mov	r0, r3
 8004dde:	bd10      	pop	{r4, pc}

08004de0 <_Balloc>:
 8004de0:	b570      	push	{r4, r5, r6, lr}
 8004de2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004de4:	4604      	mov	r4, r0
 8004de6:	460e      	mov	r6, r1
 8004de8:	b93d      	cbnz	r5, 8004dfa <_Balloc+0x1a>
 8004dea:	2010      	movs	r0, #16
 8004dec:	f7ff ffe2 	bl	8004db4 <malloc>
 8004df0:	6260      	str	r0, [r4, #36]	; 0x24
 8004df2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004df6:	6005      	str	r5, [r0, #0]
 8004df8:	60c5      	str	r5, [r0, #12]
 8004dfa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004dfc:	68eb      	ldr	r3, [r5, #12]
 8004dfe:	b183      	cbz	r3, 8004e22 <_Balloc+0x42>
 8004e00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004e08:	b9b8      	cbnz	r0, 8004e3a <_Balloc+0x5a>
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	fa01 f506 	lsl.w	r5, r1, r6
 8004e10:	1d6a      	adds	r2, r5, #5
 8004e12:	0092      	lsls	r2, r2, #2
 8004e14:	4620      	mov	r0, r4
 8004e16:	f000 fabe 	bl	8005396 <_calloc_r>
 8004e1a:	b160      	cbz	r0, 8004e36 <_Balloc+0x56>
 8004e1c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8004e20:	e00e      	b.n	8004e40 <_Balloc+0x60>
 8004e22:	2221      	movs	r2, #33	; 0x21
 8004e24:	2104      	movs	r1, #4
 8004e26:	4620      	mov	r0, r4
 8004e28:	f000 fab5 	bl	8005396 <_calloc_r>
 8004e2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e2e:	60e8      	str	r0, [r5, #12]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1e4      	bne.n	8004e00 <_Balloc+0x20>
 8004e36:	2000      	movs	r0, #0
 8004e38:	bd70      	pop	{r4, r5, r6, pc}
 8004e3a:	6802      	ldr	r2, [r0, #0]
 8004e3c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004e40:	2300      	movs	r3, #0
 8004e42:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004e46:	e7f7      	b.n	8004e38 <_Balloc+0x58>

08004e48 <_Bfree>:
 8004e48:	b570      	push	{r4, r5, r6, lr}
 8004e4a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004e4c:	4606      	mov	r6, r0
 8004e4e:	460d      	mov	r5, r1
 8004e50:	b93c      	cbnz	r4, 8004e62 <_Bfree+0x1a>
 8004e52:	2010      	movs	r0, #16
 8004e54:	f7ff ffae 	bl	8004db4 <malloc>
 8004e58:	6270      	str	r0, [r6, #36]	; 0x24
 8004e5a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004e5e:	6004      	str	r4, [r0, #0]
 8004e60:	60c4      	str	r4, [r0, #12]
 8004e62:	b13d      	cbz	r5, 8004e74 <_Bfree+0x2c>
 8004e64:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004e66:	686a      	ldr	r2, [r5, #4]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e6e:	6029      	str	r1, [r5, #0]
 8004e70:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004e74:	bd70      	pop	{r4, r5, r6, pc}

08004e76 <__multadd>:
 8004e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e7a:	461f      	mov	r7, r3
 8004e7c:	4606      	mov	r6, r0
 8004e7e:	460c      	mov	r4, r1
 8004e80:	2300      	movs	r3, #0
 8004e82:	690d      	ldr	r5, [r1, #16]
 8004e84:	f101 0c14 	add.w	ip, r1, #20
 8004e88:	f8dc 0000 	ldr.w	r0, [ip]
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	b281      	uxth	r1, r0
 8004e90:	fb02 7101 	mla	r1, r2, r1, r7
 8004e94:	0c00      	lsrs	r0, r0, #16
 8004e96:	0c0f      	lsrs	r7, r1, #16
 8004e98:	fb02 7000 	mla	r0, r2, r0, r7
 8004e9c:	b289      	uxth	r1, r1
 8004e9e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004ea2:	429d      	cmp	r5, r3
 8004ea4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004ea8:	f84c 1b04 	str.w	r1, [ip], #4
 8004eac:	dcec      	bgt.n	8004e88 <__multadd+0x12>
 8004eae:	b1d7      	cbz	r7, 8004ee6 <__multadd+0x70>
 8004eb0:	68a3      	ldr	r3, [r4, #8]
 8004eb2:	42ab      	cmp	r3, r5
 8004eb4:	dc12      	bgt.n	8004edc <__multadd+0x66>
 8004eb6:	6861      	ldr	r1, [r4, #4]
 8004eb8:	4630      	mov	r0, r6
 8004eba:	3101      	adds	r1, #1
 8004ebc:	f7ff ff90 	bl	8004de0 <_Balloc>
 8004ec0:	4680      	mov	r8, r0
 8004ec2:	6922      	ldr	r2, [r4, #16]
 8004ec4:	f104 010c 	add.w	r1, r4, #12
 8004ec8:	3202      	adds	r2, #2
 8004eca:	0092      	lsls	r2, r2, #2
 8004ecc:	300c      	adds	r0, #12
 8004ece:	f7fe fc9d 	bl	800380c <memcpy>
 8004ed2:	4621      	mov	r1, r4
 8004ed4:	4630      	mov	r0, r6
 8004ed6:	f7ff ffb7 	bl	8004e48 <_Bfree>
 8004eda:	4644      	mov	r4, r8
 8004edc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004ee0:	3501      	adds	r5, #1
 8004ee2:	615f      	str	r7, [r3, #20]
 8004ee4:	6125      	str	r5, [r4, #16]
 8004ee6:	4620      	mov	r0, r4
 8004ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004eec <__hi0bits>:
 8004eec:	0c02      	lsrs	r2, r0, #16
 8004eee:	0412      	lsls	r2, r2, #16
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	b9b2      	cbnz	r2, 8004f22 <__hi0bits+0x36>
 8004ef4:	0403      	lsls	r3, r0, #16
 8004ef6:	2010      	movs	r0, #16
 8004ef8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004efc:	bf04      	itt	eq
 8004efe:	021b      	lsleq	r3, r3, #8
 8004f00:	3008      	addeq	r0, #8
 8004f02:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004f06:	bf04      	itt	eq
 8004f08:	011b      	lsleq	r3, r3, #4
 8004f0a:	3004      	addeq	r0, #4
 8004f0c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004f10:	bf04      	itt	eq
 8004f12:	009b      	lsleq	r3, r3, #2
 8004f14:	3002      	addeq	r0, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	db06      	blt.n	8004f28 <__hi0bits+0x3c>
 8004f1a:	005b      	lsls	r3, r3, #1
 8004f1c:	d503      	bpl.n	8004f26 <__hi0bits+0x3a>
 8004f1e:	3001      	adds	r0, #1
 8004f20:	4770      	bx	lr
 8004f22:	2000      	movs	r0, #0
 8004f24:	e7e8      	b.n	8004ef8 <__hi0bits+0xc>
 8004f26:	2020      	movs	r0, #32
 8004f28:	4770      	bx	lr

08004f2a <__lo0bits>:
 8004f2a:	6803      	ldr	r3, [r0, #0]
 8004f2c:	4601      	mov	r1, r0
 8004f2e:	f013 0207 	ands.w	r2, r3, #7
 8004f32:	d00b      	beq.n	8004f4c <__lo0bits+0x22>
 8004f34:	07da      	lsls	r2, r3, #31
 8004f36:	d423      	bmi.n	8004f80 <__lo0bits+0x56>
 8004f38:	0798      	lsls	r0, r3, #30
 8004f3a:	bf49      	itett	mi
 8004f3c:	085b      	lsrmi	r3, r3, #1
 8004f3e:	089b      	lsrpl	r3, r3, #2
 8004f40:	2001      	movmi	r0, #1
 8004f42:	600b      	strmi	r3, [r1, #0]
 8004f44:	bf5c      	itt	pl
 8004f46:	600b      	strpl	r3, [r1, #0]
 8004f48:	2002      	movpl	r0, #2
 8004f4a:	4770      	bx	lr
 8004f4c:	b298      	uxth	r0, r3
 8004f4e:	b9a8      	cbnz	r0, 8004f7c <__lo0bits+0x52>
 8004f50:	2010      	movs	r0, #16
 8004f52:	0c1b      	lsrs	r3, r3, #16
 8004f54:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004f58:	bf04      	itt	eq
 8004f5a:	0a1b      	lsreq	r3, r3, #8
 8004f5c:	3008      	addeq	r0, #8
 8004f5e:	071a      	lsls	r2, r3, #28
 8004f60:	bf04      	itt	eq
 8004f62:	091b      	lsreq	r3, r3, #4
 8004f64:	3004      	addeq	r0, #4
 8004f66:	079a      	lsls	r2, r3, #30
 8004f68:	bf04      	itt	eq
 8004f6a:	089b      	lsreq	r3, r3, #2
 8004f6c:	3002      	addeq	r0, #2
 8004f6e:	07da      	lsls	r2, r3, #31
 8004f70:	d402      	bmi.n	8004f78 <__lo0bits+0x4e>
 8004f72:	085b      	lsrs	r3, r3, #1
 8004f74:	d006      	beq.n	8004f84 <__lo0bits+0x5a>
 8004f76:	3001      	adds	r0, #1
 8004f78:	600b      	str	r3, [r1, #0]
 8004f7a:	4770      	bx	lr
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	e7e9      	b.n	8004f54 <__lo0bits+0x2a>
 8004f80:	2000      	movs	r0, #0
 8004f82:	4770      	bx	lr
 8004f84:	2020      	movs	r0, #32
 8004f86:	4770      	bx	lr

08004f88 <__i2b>:
 8004f88:	b510      	push	{r4, lr}
 8004f8a:	460c      	mov	r4, r1
 8004f8c:	2101      	movs	r1, #1
 8004f8e:	f7ff ff27 	bl	8004de0 <_Balloc>
 8004f92:	2201      	movs	r2, #1
 8004f94:	6144      	str	r4, [r0, #20]
 8004f96:	6102      	str	r2, [r0, #16]
 8004f98:	bd10      	pop	{r4, pc}

08004f9a <__multiply>:
 8004f9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f9e:	4614      	mov	r4, r2
 8004fa0:	690a      	ldr	r2, [r1, #16]
 8004fa2:	6923      	ldr	r3, [r4, #16]
 8004fa4:	4688      	mov	r8, r1
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	bfbe      	ittt	lt
 8004faa:	460b      	movlt	r3, r1
 8004fac:	46a0      	movlt	r8, r4
 8004fae:	461c      	movlt	r4, r3
 8004fb0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004fb4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004fb8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004fbc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004fc0:	eb07 0609 	add.w	r6, r7, r9
 8004fc4:	42b3      	cmp	r3, r6
 8004fc6:	bfb8      	it	lt
 8004fc8:	3101      	addlt	r1, #1
 8004fca:	f7ff ff09 	bl	8004de0 <_Balloc>
 8004fce:	f100 0514 	add.w	r5, r0, #20
 8004fd2:	462b      	mov	r3, r5
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8004fda:	4573      	cmp	r3, lr
 8004fdc:	d316      	bcc.n	800500c <__multiply+0x72>
 8004fde:	f104 0214 	add.w	r2, r4, #20
 8004fe2:	f108 0114 	add.w	r1, r8, #20
 8004fe6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8004fea:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004fee:	9300      	str	r3, [sp, #0]
 8004ff0:	9b00      	ldr	r3, [sp, #0]
 8004ff2:	9201      	str	r2, [sp, #4]
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d80c      	bhi.n	8005012 <__multiply+0x78>
 8004ff8:	2e00      	cmp	r6, #0
 8004ffa:	dd03      	ble.n	8005004 <__multiply+0x6a>
 8004ffc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005000:	2b00      	cmp	r3, #0
 8005002:	d05d      	beq.n	80050c0 <__multiply+0x126>
 8005004:	6106      	str	r6, [r0, #16]
 8005006:	b003      	add	sp, #12
 8005008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800500c:	f843 2b04 	str.w	r2, [r3], #4
 8005010:	e7e3      	b.n	8004fda <__multiply+0x40>
 8005012:	f8b2 b000 	ldrh.w	fp, [r2]
 8005016:	f1bb 0f00 	cmp.w	fp, #0
 800501a:	d023      	beq.n	8005064 <__multiply+0xca>
 800501c:	4689      	mov	r9, r1
 800501e:	46ac      	mov	ip, r5
 8005020:	f04f 0800 	mov.w	r8, #0
 8005024:	f859 4b04 	ldr.w	r4, [r9], #4
 8005028:	f8dc a000 	ldr.w	sl, [ip]
 800502c:	b2a3      	uxth	r3, r4
 800502e:	fa1f fa8a 	uxth.w	sl, sl
 8005032:	fb0b a303 	mla	r3, fp, r3, sl
 8005036:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800503a:	f8dc 4000 	ldr.w	r4, [ip]
 800503e:	4443      	add	r3, r8
 8005040:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005044:	fb0b 840a 	mla	r4, fp, sl, r8
 8005048:	46e2      	mov	sl, ip
 800504a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800504e:	b29b      	uxth	r3, r3
 8005050:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005054:	454f      	cmp	r7, r9
 8005056:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800505a:	f84a 3b04 	str.w	r3, [sl], #4
 800505e:	d82b      	bhi.n	80050b8 <__multiply+0x11e>
 8005060:	f8cc 8004 	str.w	r8, [ip, #4]
 8005064:	9b01      	ldr	r3, [sp, #4]
 8005066:	3204      	adds	r2, #4
 8005068:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800506c:	f1ba 0f00 	cmp.w	sl, #0
 8005070:	d020      	beq.n	80050b4 <__multiply+0x11a>
 8005072:	4689      	mov	r9, r1
 8005074:	46a8      	mov	r8, r5
 8005076:	f04f 0b00 	mov.w	fp, #0
 800507a:	682b      	ldr	r3, [r5, #0]
 800507c:	f8b9 c000 	ldrh.w	ip, [r9]
 8005080:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005084:	b29b      	uxth	r3, r3
 8005086:	fb0a 440c 	mla	r4, sl, ip, r4
 800508a:	46c4      	mov	ip, r8
 800508c:	445c      	add	r4, fp
 800508e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005092:	f84c 3b04 	str.w	r3, [ip], #4
 8005096:	f859 3b04 	ldr.w	r3, [r9], #4
 800509a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800509e:	0c1b      	lsrs	r3, r3, #16
 80050a0:	fb0a b303 	mla	r3, sl, r3, fp
 80050a4:	454f      	cmp	r7, r9
 80050a6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80050aa:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80050ae:	d805      	bhi.n	80050bc <__multiply+0x122>
 80050b0:	f8c8 3004 	str.w	r3, [r8, #4]
 80050b4:	3504      	adds	r5, #4
 80050b6:	e79b      	b.n	8004ff0 <__multiply+0x56>
 80050b8:	46d4      	mov	ip, sl
 80050ba:	e7b3      	b.n	8005024 <__multiply+0x8a>
 80050bc:	46e0      	mov	r8, ip
 80050be:	e7dd      	b.n	800507c <__multiply+0xe2>
 80050c0:	3e01      	subs	r6, #1
 80050c2:	e799      	b.n	8004ff8 <__multiply+0x5e>

080050c4 <__pow5mult>:
 80050c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050c8:	4615      	mov	r5, r2
 80050ca:	f012 0203 	ands.w	r2, r2, #3
 80050ce:	4606      	mov	r6, r0
 80050d0:	460f      	mov	r7, r1
 80050d2:	d007      	beq.n	80050e4 <__pow5mult+0x20>
 80050d4:	4c21      	ldr	r4, [pc, #132]	; (800515c <__pow5mult+0x98>)
 80050d6:	3a01      	subs	r2, #1
 80050d8:	2300      	movs	r3, #0
 80050da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80050de:	f7ff feca 	bl	8004e76 <__multadd>
 80050e2:	4607      	mov	r7, r0
 80050e4:	10ad      	asrs	r5, r5, #2
 80050e6:	d035      	beq.n	8005154 <__pow5mult+0x90>
 80050e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80050ea:	b93c      	cbnz	r4, 80050fc <__pow5mult+0x38>
 80050ec:	2010      	movs	r0, #16
 80050ee:	f7ff fe61 	bl	8004db4 <malloc>
 80050f2:	6270      	str	r0, [r6, #36]	; 0x24
 80050f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80050f8:	6004      	str	r4, [r0, #0]
 80050fa:	60c4      	str	r4, [r0, #12]
 80050fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005100:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005104:	b94c      	cbnz	r4, 800511a <__pow5mult+0x56>
 8005106:	f240 2171 	movw	r1, #625	; 0x271
 800510a:	4630      	mov	r0, r6
 800510c:	f7ff ff3c 	bl	8004f88 <__i2b>
 8005110:	2300      	movs	r3, #0
 8005112:	4604      	mov	r4, r0
 8005114:	f8c8 0008 	str.w	r0, [r8, #8]
 8005118:	6003      	str	r3, [r0, #0]
 800511a:	f04f 0800 	mov.w	r8, #0
 800511e:	07eb      	lsls	r3, r5, #31
 8005120:	d50a      	bpl.n	8005138 <__pow5mult+0x74>
 8005122:	4639      	mov	r1, r7
 8005124:	4622      	mov	r2, r4
 8005126:	4630      	mov	r0, r6
 8005128:	f7ff ff37 	bl	8004f9a <__multiply>
 800512c:	4681      	mov	r9, r0
 800512e:	4639      	mov	r1, r7
 8005130:	4630      	mov	r0, r6
 8005132:	f7ff fe89 	bl	8004e48 <_Bfree>
 8005136:	464f      	mov	r7, r9
 8005138:	106d      	asrs	r5, r5, #1
 800513a:	d00b      	beq.n	8005154 <__pow5mult+0x90>
 800513c:	6820      	ldr	r0, [r4, #0]
 800513e:	b938      	cbnz	r0, 8005150 <__pow5mult+0x8c>
 8005140:	4622      	mov	r2, r4
 8005142:	4621      	mov	r1, r4
 8005144:	4630      	mov	r0, r6
 8005146:	f7ff ff28 	bl	8004f9a <__multiply>
 800514a:	6020      	str	r0, [r4, #0]
 800514c:	f8c0 8000 	str.w	r8, [r0]
 8005150:	4604      	mov	r4, r0
 8005152:	e7e4      	b.n	800511e <__pow5mult+0x5a>
 8005154:	4638      	mov	r0, r7
 8005156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800515a:	bf00      	nop
 800515c:	08005d70 	.word	0x08005d70

08005160 <__lshift>:
 8005160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005164:	460c      	mov	r4, r1
 8005166:	4607      	mov	r7, r0
 8005168:	4616      	mov	r6, r2
 800516a:	6923      	ldr	r3, [r4, #16]
 800516c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005170:	eb0a 0903 	add.w	r9, sl, r3
 8005174:	6849      	ldr	r1, [r1, #4]
 8005176:	68a3      	ldr	r3, [r4, #8]
 8005178:	f109 0501 	add.w	r5, r9, #1
 800517c:	42ab      	cmp	r3, r5
 800517e:	db32      	blt.n	80051e6 <__lshift+0x86>
 8005180:	4638      	mov	r0, r7
 8005182:	f7ff fe2d 	bl	8004de0 <_Balloc>
 8005186:	2300      	movs	r3, #0
 8005188:	4680      	mov	r8, r0
 800518a:	461a      	mov	r2, r3
 800518c:	f100 0114 	add.w	r1, r0, #20
 8005190:	4553      	cmp	r3, sl
 8005192:	db2b      	blt.n	80051ec <__lshift+0x8c>
 8005194:	6920      	ldr	r0, [r4, #16]
 8005196:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800519a:	f104 0314 	add.w	r3, r4, #20
 800519e:	f016 021f 	ands.w	r2, r6, #31
 80051a2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80051a6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80051aa:	d025      	beq.n	80051f8 <__lshift+0x98>
 80051ac:	2000      	movs	r0, #0
 80051ae:	f1c2 0e20 	rsb	lr, r2, #32
 80051b2:	468a      	mov	sl, r1
 80051b4:	681e      	ldr	r6, [r3, #0]
 80051b6:	4096      	lsls	r6, r2
 80051b8:	4330      	orrs	r0, r6
 80051ba:	f84a 0b04 	str.w	r0, [sl], #4
 80051be:	f853 0b04 	ldr.w	r0, [r3], #4
 80051c2:	459c      	cmp	ip, r3
 80051c4:	fa20 f00e 	lsr.w	r0, r0, lr
 80051c8:	d814      	bhi.n	80051f4 <__lshift+0x94>
 80051ca:	6048      	str	r0, [r1, #4]
 80051cc:	b108      	cbz	r0, 80051d2 <__lshift+0x72>
 80051ce:	f109 0502 	add.w	r5, r9, #2
 80051d2:	3d01      	subs	r5, #1
 80051d4:	4638      	mov	r0, r7
 80051d6:	f8c8 5010 	str.w	r5, [r8, #16]
 80051da:	4621      	mov	r1, r4
 80051dc:	f7ff fe34 	bl	8004e48 <_Bfree>
 80051e0:	4640      	mov	r0, r8
 80051e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051e6:	3101      	adds	r1, #1
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	e7c7      	b.n	800517c <__lshift+0x1c>
 80051ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80051f0:	3301      	adds	r3, #1
 80051f2:	e7cd      	b.n	8005190 <__lshift+0x30>
 80051f4:	4651      	mov	r1, sl
 80051f6:	e7dc      	b.n	80051b2 <__lshift+0x52>
 80051f8:	3904      	subs	r1, #4
 80051fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80051fe:	459c      	cmp	ip, r3
 8005200:	f841 2f04 	str.w	r2, [r1, #4]!
 8005204:	d8f9      	bhi.n	80051fa <__lshift+0x9a>
 8005206:	e7e4      	b.n	80051d2 <__lshift+0x72>

08005208 <__mcmp>:
 8005208:	6903      	ldr	r3, [r0, #16]
 800520a:	690a      	ldr	r2, [r1, #16]
 800520c:	b530      	push	{r4, r5, lr}
 800520e:	1a9b      	subs	r3, r3, r2
 8005210:	d10c      	bne.n	800522c <__mcmp+0x24>
 8005212:	0092      	lsls	r2, r2, #2
 8005214:	3014      	adds	r0, #20
 8005216:	3114      	adds	r1, #20
 8005218:	1884      	adds	r4, r0, r2
 800521a:	4411      	add	r1, r2
 800521c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005220:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005224:	4295      	cmp	r5, r2
 8005226:	d003      	beq.n	8005230 <__mcmp+0x28>
 8005228:	d305      	bcc.n	8005236 <__mcmp+0x2e>
 800522a:	2301      	movs	r3, #1
 800522c:	4618      	mov	r0, r3
 800522e:	bd30      	pop	{r4, r5, pc}
 8005230:	42a0      	cmp	r0, r4
 8005232:	d3f3      	bcc.n	800521c <__mcmp+0x14>
 8005234:	e7fa      	b.n	800522c <__mcmp+0x24>
 8005236:	f04f 33ff 	mov.w	r3, #4294967295
 800523a:	e7f7      	b.n	800522c <__mcmp+0x24>

0800523c <__mdiff>:
 800523c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005240:	460d      	mov	r5, r1
 8005242:	4607      	mov	r7, r0
 8005244:	4611      	mov	r1, r2
 8005246:	4628      	mov	r0, r5
 8005248:	4614      	mov	r4, r2
 800524a:	f7ff ffdd 	bl	8005208 <__mcmp>
 800524e:	1e06      	subs	r6, r0, #0
 8005250:	d108      	bne.n	8005264 <__mdiff+0x28>
 8005252:	4631      	mov	r1, r6
 8005254:	4638      	mov	r0, r7
 8005256:	f7ff fdc3 	bl	8004de0 <_Balloc>
 800525a:	2301      	movs	r3, #1
 800525c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005264:	bfa4      	itt	ge
 8005266:	4623      	movge	r3, r4
 8005268:	462c      	movge	r4, r5
 800526a:	4638      	mov	r0, r7
 800526c:	6861      	ldr	r1, [r4, #4]
 800526e:	bfa6      	itte	ge
 8005270:	461d      	movge	r5, r3
 8005272:	2600      	movge	r6, #0
 8005274:	2601      	movlt	r6, #1
 8005276:	f7ff fdb3 	bl	8004de0 <_Balloc>
 800527a:	f04f 0e00 	mov.w	lr, #0
 800527e:	60c6      	str	r6, [r0, #12]
 8005280:	692b      	ldr	r3, [r5, #16]
 8005282:	6926      	ldr	r6, [r4, #16]
 8005284:	f104 0214 	add.w	r2, r4, #20
 8005288:	f105 0914 	add.w	r9, r5, #20
 800528c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005290:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005294:	f100 0114 	add.w	r1, r0, #20
 8005298:	f852 ab04 	ldr.w	sl, [r2], #4
 800529c:	f859 5b04 	ldr.w	r5, [r9], #4
 80052a0:	fa1f f38a 	uxth.w	r3, sl
 80052a4:	4473      	add	r3, lr
 80052a6:	b2ac      	uxth	r4, r5
 80052a8:	1b1b      	subs	r3, r3, r4
 80052aa:	0c2c      	lsrs	r4, r5, #16
 80052ac:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80052b0:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80052ba:	45c8      	cmp	r8, r9
 80052bc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80052c0:	4694      	mov	ip, r2
 80052c2:	f841 4b04 	str.w	r4, [r1], #4
 80052c6:	d8e7      	bhi.n	8005298 <__mdiff+0x5c>
 80052c8:	45bc      	cmp	ip, r7
 80052ca:	d304      	bcc.n	80052d6 <__mdiff+0x9a>
 80052cc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80052d0:	b183      	cbz	r3, 80052f4 <__mdiff+0xb8>
 80052d2:	6106      	str	r6, [r0, #16]
 80052d4:	e7c4      	b.n	8005260 <__mdiff+0x24>
 80052d6:	f85c 4b04 	ldr.w	r4, [ip], #4
 80052da:	b2a2      	uxth	r2, r4
 80052dc:	4472      	add	r2, lr
 80052de:	1413      	asrs	r3, r2, #16
 80052e0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80052e4:	b292      	uxth	r2, r2
 80052e6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80052ea:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80052ee:	f841 2b04 	str.w	r2, [r1], #4
 80052f2:	e7e9      	b.n	80052c8 <__mdiff+0x8c>
 80052f4:	3e01      	subs	r6, #1
 80052f6:	e7e9      	b.n	80052cc <__mdiff+0x90>

080052f8 <__d2b>:
 80052f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80052fc:	461c      	mov	r4, r3
 80052fe:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8005302:	2101      	movs	r1, #1
 8005304:	4690      	mov	r8, r2
 8005306:	f7ff fd6b 	bl	8004de0 <_Balloc>
 800530a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800530e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005312:	4607      	mov	r7, r0
 8005314:	bb34      	cbnz	r4, 8005364 <__d2b+0x6c>
 8005316:	9201      	str	r2, [sp, #4]
 8005318:	f1b8 0200 	subs.w	r2, r8, #0
 800531c:	d027      	beq.n	800536e <__d2b+0x76>
 800531e:	a802      	add	r0, sp, #8
 8005320:	f840 2d08 	str.w	r2, [r0, #-8]!
 8005324:	f7ff fe01 	bl	8004f2a <__lo0bits>
 8005328:	9900      	ldr	r1, [sp, #0]
 800532a:	b1f0      	cbz	r0, 800536a <__d2b+0x72>
 800532c:	9a01      	ldr	r2, [sp, #4]
 800532e:	f1c0 0320 	rsb	r3, r0, #32
 8005332:	fa02 f303 	lsl.w	r3, r2, r3
 8005336:	430b      	orrs	r3, r1
 8005338:	40c2      	lsrs	r2, r0
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	9201      	str	r2, [sp, #4]
 800533e:	9b01      	ldr	r3, [sp, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	bf14      	ite	ne
 8005344:	2102      	movne	r1, #2
 8005346:	2101      	moveq	r1, #1
 8005348:	61bb      	str	r3, [r7, #24]
 800534a:	6139      	str	r1, [r7, #16]
 800534c:	b1c4      	cbz	r4, 8005380 <__d2b+0x88>
 800534e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005352:	4404      	add	r4, r0
 8005354:	6034      	str	r4, [r6, #0]
 8005356:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800535a:	6028      	str	r0, [r5, #0]
 800535c:	4638      	mov	r0, r7
 800535e:	b002      	add	sp, #8
 8005360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005364:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005368:	e7d5      	b.n	8005316 <__d2b+0x1e>
 800536a:	6179      	str	r1, [r7, #20]
 800536c:	e7e7      	b.n	800533e <__d2b+0x46>
 800536e:	a801      	add	r0, sp, #4
 8005370:	f7ff fddb 	bl	8004f2a <__lo0bits>
 8005374:	2101      	movs	r1, #1
 8005376:	9b01      	ldr	r3, [sp, #4]
 8005378:	6139      	str	r1, [r7, #16]
 800537a:	617b      	str	r3, [r7, #20]
 800537c:	3020      	adds	r0, #32
 800537e:	e7e5      	b.n	800534c <__d2b+0x54>
 8005380:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005384:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005388:	6030      	str	r0, [r6, #0]
 800538a:	6918      	ldr	r0, [r3, #16]
 800538c:	f7ff fdae 	bl	8004eec <__hi0bits>
 8005390:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005394:	e7e1      	b.n	800535a <__d2b+0x62>

08005396 <_calloc_r>:
 8005396:	b538      	push	{r3, r4, r5, lr}
 8005398:	fb02 f401 	mul.w	r4, r2, r1
 800539c:	4621      	mov	r1, r4
 800539e:	f000 f855 	bl	800544c <_malloc_r>
 80053a2:	4605      	mov	r5, r0
 80053a4:	b118      	cbz	r0, 80053ae <_calloc_r+0x18>
 80053a6:	4622      	mov	r2, r4
 80053a8:	2100      	movs	r1, #0
 80053aa:	f7fe fa3a 	bl	8003822 <memset>
 80053ae:	4628      	mov	r0, r5
 80053b0:	bd38      	pop	{r3, r4, r5, pc}
	...

080053b4 <_free_r>:
 80053b4:	b538      	push	{r3, r4, r5, lr}
 80053b6:	4605      	mov	r5, r0
 80053b8:	2900      	cmp	r1, #0
 80053ba:	d043      	beq.n	8005444 <_free_r+0x90>
 80053bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053c0:	1f0c      	subs	r4, r1, #4
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	bfb8      	it	lt
 80053c6:	18e4      	addlt	r4, r4, r3
 80053c8:	f000 fa27 	bl	800581a <__malloc_lock>
 80053cc:	4a1e      	ldr	r2, [pc, #120]	; (8005448 <_free_r+0x94>)
 80053ce:	6813      	ldr	r3, [r2, #0]
 80053d0:	4610      	mov	r0, r2
 80053d2:	b933      	cbnz	r3, 80053e2 <_free_r+0x2e>
 80053d4:	6063      	str	r3, [r4, #4]
 80053d6:	6014      	str	r4, [r2, #0]
 80053d8:	4628      	mov	r0, r5
 80053da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053de:	f000 ba1d 	b.w	800581c <__malloc_unlock>
 80053e2:	42a3      	cmp	r3, r4
 80053e4:	d90b      	bls.n	80053fe <_free_r+0x4a>
 80053e6:	6821      	ldr	r1, [r4, #0]
 80053e8:	1862      	adds	r2, r4, r1
 80053ea:	4293      	cmp	r3, r2
 80053ec:	bf01      	itttt	eq
 80053ee:	681a      	ldreq	r2, [r3, #0]
 80053f0:	685b      	ldreq	r3, [r3, #4]
 80053f2:	1852      	addeq	r2, r2, r1
 80053f4:	6022      	streq	r2, [r4, #0]
 80053f6:	6063      	str	r3, [r4, #4]
 80053f8:	6004      	str	r4, [r0, #0]
 80053fa:	e7ed      	b.n	80053d8 <_free_r+0x24>
 80053fc:	4613      	mov	r3, r2
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	b10a      	cbz	r2, 8005406 <_free_r+0x52>
 8005402:	42a2      	cmp	r2, r4
 8005404:	d9fa      	bls.n	80053fc <_free_r+0x48>
 8005406:	6819      	ldr	r1, [r3, #0]
 8005408:	1858      	adds	r0, r3, r1
 800540a:	42a0      	cmp	r0, r4
 800540c:	d10b      	bne.n	8005426 <_free_r+0x72>
 800540e:	6820      	ldr	r0, [r4, #0]
 8005410:	4401      	add	r1, r0
 8005412:	1858      	adds	r0, r3, r1
 8005414:	4282      	cmp	r2, r0
 8005416:	6019      	str	r1, [r3, #0]
 8005418:	d1de      	bne.n	80053d8 <_free_r+0x24>
 800541a:	6810      	ldr	r0, [r2, #0]
 800541c:	6852      	ldr	r2, [r2, #4]
 800541e:	4401      	add	r1, r0
 8005420:	6019      	str	r1, [r3, #0]
 8005422:	605a      	str	r2, [r3, #4]
 8005424:	e7d8      	b.n	80053d8 <_free_r+0x24>
 8005426:	d902      	bls.n	800542e <_free_r+0x7a>
 8005428:	230c      	movs	r3, #12
 800542a:	602b      	str	r3, [r5, #0]
 800542c:	e7d4      	b.n	80053d8 <_free_r+0x24>
 800542e:	6820      	ldr	r0, [r4, #0]
 8005430:	1821      	adds	r1, r4, r0
 8005432:	428a      	cmp	r2, r1
 8005434:	bf01      	itttt	eq
 8005436:	6811      	ldreq	r1, [r2, #0]
 8005438:	6852      	ldreq	r2, [r2, #4]
 800543a:	1809      	addeq	r1, r1, r0
 800543c:	6021      	streq	r1, [r4, #0]
 800543e:	6062      	str	r2, [r4, #4]
 8005440:	605c      	str	r4, [r3, #4]
 8005442:	e7c9      	b.n	80053d8 <_free_r+0x24>
 8005444:	bd38      	pop	{r3, r4, r5, pc}
 8005446:	bf00      	nop
 8005448:	200001fc 	.word	0x200001fc

0800544c <_malloc_r>:
 800544c:	b570      	push	{r4, r5, r6, lr}
 800544e:	1ccd      	adds	r5, r1, #3
 8005450:	f025 0503 	bic.w	r5, r5, #3
 8005454:	3508      	adds	r5, #8
 8005456:	2d0c      	cmp	r5, #12
 8005458:	bf38      	it	cc
 800545a:	250c      	movcc	r5, #12
 800545c:	2d00      	cmp	r5, #0
 800545e:	4606      	mov	r6, r0
 8005460:	db01      	blt.n	8005466 <_malloc_r+0x1a>
 8005462:	42a9      	cmp	r1, r5
 8005464:	d903      	bls.n	800546e <_malloc_r+0x22>
 8005466:	230c      	movs	r3, #12
 8005468:	6033      	str	r3, [r6, #0]
 800546a:	2000      	movs	r0, #0
 800546c:	bd70      	pop	{r4, r5, r6, pc}
 800546e:	f000 f9d4 	bl	800581a <__malloc_lock>
 8005472:	4a21      	ldr	r2, [pc, #132]	; (80054f8 <_malloc_r+0xac>)
 8005474:	6814      	ldr	r4, [r2, #0]
 8005476:	4621      	mov	r1, r4
 8005478:	b991      	cbnz	r1, 80054a0 <_malloc_r+0x54>
 800547a:	4c20      	ldr	r4, [pc, #128]	; (80054fc <_malloc_r+0xb0>)
 800547c:	6823      	ldr	r3, [r4, #0]
 800547e:	b91b      	cbnz	r3, 8005488 <_malloc_r+0x3c>
 8005480:	4630      	mov	r0, r6
 8005482:	f000 f98f 	bl	80057a4 <_sbrk_r>
 8005486:	6020      	str	r0, [r4, #0]
 8005488:	4629      	mov	r1, r5
 800548a:	4630      	mov	r0, r6
 800548c:	f000 f98a 	bl	80057a4 <_sbrk_r>
 8005490:	1c43      	adds	r3, r0, #1
 8005492:	d124      	bne.n	80054de <_malloc_r+0x92>
 8005494:	230c      	movs	r3, #12
 8005496:	4630      	mov	r0, r6
 8005498:	6033      	str	r3, [r6, #0]
 800549a:	f000 f9bf 	bl	800581c <__malloc_unlock>
 800549e:	e7e4      	b.n	800546a <_malloc_r+0x1e>
 80054a0:	680b      	ldr	r3, [r1, #0]
 80054a2:	1b5b      	subs	r3, r3, r5
 80054a4:	d418      	bmi.n	80054d8 <_malloc_r+0x8c>
 80054a6:	2b0b      	cmp	r3, #11
 80054a8:	d90f      	bls.n	80054ca <_malloc_r+0x7e>
 80054aa:	600b      	str	r3, [r1, #0]
 80054ac:	18cc      	adds	r4, r1, r3
 80054ae:	50cd      	str	r5, [r1, r3]
 80054b0:	4630      	mov	r0, r6
 80054b2:	f000 f9b3 	bl	800581c <__malloc_unlock>
 80054b6:	f104 000b 	add.w	r0, r4, #11
 80054ba:	1d23      	adds	r3, r4, #4
 80054bc:	f020 0007 	bic.w	r0, r0, #7
 80054c0:	1ac3      	subs	r3, r0, r3
 80054c2:	d0d3      	beq.n	800546c <_malloc_r+0x20>
 80054c4:	425a      	negs	r2, r3
 80054c6:	50e2      	str	r2, [r4, r3]
 80054c8:	e7d0      	b.n	800546c <_malloc_r+0x20>
 80054ca:	684b      	ldr	r3, [r1, #4]
 80054cc:	428c      	cmp	r4, r1
 80054ce:	bf16      	itet	ne
 80054d0:	6063      	strne	r3, [r4, #4]
 80054d2:	6013      	streq	r3, [r2, #0]
 80054d4:	460c      	movne	r4, r1
 80054d6:	e7eb      	b.n	80054b0 <_malloc_r+0x64>
 80054d8:	460c      	mov	r4, r1
 80054da:	6849      	ldr	r1, [r1, #4]
 80054dc:	e7cc      	b.n	8005478 <_malloc_r+0x2c>
 80054de:	1cc4      	adds	r4, r0, #3
 80054e0:	f024 0403 	bic.w	r4, r4, #3
 80054e4:	42a0      	cmp	r0, r4
 80054e6:	d005      	beq.n	80054f4 <_malloc_r+0xa8>
 80054e8:	1a21      	subs	r1, r4, r0
 80054ea:	4630      	mov	r0, r6
 80054ec:	f000 f95a 	bl	80057a4 <_sbrk_r>
 80054f0:	3001      	adds	r0, #1
 80054f2:	d0cf      	beq.n	8005494 <_malloc_r+0x48>
 80054f4:	6025      	str	r5, [r4, #0]
 80054f6:	e7db      	b.n	80054b0 <_malloc_r+0x64>
 80054f8:	200001fc 	.word	0x200001fc
 80054fc:	20000200 	.word	0x20000200

08005500 <__ssputs_r>:
 8005500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005504:	688e      	ldr	r6, [r1, #8]
 8005506:	4682      	mov	sl, r0
 8005508:	429e      	cmp	r6, r3
 800550a:	460c      	mov	r4, r1
 800550c:	4690      	mov	r8, r2
 800550e:	4699      	mov	r9, r3
 8005510:	d837      	bhi.n	8005582 <__ssputs_r+0x82>
 8005512:	898a      	ldrh	r2, [r1, #12]
 8005514:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005518:	d031      	beq.n	800557e <__ssputs_r+0x7e>
 800551a:	2302      	movs	r3, #2
 800551c:	6825      	ldr	r5, [r4, #0]
 800551e:	6909      	ldr	r1, [r1, #16]
 8005520:	1a6f      	subs	r7, r5, r1
 8005522:	6965      	ldr	r5, [r4, #20]
 8005524:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005528:	fb95 f5f3 	sdiv	r5, r5, r3
 800552c:	f109 0301 	add.w	r3, r9, #1
 8005530:	443b      	add	r3, r7
 8005532:	429d      	cmp	r5, r3
 8005534:	bf38      	it	cc
 8005536:	461d      	movcc	r5, r3
 8005538:	0553      	lsls	r3, r2, #21
 800553a:	d530      	bpl.n	800559e <__ssputs_r+0x9e>
 800553c:	4629      	mov	r1, r5
 800553e:	f7ff ff85 	bl	800544c <_malloc_r>
 8005542:	4606      	mov	r6, r0
 8005544:	b950      	cbnz	r0, 800555c <__ssputs_r+0x5c>
 8005546:	230c      	movs	r3, #12
 8005548:	f04f 30ff 	mov.w	r0, #4294967295
 800554c:	f8ca 3000 	str.w	r3, [sl]
 8005550:	89a3      	ldrh	r3, [r4, #12]
 8005552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005556:	81a3      	strh	r3, [r4, #12]
 8005558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800555c:	463a      	mov	r2, r7
 800555e:	6921      	ldr	r1, [r4, #16]
 8005560:	f7fe f954 	bl	800380c <memcpy>
 8005564:	89a3      	ldrh	r3, [r4, #12]
 8005566:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800556a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800556e:	81a3      	strh	r3, [r4, #12]
 8005570:	6126      	str	r6, [r4, #16]
 8005572:	443e      	add	r6, r7
 8005574:	6026      	str	r6, [r4, #0]
 8005576:	464e      	mov	r6, r9
 8005578:	6165      	str	r5, [r4, #20]
 800557a:	1bed      	subs	r5, r5, r7
 800557c:	60a5      	str	r5, [r4, #8]
 800557e:	454e      	cmp	r6, r9
 8005580:	d900      	bls.n	8005584 <__ssputs_r+0x84>
 8005582:	464e      	mov	r6, r9
 8005584:	4632      	mov	r2, r6
 8005586:	4641      	mov	r1, r8
 8005588:	6820      	ldr	r0, [r4, #0]
 800558a:	f000 f92d 	bl	80057e8 <memmove>
 800558e:	68a3      	ldr	r3, [r4, #8]
 8005590:	2000      	movs	r0, #0
 8005592:	1b9b      	subs	r3, r3, r6
 8005594:	60a3      	str	r3, [r4, #8]
 8005596:	6823      	ldr	r3, [r4, #0]
 8005598:	441e      	add	r6, r3
 800559a:	6026      	str	r6, [r4, #0]
 800559c:	e7dc      	b.n	8005558 <__ssputs_r+0x58>
 800559e:	462a      	mov	r2, r5
 80055a0:	f000 f93d 	bl	800581e <_realloc_r>
 80055a4:	4606      	mov	r6, r0
 80055a6:	2800      	cmp	r0, #0
 80055a8:	d1e2      	bne.n	8005570 <__ssputs_r+0x70>
 80055aa:	6921      	ldr	r1, [r4, #16]
 80055ac:	4650      	mov	r0, sl
 80055ae:	f7ff ff01 	bl	80053b4 <_free_r>
 80055b2:	e7c8      	b.n	8005546 <__ssputs_r+0x46>

080055b4 <_svfiprintf_r>:
 80055b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055b8:	461d      	mov	r5, r3
 80055ba:	898b      	ldrh	r3, [r1, #12]
 80055bc:	b09d      	sub	sp, #116	; 0x74
 80055be:	061f      	lsls	r7, r3, #24
 80055c0:	4680      	mov	r8, r0
 80055c2:	460c      	mov	r4, r1
 80055c4:	4616      	mov	r6, r2
 80055c6:	d50f      	bpl.n	80055e8 <_svfiprintf_r+0x34>
 80055c8:	690b      	ldr	r3, [r1, #16]
 80055ca:	b96b      	cbnz	r3, 80055e8 <_svfiprintf_r+0x34>
 80055cc:	2140      	movs	r1, #64	; 0x40
 80055ce:	f7ff ff3d 	bl	800544c <_malloc_r>
 80055d2:	6020      	str	r0, [r4, #0]
 80055d4:	6120      	str	r0, [r4, #16]
 80055d6:	b928      	cbnz	r0, 80055e4 <_svfiprintf_r+0x30>
 80055d8:	230c      	movs	r3, #12
 80055da:	f8c8 3000 	str.w	r3, [r8]
 80055de:	f04f 30ff 	mov.w	r0, #4294967295
 80055e2:	e0c8      	b.n	8005776 <_svfiprintf_r+0x1c2>
 80055e4:	2340      	movs	r3, #64	; 0x40
 80055e6:	6163      	str	r3, [r4, #20]
 80055e8:	2300      	movs	r3, #0
 80055ea:	9309      	str	r3, [sp, #36]	; 0x24
 80055ec:	2320      	movs	r3, #32
 80055ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055f2:	2330      	movs	r3, #48	; 0x30
 80055f4:	f04f 0b01 	mov.w	fp, #1
 80055f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055fc:	9503      	str	r5, [sp, #12]
 80055fe:	4637      	mov	r7, r6
 8005600:	463d      	mov	r5, r7
 8005602:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005606:	b10b      	cbz	r3, 800560c <_svfiprintf_r+0x58>
 8005608:	2b25      	cmp	r3, #37	; 0x25
 800560a:	d13e      	bne.n	800568a <_svfiprintf_r+0xd6>
 800560c:	ebb7 0a06 	subs.w	sl, r7, r6
 8005610:	d00b      	beq.n	800562a <_svfiprintf_r+0x76>
 8005612:	4653      	mov	r3, sl
 8005614:	4632      	mov	r2, r6
 8005616:	4621      	mov	r1, r4
 8005618:	4640      	mov	r0, r8
 800561a:	f7ff ff71 	bl	8005500 <__ssputs_r>
 800561e:	3001      	adds	r0, #1
 8005620:	f000 80a4 	beq.w	800576c <_svfiprintf_r+0x1b8>
 8005624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005626:	4453      	add	r3, sl
 8005628:	9309      	str	r3, [sp, #36]	; 0x24
 800562a:	783b      	ldrb	r3, [r7, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 809d 	beq.w	800576c <_svfiprintf_r+0x1b8>
 8005632:	2300      	movs	r3, #0
 8005634:	f04f 32ff 	mov.w	r2, #4294967295
 8005638:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800563c:	9304      	str	r3, [sp, #16]
 800563e:	9307      	str	r3, [sp, #28]
 8005640:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005644:	931a      	str	r3, [sp, #104]	; 0x68
 8005646:	462f      	mov	r7, r5
 8005648:	2205      	movs	r2, #5
 800564a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800564e:	4850      	ldr	r0, [pc, #320]	; (8005790 <_svfiprintf_r+0x1dc>)
 8005650:	f7ff fbb8 	bl	8004dc4 <memchr>
 8005654:	9b04      	ldr	r3, [sp, #16]
 8005656:	b9d0      	cbnz	r0, 800568e <_svfiprintf_r+0xda>
 8005658:	06d9      	lsls	r1, r3, #27
 800565a:	bf44      	itt	mi
 800565c:	2220      	movmi	r2, #32
 800565e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005662:	071a      	lsls	r2, r3, #28
 8005664:	bf44      	itt	mi
 8005666:	222b      	movmi	r2, #43	; 0x2b
 8005668:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800566c:	782a      	ldrb	r2, [r5, #0]
 800566e:	2a2a      	cmp	r2, #42	; 0x2a
 8005670:	d015      	beq.n	800569e <_svfiprintf_r+0xea>
 8005672:	462f      	mov	r7, r5
 8005674:	2000      	movs	r0, #0
 8005676:	250a      	movs	r5, #10
 8005678:	9a07      	ldr	r2, [sp, #28]
 800567a:	4639      	mov	r1, r7
 800567c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005680:	3b30      	subs	r3, #48	; 0x30
 8005682:	2b09      	cmp	r3, #9
 8005684:	d94d      	bls.n	8005722 <_svfiprintf_r+0x16e>
 8005686:	b1b8      	cbz	r0, 80056b8 <_svfiprintf_r+0x104>
 8005688:	e00f      	b.n	80056aa <_svfiprintf_r+0xf6>
 800568a:	462f      	mov	r7, r5
 800568c:	e7b8      	b.n	8005600 <_svfiprintf_r+0x4c>
 800568e:	4a40      	ldr	r2, [pc, #256]	; (8005790 <_svfiprintf_r+0x1dc>)
 8005690:	463d      	mov	r5, r7
 8005692:	1a80      	subs	r0, r0, r2
 8005694:	fa0b f000 	lsl.w	r0, fp, r0
 8005698:	4318      	orrs	r0, r3
 800569a:	9004      	str	r0, [sp, #16]
 800569c:	e7d3      	b.n	8005646 <_svfiprintf_r+0x92>
 800569e:	9a03      	ldr	r2, [sp, #12]
 80056a0:	1d11      	adds	r1, r2, #4
 80056a2:	6812      	ldr	r2, [r2, #0]
 80056a4:	9103      	str	r1, [sp, #12]
 80056a6:	2a00      	cmp	r2, #0
 80056a8:	db01      	blt.n	80056ae <_svfiprintf_r+0xfa>
 80056aa:	9207      	str	r2, [sp, #28]
 80056ac:	e004      	b.n	80056b8 <_svfiprintf_r+0x104>
 80056ae:	4252      	negs	r2, r2
 80056b0:	f043 0302 	orr.w	r3, r3, #2
 80056b4:	9207      	str	r2, [sp, #28]
 80056b6:	9304      	str	r3, [sp, #16]
 80056b8:	783b      	ldrb	r3, [r7, #0]
 80056ba:	2b2e      	cmp	r3, #46	; 0x2e
 80056bc:	d10c      	bne.n	80056d8 <_svfiprintf_r+0x124>
 80056be:	787b      	ldrb	r3, [r7, #1]
 80056c0:	2b2a      	cmp	r3, #42	; 0x2a
 80056c2:	d133      	bne.n	800572c <_svfiprintf_r+0x178>
 80056c4:	9b03      	ldr	r3, [sp, #12]
 80056c6:	3702      	adds	r7, #2
 80056c8:	1d1a      	adds	r2, r3, #4
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	9203      	str	r2, [sp, #12]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	bfb8      	it	lt
 80056d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80056d6:	9305      	str	r3, [sp, #20]
 80056d8:	4d2e      	ldr	r5, [pc, #184]	; (8005794 <_svfiprintf_r+0x1e0>)
 80056da:	2203      	movs	r2, #3
 80056dc:	7839      	ldrb	r1, [r7, #0]
 80056de:	4628      	mov	r0, r5
 80056e0:	f7ff fb70 	bl	8004dc4 <memchr>
 80056e4:	b138      	cbz	r0, 80056f6 <_svfiprintf_r+0x142>
 80056e6:	2340      	movs	r3, #64	; 0x40
 80056e8:	1b40      	subs	r0, r0, r5
 80056ea:	fa03 f000 	lsl.w	r0, r3, r0
 80056ee:	9b04      	ldr	r3, [sp, #16]
 80056f0:	3701      	adds	r7, #1
 80056f2:	4303      	orrs	r3, r0
 80056f4:	9304      	str	r3, [sp, #16]
 80056f6:	7839      	ldrb	r1, [r7, #0]
 80056f8:	2206      	movs	r2, #6
 80056fa:	4827      	ldr	r0, [pc, #156]	; (8005798 <_svfiprintf_r+0x1e4>)
 80056fc:	1c7e      	adds	r6, r7, #1
 80056fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005702:	f7ff fb5f 	bl	8004dc4 <memchr>
 8005706:	2800      	cmp	r0, #0
 8005708:	d038      	beq.n	800577c <_svfiprintf_r+0x1c8>
 800570a:	4b24      	ldr	r3, [pc, #144]	; (800579c <_svfiprintf_r+0x1e8>)
 800570c:	bb13      	cbnz	r3, 8005754 <_svfiprintf_r+0x1a0>
 800570e:	9b03      	ldr	r3, [sp, #12]
 8005710:	3307      	adds	r3, #7
 8005712:	f023 0307 	bic.w	r3, r3, #7
 8005716:	3308      	adds	r3, #8
 8005718:	9303      	str	r3, [sp, #12]
 800571a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800571c:	444b      	add	r3, r9
 800571e:	9309      	str	r3, [sp, #36]	; 0x24
 8005720:	e76d      	b.n	80055fe <_svfiprintf_r+0x4a>
 8005722:	fb05 3202 	mla	r2, r5, r2, r3
 8005726:	2001      	movs	r0, #1
 8005728:	460f      	mov	r7, r1
 800572a:	e7a6      	b.n	800567a <_svfiprintf_r+0xc6>
 800572c:	2300      	movs	r3, #0
 800572e:	250a      	movs	r5, #10
 8005730:	4619      	mov	r1, r3
 8005732:	3701      	adds	r7, #1
 8005734:	9305      	str	r3, [sp, #20]
 8005736:	4638      	mov	r0, r7
 8005738:	f810 2b01 	ldrb.w	r2, [r0], #1
 800573c:	3a30      	subs	r2, #48	; 0x30
 800573e:	2a09      	cmp	r2, #9
 8005740:	d903      	bls.n	800574a <_svfiprintf_r+0x196>
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0c8      	beq.n	80056d8 <_svfiprintf_r+0x124>
 8005746:	9105      	str	r1, [sp, #20]
 8005748:	e7c6      	b.n	80056d8 <_svfiprintf_r+0x124>
 800574a:	fb05 2101 	mla	r1, r5, r1, r2
 800574e:	2301      	movs	r3, #1
 8005750:	4607      	mov	r7, r0
 8005752:	e7f0      	b.n	8005736 <_svfiprintf_r+0x182>
 8005754:	ab03      	add	r3, sp, #12
 8005756:	9300      	str	r3, [sp, #0]
 8005758:	4622      	mov	r2, r4
 800575a:	4b11      	ldr	r3, [pc, #68]	; (80057a0 <_svfiprintf_r+0x1ec>)
 800575c:	a904      	add	r1, sp, #16
 800575e:	4640      	mov	r0, r8
 8005760:	f7fe f8f8 	bl	8003954 <_printf_float>
 8005764:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005768:	4681      	mov	r9, r0
 800576a:	d1d6      	bne.n	800571a <_svfiprintf_r+0x166>
 800576c:	89a3      	ldrh	r3, [r4, #12]
 800576e:	065b      	lsls	r3, r3, #25
 8005770:	f53f af35 	bmi.w	80055de <_svfiprintf_r+0x2a>
 8005774:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005776:	b01d      	add	sp, #116	; 0x74
 8005778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800577c:	ab03      	add	r3, sp, #12
 800577e:	9300      	str	r3, [sp, #0]
 8005780:	4622      	mov	r2, r4
 8005782:	4b07      	ldr	r3, [pc, #28]	; (80057a0 <_svfiprintf_r+0x1ec>)
 8005784:	a904      	add	r1, sp, #16
 8005786:	4640      	mov	r0, r8
 8005788:	f7fe fb90 	bl	8003eac <_printf_i>
 800578c:	e7ea      	b.n	8005764 <_svfiprintf_r+0x1b0>
 800578e:	bf00      	nop
 8005790:	08005d7c 	.word	0x08005d7c
 8005794:	08005d82 	.word	0x08005d82
 8005798:	08005d86 	.word	0x08005d86
 800579c:	08003955 	.word	0x08003955
 80057a0:	08005501 	.word	0x08005501

080057a4 <_sbrk_r>:
 80057a4:	b538      	push	{r3, r4, r5, lr}
 80057a6:	2300      	movs	r3, #0
 80057a8:	4c05      	ldr	r4, [pc, #20]	; (80057c0 <_sbrk_r+0x1c>)
 80057aa:	4605      	mov	r5, r0
 80057ac:	4608      	mov	r0, r1
 80057ae:	6023      	str	r3, [r4, #0]
 80057b0:	f7fb fc68 	bl	8001084 <_sbrk>
 80057b4:	1c43      	adds	r3, r0, #1
 80057b6:	d102      	bne.n	80057be <_sbrk_r+0x1a>
 80057b8:	6823      	ldr	r3, [r4, #0]
 80057ba:	b103      	cbz	r3, 80057be <_sbrk_r+0x1a>
 80057bc:	602b      	str	r3, [r5, #0]
 80057be:	bd38      	pop	{r3, r4, r5, pc}
 80057c0:	20001d00 	.word	0x20001d00

080057c4 <__ascii_mbtowc>:
 80057c4:	b082      	sub	sp, #8
 80057c6:	b901      	cbnz	r1, 80057ca <__ascii_mbtowc+0x6>
 80057c8:	a901      	add	r1, sp, #4
 80057ca:	b142      	cbz	r2, 80057de <__ascii_mbtowc+0x1a>
 80057cc:	b14b      	cbz	r3, 80057e2 <__ascii_mbtowc+0x1e>
 80057ce:	7813      	ldrb	r3, [r2, #0]
 80057d0:	600b      	str	r3, [r1, #0]
 80057d2:	7812      	ldrb	r2, [r2, #0]
 80057d4:	1c10      	adds	r0, r2, #0
 80057d6:	bf18      	it	ne
 80057d8:	2001      	movne	r0, #1
 80057da:	b002      	add	sp, #8
 80057dc:	4770      	bx	lr
 80057de:	4610      	mov	r0, r2
 80057e0:	e7fb      	b.n	80057da <__ascii_mbtowc+0x16>
 80057e2:	f06f 0001 	mvn.w	r0, #1
 80057e6:	e7f8      	b.n	80057da <__ascii_mbtowc+0x16>

080057e8 <memmove>:
 80057e8:	4288      	cmp	r0, r1
 80057ea:	b510      	push	{r4, lr}
 80057ec:	eb01 0302 	add.w	r3, r1, r2
 80057f0:	d807      	bhi.n	8005802 <memmove+0x1a>
 80057f2:	1e42      	subs	r2, r0, #1
 80057f4:	4299      	cmp	r1, r3
 80057f6:	d00a      	beq.n	800580e <memmove+0x26>
 80057f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057fc:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005800:	e7f8      	b.n	80057f4 <memmove+0xc>
 8005802:	4283      	cmp	r3, r0
 8005804:	d9f5      	bls.n	80057f2 <memmove+0xa>
 8005806:	1881      	adds	r1, r0, r2
 8005808:	1ad2      	subs	r2, r2, r3
 800580a:	42d3      	cmn	r3, r2
 800580c:	d100      	bne.n	8005810 <memmove+0x28>
 800580e:	bd10      	pop	{r4, pc}
 8005810:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005814:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005818:	e7f7      	b.n	800580a <memmove+0x22>

0800581a <__malloc_lock>:
 800581a:	4770      	bx	lr

0800581c <__malloc_unlock>:
 800581c:	4770      	bx	lr

0800581e <_realloc_r>:
 800581e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005820:	4607      	mov	r7, r0
 8005822:	4614      	mov	r4, r2
 8005824:	460e      	mov	r6, r1
 8005826:	b921      	cbnz	r1, 8005832 <_realloc_r+0x14>
 8005828:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800582c:	4611      	mov	r1, r2
 800582e:	f7ff be0d 	b.w	800544c <_malloc_r>
 8005832:	b922      	cbnz	r2, 800583e <_realloc_r+0x20>
 8005834:	f7ff fdbe 	bl	80053b4 <_free_r>
 8005838:	4625      	mov	r5, r4
 800583a:	4628      	mov	r0, r5
 800583c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800583e:	f000 f821 	bl	8005884 <_malloc_usable_size_r>
 8005842:	42a0      	cmp	r0, r4
 8005844:	d20f      	bcs.n	8005866 <_realloc_r+0x48>
 8005846:	4621      	mov	r1, r4
 8005848:	4638      	mov	r0, r7
 800584a:	f7ff fdff 	bl	800544c <_malloc_r>
 800584e:	4605      	mov	r5, r0
 8005850:	2800      	cmp	r0, #0
 8005852:	d0f2      	beq.n	800583a <_realloc_r+0x1c>
 8005854:	4631      	mov	r1, r6
 8005856:	4622      	mov	r2, r4
 8005858:	f7fd ffd8 	bl	800380c <memcpy>
 800585c:	4631      	mov	r1, r6
 800585e:	4638      	mov	r0, r7
 8005860:	f7ff fda8 	bl	80053b4 <_free_r>
 8005864:	e7e9      	b.n	800583a <_realloc_r+0x1c>
 8005866:	4635      	mov	r5, r6
 8005868:	e7e7      	b.n	800583a <_realloc_r+0x1c>

0800586a <__ascii_wctomb>:
 800586a:	b149      	cbz	r1, 8005880 <__ascii_wctomb+0x16>
 800586c:	2aff      	cmp	r2, #255	; 0xff
 800586e:	bf8b      	itete	hi
 8005870:	238a      	movhi	r3, #138	; 0x8a
 8005872:	700a      	strbls	r2, [r1, #0]
 8005874:	6003      	strhi	r3, [r0, #0]
 8005876:	2001      	movls	r0, #1
 8005878:	bf88      	it	hi
 800587a:	f04f 30ff 	movhi.w	r0, #4294967295
 800587e:	4770      	bx	lr
 8005880:	4608      	mov	r0, r1
 8005882:	4770      	bx	lr

08005884 <_malloc_usable_size_r>:
 8005884:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005888:	1f18      	subs	r0, r3, #4
 800588a:	2b00      	cmp	r3, #0
 800588c:	bfbc      	itt	lt
 800588e:	580b      	ldrlt	r3, [r1, r0]
 8005890:	18c0      	addlt	r0, r0, r3
 8005892:	4770      	bx	lr

08005894 <_init>:
 8005894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005896:	bf00      	nop
 8005898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800589a:	bc08      	pop	{r3}
 800589c:	469e      	mov	lr, r3
 800589e:	4770      	bx	lr

080058a0 <_fini>:
 80058a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058a2:	bf00      	nop
 80058a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058a6:	bc08      	pop	{r3}
 80058a8:	469e      	mov	lr, r3
 80058aa:	4770      	bx	lr
